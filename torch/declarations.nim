# Automatically generated, to update run again the generator from the torch root path
# nim c -r torch/generator.nim
proc contiguous*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("contiguous").to(ATensor)
proc u_abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_abs").to(ATensor)
proc u_th_sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_sigmoid").to(ATensor)
proc u_log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log").to(ATensor)
proc u_log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log10").to(ATensor)
proc u_log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log1p").to(ATensor)
proc u_log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log2").to(ATensor)
proc lgamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("lgamma").to(ATensor)
proc digamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("digamma").to(ATensor)
proc u_exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_exp").to(ATensor)
proc u_expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_expm1").to(ATensor)
proc u_cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cos").to(ATensor)
proc u_acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_acos").to(ATensor)
proc u_cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cosh").to(ATensor)
proc u_sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sin").to(ATensor)
proc u_asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_asin").to(ATensor)
proc u_sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sinh").to(ATensor)
proc u_tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_tan").to(ATensor)
proc u_atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_atan").to(ATensor)
proc u_th_tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_tanh").to(ATensor)
proc u_erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erf").to(ATensor)
proc u_erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erfc").to(ATensor)
proc erfinv*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfinv").to(ATensor)
proc u_sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sqrt").to(ATensor)
proc u_rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_rsqrt").to(ATensor)
proc u_ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ceil").to(ATensor)
proc u_floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_floor").to(ATensor)
proc u_round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_round").to(ATensor)
proc u_trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_trunc").to(ATensor)
proc frac*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("frac").to(ATensor)
proc reciprocal*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("reciprocal").to(ATensor)
proc neg*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("neg").to(ATensor)
proc sign*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sign").to(ATensor)
proc abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("abs").to(ATensor)
proc acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("acos").to(ATensor)
proc argmax*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmax").to(ATensor)
proc argmin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmin").to(ATensor)
proc asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("asin").to(ATensor)
proc atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan").to(ATensor)
proc bernoulli*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("bernoulli").to(ATensor)
proc ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("ceil").to(ATensor)
proc cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cos").to(ATensor)
proc cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cosh").to(ATensor)
proc det*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("det").to(ATensor)
proc erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erf").to(ATensor)
proc erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfc").to(ATensor)
proc exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("exp").to(ATensor)
proc expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("expm1").to(ATensor)
proc floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("floor").to(ATensor)
proc inverse*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("inverse").to(ATensor)
proc log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log").to(ATensor)
proc log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log10").to(ATensor)
proc log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log1p").to(ATensor)
proc log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log2").to(ATensor)
proc logdet*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("logdet").to(ATensor)
proc mean*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("mean").to(ATensor)
proc pin_memory*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("pin_memory").to(ATensor)
proc round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("round").to(ATensor)
proc relu*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("relu").to(ATensor)
proc rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("rsqrt").to(ATensor)
proc sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sigmoid").to(ATensor)
proc sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sin").to(ATensor)
proc sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sinh").to(ATensor)
proc squeeze*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("squeeze").to(ATensor)
proc sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sum").to(ATensor)
proc u_sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sum").to(ATensor)
proc sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sqrt").to(ATensor)
proc prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("prod").to(ATensor)
proc u_prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_prod").to(ATensor)
proc t*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("t").to(ATensor)
proc tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tan").to(ATensor)
proc tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tanh").to(ATensor)
proc trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("trunc").to(ATensor)
proc clone*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("clone").to(ATensor)
proc to_dense*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("to_dense").to(ATensor)
proc coalesce*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("coalesce").to(ATensor)
proc u_indices*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_indices").to(ATensor)
proc u_values*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_values").to(ATensor)
