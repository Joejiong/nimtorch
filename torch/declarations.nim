# Automatically generated, to update run again the generator from the torch root path
# nim c -r torch/generator.nim

template storage_offset*(self: Tensor): int64 = self.dynamicCppCall("storage_offset").to(int64)
template storage_offset*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("storage_offset", self).to(int64)
template resize_u*(self: Tensor, size: IntList): Tensor = self.dynamicCppCall("resize_", size).to(Tensor)
template resize_u*(ty: TensorType; self: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("resize_", self, size).to(Tensor)
template set_u*(self: Tensor, source: var AStorage): Tensor = self.dynamicCppCall("set_", source).to(Tensor)
template set_u*(ty: TensorType; self: var Tensor, source: var AStorage): Tensor = ty.dynamicCppCall("set_", self, source).to(Tensor)
template set_u*(self: Tensor, source: var AStorage, storage_offset: int64, size: IntList, stride: IntList): Tensor = self.dynamicCppCall("set_", source, storage_offset, size, stride).to(Tensor)
template set_u*(ty: TensorType; self: var Tensor, source: var AStorage, storage_offset: int64, size: IntList, stride: IntList): Tensor = ty.dynamicCppCall("set_", self, source, storage_offset, size, stride).to(Tensor)
template set_u*(self: Tensor, source: var Tensor): Tensor = self.dynamicCppCall("set_", source).to(Tensor)
template set_u*(ty: TensorType; self: var Tensor, source: var Tensor): Tensor = ty.dynamicCppCall("set_", self, source).to(Tensor)
template set_u*(self: Tensor): Tensor = self.dynamicCppCall("set_").to(Tensor)
template set_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("set_", self).to(Tensor)
template u_fill_u*(self: Tensor, value: float): Tensor = self.dynamicCppCall("_fill_", value).to(Tensor)
template u_fill_u*(ty: TensorType; self: var Tensor, value: float): Tensor = ty.dynamicCppCall("_fill_", self, value).to(Tensor)
template u_fill_u*(self: Tensor, value: var Tensor): Tensor = self.dynamicCppCall("_fill_", value).to(Tensor)
template u_fill_u*(ty: TensorType; self: var Tensor, value: var Tensor): Tensor = ty.dynamicCppCall("_fill_", self, value).to(Tensor)
template is_contiguous*(self: Tensor): bool = self.dynamicCppCall("is_contiguous").to(bool)
template is_contiguous*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_contiguous", self).to(bool)
template is_set_to*(self: Tensor, tensor: var Tensor): bool = self.dynamicCppCall("is_set_to", tensor).to(bool)
template is_set_to*(ty: TensorType; self: var Tensor, tensor: var Tensor): bool = ty.dynamicCppCall("is_set_to", self, tensor).to(bool)
template masked_fill_u*(self: Tensor, mask: var Tensor, value: float): Tensor = self.dynamicCppCall("masked_fill_", mask, value).to(Tensor)
template masked_fill_u*(ty: TensorType; self: var Tensor, mask: var Tensor, value: float): Tensor = ty.dynamicCppCall("masked_fill_", self, mask, value).to(Tensor)
template masked_fill_u*(self: Tensor, mask: var Tensor, value: var Tensor): Tensor = self.dynamicCppCall("masked_fill_", mask, value).to(Tensor)
template masked_fill_u*(ty: TensorType; self: var Tensor, mask: var Tensor, value: var Tensor): Tensor = ty.dynamicCppCall("masked_fill_", self, mask, value).to(Tensor)
template masked_scatter_u*(self: Tensor, mask: var Tensor, source: var Tensor): Tensor = self.dynamicCppCall("masked_scatter_", mask, source).to(Tensor)
template masked_scatter_u*(ty: TensorType; self: var Tensor, mask: var Tensor, source: var Tensor): Tensor = ty.dynamicCppCall("masked_scatter_", self, mask, source).to(Tensor)
template masked_select_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mask: var Tensor): Tensor = ty.dynamicCppCall("masked_select_out", aresult, self, mask).to(Tensor)
template masked_select_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mask: var Tensor): Tensor = dynamicCCall("at::masked_select_out", aresult, self, mask).to(Tensor)
template masked_select*(self: Tensor, mask: var Tensor): Tensor = self.dynamicCppCall("masked_select", mask).to(Tensor)
template masked_select*(ty: TensorType; self: var Tensor, mask: var Tensor): Tensor = ty.dynamicCppCall("masked_select", self, mask).to(Tensor)
template masked_select*(_: typedesc[torch]; self: var Tensor, mask: var Tensor): Tensor = dynamicCCall("at::masked_select", self, mask).to(Tensor)
template nonzero_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("nonzero_out", aresult, self).to(Tensor)
template nonzero_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::nonzero_out", aresult, self).to(Tensor)
template nonzero*(self: Tensor): Tensor = self.dynamicCppCall("nonzero").to(Tensor)
template nonzero*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("nonzero", self).to(Tensor)
template nonzero*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::nonzero", self).to(Tensor)
template contiguous*(self: Tensor): Tensor = self.dynamicCppCall("contiguous").to(Tensor)
template contiguous*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("contiguous", self).to(Tensor)
template th_clone*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("th_clone", self).to(Tensor)
template th_clone*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::th_clone", self).to(Tensor)
template view*(self: Tensor, size: IntList): Tensor = self.dynamicCppCall("view", size).to(Tensor)
template view*(ty: TensorType; self: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("view", self, size).to(Tensor)
template th_resize_as_u*(ty: TensorType; self: var Tensor, the_template: var Tensor): Tensor = ty.dynamicCppCall("th_resize_as_", self, the_template).to(Tensor)
template th_resize_as_u*(_: typedesc[torch]; self: var Tensor, the_template: var Tensor): Tensor = dynamicCCall("at::th_resize_as_", self, the_template).to(Tensor)
template index_select_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, index: var Tensor): Tensor = ty.dynamicCppCall("index_select_out", aresult, self, dim, index).to(Tensor)
template index_select_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, index: var Tensor): Tensor = dynamicCCall("at::index_select_out", aresult, self, dim, index).to(Tensor)
template index_select*(self: Tensor, dim: int64, index: var Tensor): Tensor = self.dynamicCppCall("index_select", dim, index).to(Tensor)
template index_select*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor): Tensor = ty.dynamicCppCall("index_select", self, dim, index).to(Tensor)
template index_select*(_: typedesc[torch]; self: var Tensor, dim: int64, index: var Tensor): Tensor = dynamicCCall("at::index_select", self, dim, index).to(Tensor)
template u_indexCopy_u*(self: Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = self.dynamicCppCall("_indexCopy_", dim, index, source).to(Tensor)
template u_indexCopy_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = ty.dynamicCppCall("_indexCopy_", self, dim, index, source).to(Tensor)
template take_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, index: var Tensor): Tensor = ty.dynamicCppCall("take_out", aresult, self, index).to(Tensor)
template take_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, index: var Tensor): Tensor = dynamicCCall("at::take_out", aresult, self, index).to(Tensor)
template take*(self: Tensor, index: var Tensor): Tensor = self.dynamicCppCall("take", index).to(Tensor)
template take*(ty: TensorType; self: var Tensor, index: var Tensor): Tensor = ty.dynamicCppCall("take", self, index).to(Tensor)
template take*(_: typedesc[torch]; self: var Tensor, index: var Tensor): Tensor = dynamicCCall("at::take", self, index).to(Tensor)
template put_u*(self: Tensor, index: var Tensor, source: var Tensor, accumulate: bool = false): Tensor = self.dynamicCppCall("put_", index, source, accumulate).to(Tensor)
template put_u*(ty: TensorType; self: var Tensor, index: var Tensor, source: var Tensor, accumulate: bool = false): Tensor = ty.dynamicCppCall("put_", self, index, source, accumulate).to(Tensor)
template index_add_u*(self: Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = self.dynamicCppCall("index_add_", dim, index, source).to(Tensor)
template index_add_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = ty.dynamicCppCall("index_add_", self, dim, index, source).to(Tensor)
template index_fill_u*(self: Tensor, dim: int64, index: var Tensor, value: float): Tensor = self.dynamicCppCall("index_fill_", dim, index, value).to(Tensor)
template index_fill_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, value: float): Tensor = ty.dynamicCppCall("index_fill_", self, dim, index, value).to(Tensor)
template index_fill_u*(self: Tensor, dim: int64, index: var Tensor, value: var Tensor): Tensor = self.dynamicCppCall("index_fill_", dim, index, value).to(Tensor)
template index_fill_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, value: var Tensor): Tensor = ty.dynamicCppCall("index_fill_", self, dim, index, value).to(Tensor)
template unfold*(self: Tensor, dimension: int64, size: int64, step: int64): Tensor = self.dynamicCppCall("unfold", dimension, size, step).to(Tensor)
template unfold*(ty: TensorType; self: var Tensor, dimension: int64, size: int64, step: int64): Tensor = ty.dynamicCppCall("unfold", self, dimension, size, step).to(Tensor)
template u_range_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, step: float = 1): Tensor = ty.dynamicCppCall("_range_out", aresult, start, aend, step).to(Tensor)
template u_range_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, step: float = 1): Tensor = dynamicCCall("at::_range_out", aresult, start, aend, step).to(Tensor)
template u_range*(ty: TensorType; start: float, aend: float, step: float = 1): Tensor = ty.dynamicCppCall("_range", start, aend, step).to(Tensor)
template u_arange_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, step: float = 1): Tensor = ty.dynamicCppCall("_arange_out", aresult, start, aend, step).to(Tensor)
template u_arange_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, step: float = 1): Tensor = dynamicCCall("at::_arange_out", aresult, start, aend, step).to(Tensor)
template u_arange*(ty: TensorType; start: float, aend: float, step: float = 1): Tensor = ty.dynamicCppCall("_arange", start, aend, step).to(Tensor)
template u_arange_out*(ty: TensorType; aresult: var Tensor, aend: float): Tensor = ty.dynamicCppCall("_arange_out", aresult, aend).to(Tensor)
template u_arange_out*(_: typedesc[torch]; aresult: var Tensor, aend: float): Tensor = dynamicCCall("at::_arange_out", aresult, aend).to(Tensor)
template u_arange*(ty: TensorType; aend: float): Tensor = ty.dynamicCppCall("_arange", aend).to(Tensor)
template scatter_u*(self: Tensor, dim: int64, index: var Tensor, src: var Tensor): Tensor = self.dynamicCppCall("scatter_", dim, index, src).to(Tensor)
template scatter_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, src: var Tensor): Tensor = ty.dynamicCppCall("scatter_", self, dim, index, src).to(Tensor)
template scatter_u*(self: Tensor, dim: int64, index: var Tensor, value: float): Tensor = self.dynamicCppCall("scatter_", dim, index, value).to(Tensor)
template scatter_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, value: float): Tensor = ty.dynamicCppCall("scatter_", self, dim, index, value).to(Tensor)
template scatter_add_u*(self: Tensor, dim: int64, index: var Tensor, src: var Tensor): Tensor = self.dynamicCppCall("scatter_add_", dim, index, src).to(Tensor)
template scatter_add_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, src: var Tensor): Tensor = ty.dynamicCppCall("scatter_add_", self, dim, index, src).to(Tensor)
template gather_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, index: var Tensor): Tensor = ty.dynamicCppCall("gather_out", aresult, self, dim, index).to(Tensor)
template gather_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, index: var Tensor): Tensor = dynamicCCall("at::gather_out", aresult, self, dim, index).to(Tensor)
template gather*(self: Tensor, dim: int64, index: var Tensor): Tensor = self.dynamicCppCall("gather", dim, index).to(Tensor)
template gather*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor): Tensor = ty.dynamicCppCall("gather", self, dim, index).to(Tensor)
template gather*(_: typedesc[torch]; self: var Tensor, dim: int64, index: var Tensor): Tensor = dynamicCCall("at::gather", self, dim, index).to(Tensor)
template data_ptr*(self: Tensor): pointer = self.dynamicCppCall("data_ptr").to(pointer)
template data_ptr*(ty: TensorType; self: var Tensor): pointer = ty.dynamicCppCall("data_ptr", self).to(pointer)
template equal*(self: Tensor, other: var Tensor): bool = self.dynamicCppCall("equal", other).to(bool)
template equal*(ty: TensorType; self: var Tensor, other: var Tensor): bool = ty.dynamicCppCall("equal", self, other).to(bool)
template equal*(_: typedesc[torch]; self: var Tensor, other: var Tensor): bool = dynamicCCall("at::equal", self, other).to(bool)
template u_u_uand_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__and___out", aresult, self, other).to(Tensor)
template u_u_uand_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::__and___out", aresult, self, other).to(Tensor)
template u_u_uand_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__and__", other).to(Tensor)
template u_u_uand_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__and__", self, other).to(Tensor)
template u_u_uand_u_uu*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::__and__", self, other).to(Tensor)
template u_u_uand_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__and___out", aresult, self, other).to(Tensor)
template u_u_uand_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__and___out", aresult, self, other).to(Tensor)
template u_u_uand_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__and__", other).to(Tensor)
template u_u_uand_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__and__", self, other).to(Tensor)
template u_u_uand_u_uu*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__and__", self, other).to(Tensor)
template u_u_uiand_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__iand__", other).to(Tensor)
template u_u_uiand_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__iand__", self, other).to(Tensor)
template u_u_uiand_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__iand__", other).to(Tensor)
template u_u_uiand_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__iand__", self, other).to(Tensor)
template u_u_uor_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__or___out", aresult, self, other).to(Tensor)
template u_u_uor_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::__or___out", aresult, self, other).to(Tensor)
template u_u_uor_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__or__", other).to(Tensor)
template u_u_uor_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__or__", self, other).to(Tensor)
template u_u_uor_u_uu*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::__or__", self, other).to(Tensor)
template u_u_uor_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__or___out", aresult, self, other).to(Tensor)
template u_u_uor_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__or___out", aresult, self, other).to(Tensor)
template u_u_uor_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__or__", other).to(Tensor)
template u_u_uor_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__or__", self, other).to(Tensor)
template u_u_uor_u_uu*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__or__", self, other).to(Tensor)
template u_u_uior_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__ior__", other).to(Tensor)
template u_u_uior_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__ior__", self, other).to(Tensor)
template u_u_uior_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__ior__", other).to(Tensor)
template u_u_uior_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__ior__", self, other).to(Tensor)
template u_u_uxor_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__xor___out", aresult, self, other).to(Tensor)
template u_u_uxor_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::__xor___out", aresult, self, other).to(Tensor)
template u_u_uxor_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__xor__", other).to(Tensor)
template u_u_uxor_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__xor__", self, other).to(Tensor)
template u_u_uxor_u_uu*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::__xor__", self, other).to(Tensor)
template u_u_uxor_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__xor___out", aresult, self, other).to(Tensor)
template u_u_uxor_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__xor___out", aresult, self, other).to(Tensor)
template u_u_uxor_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__xor__", other).to(Tensor)
template u_u_uxor_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__xor__", self, other).to(Tensor)
template u_u_uxor_u_uu*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__xor__", self, other).to(Tensor)
template u_u_uixor_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__ixor__", other).to(Tensor)
template u_u_uixor_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__ixor__", self, other).to(Tensor)
template u_u_uixor_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__ixor__", other).to(Tensor)
template u_u_uixor_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__ixor__", self, other).to(Tensor)
template u_u_ulshift_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__lshift___out", aresult, self, other).to(Tensor)
template u_u_ulshift_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::__lshift___out", aresult, self, other).to(Tensor)
template u_u_ulshift_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__lshift__", other).to(Tensor)
template u_u_ulshift_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__lshift__", self, other).to(Tensor)
template u_u_ulshift_u_uu*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::__lshift__", self, other).to(Tensor)
template u_u_ulshift_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__lshift___out", aresult, self, other).to(Tensor)
template u_u_ulshift_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__lshift___out", aresult, self, other).to(Tensor)
template u_u_ulshift_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__lshift__", other).to(Tensor)
template u_u_ulshift_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__lshift__", self, other).to(Tensor)
template u_u_ulshift_u_uu*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__lshift__", self, other).to(Tensor)
template u_u_uilshift_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__ilshift__", other).to(Tensor)
template u_u_uilshift_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__ilshift__", self, other).to(Tensor)
template u_u_uilshift_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__ilshift__", other).to(Tensor)
template u_u_uilshift_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__ilshift__", self, other).to(Tensor)
template u_u_urshift_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__rshift___out", aresult, self, other).to(Tensor)
template u_u_urshift_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::__rshift___out", aresult, self, other).to(Tensor)
template u_u_urshift_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__rshift__", other).to(Tensor)
template u_u_urshift_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__rshift__", self, other).to(Tensor)
template u_u_urshift_u_uu*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::__rshift__", self, other).to(Tensor)
template u_u_urshift_u_u_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__rshift___out", aresult, self, other).to(Tensor)
template u_u_urshift_u_u_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__rshift___out", aresult, self, other).to(Tensor)
template u_u_urshift_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__rshift__", other).to(Tensor)
template u_u_urshift_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__rshift__", self, other).to(Tensor)
template u_u_urshift_u_uu*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::__rshift__", self, other).to(Tensor)
template u_u_uirshift_u_uu*(self: Tensor, other: float): Tensor = self.dynamicCppCall("__irshift__", other).to(Tensor)
template u_u_uirshift_u_uu*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("__irshift__", self, other).to(Tensor)
template u_u_uirshift_u_uu*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("__irshift__", other).to(Tensor)
template u_u_uirshift_u_uu*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("__irshift__", self, other).to(Tensor)
template lt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("lt_out", aresult, self, other).to(Tensor)
template lt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::lt_out", aresult, self, other).to(Tensor)
template lt*(self: Tensor, other: float): Tensor = self.dynamicCppCall("lt", other).to(Tensor)
template lt*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("lt", self, other).to(Tensor)
template lt*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::lt", self, other).to(Tensor)
template lt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("lt_out", aresult, self, other).to(Tensor)
template lt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::lt_out", aresult, self, other).to(Tensor)
template lt*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("lt", other).to(Tensor)
template lt*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("lt", self, other).to(Tensor)
template lt*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::lt", self, other).to(Tensor)
template lt_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("lt_", other).to(Tensor)
template lt_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("lt_", self, other).to(Tensor)
template lt_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("lt_", other).to(Tensor)
template lt_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("lt_", self, other).to(Tensor)
template gt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("gt_out", aresult, self, other).to(Tensor)
template gt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::gt_out", aresult, self, other).to(Tensor)
template gt*(self: Tensor, other: float): Tensor = self.dynamicCppCall("gt", other).to(Tensor)
template gt*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("gt", self, other).to(Tensor)
template gt*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::gt", self, other).to(Tensor)
template gt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("gt_out", aresult, self, other).to(Tensor)
template gt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::gt_out", aresult, self, other).to(Tensor)
template gt*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("gt", other).to(Tensor)
template gt*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("gt", self, other).to(Tensor)
template gt*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::gt", self, other).to(Tensor)
template gt_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("gt_", other).to(Tensor)
template gt_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("gt_", self, other).to(Tensor)
template gt_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("gt_", other).to(Tensor)
template gt_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("gt_", self, other).to(Tensor)
template le_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("le_out", aresult, self, other).to(Tensor)
template le_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::le_out", aresult, self, other).to(Tensor)
template le*(self: Tensor, other: float): Tensor = self.dynamicCppCall("le", other).to(Tensor)
template le*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("le", self, other).to(Tensor)
template le*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::le", self, other).to(Tensor)
template le_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("le_out", aresult, self, other).to(Tensor)
template le_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::le_out", aresult, self, other).to(Tensor)
template le*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("le", other).to(Tensor)
template le*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("le", self, other).to(Tensor)
template le*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::le", self, other).to(Tensor)
template le_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("le_", other).to(Tensor)
template le_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("le_", self, other).to(Tensor)
template le_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("le_", other).to(Tensor)
template le_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("le_", self, other).to(Tensor)
template ge_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ge_out", aresult, self, other).to(Tensor)
template ge_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::ge_out", aresult, self, other).to(Tensor)
template ge*(self: Tensor, other: float): Tensor = self.dynamicCppCall("ge", other).to(Tensor)
template ge*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ge", self, other).to(Tensor)
template ge*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::ge", self, other).to(Tensor)
template ge_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ge_out", aresult, self, other).to(Tensor)
template ge_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::ge_out", aresult, self, other).to(Tensor)
template ge*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("ge", other).to(Tensor)
template ge*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ge", self, other).to(Tensor)
template ge*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::ge", self, other).to(Tensor)
template ge_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("ge_", other).to(Tensor)
template ge_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ge_", self, other).to(Tensor)
template ge_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("ge_", other).to(Tensor)
template ge_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ge_", self, other).to(Tensor)
template eq_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("eq_out", aresult, self, other).to(Tensor)
template eq_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::eq_out", aresult, self, other).to(Tensor)
template eq*(self: Tensor, other: float): Tensor = self.dynamicCppCall("eq", other).to(Tensor)
template eq*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("eq", self, other).to(Tensor)
template eq*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::eq", self, other).to(Tensor)
template eq_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("eq_out", aresult, self, other).to(Tensor)
template eq_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::eq_out", aresult, self, other).to(Tensor)
template eq*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("eq", other).to(Tensor)
template eq*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("eq", self, other).to(Tensor)
template eq*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::eq", self, other).to(Tensor)
template eq_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("eq_", other).to(Tensor)
template eq_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("eq_", self, other).to(Tensor)
template eq_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("eq_", other).to(Tensor)
template eq_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("eq_", self, other).to(Tensor)
template ne_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ne_out", aresult, self, other).to(Tensor)
template ne_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::ne_out", aresult, self, other).to(Tensor)
template ne*(self: Tensor, other: float): Tensor = self.dynamicCppCall("ne", other).to(Tensor)
template ne*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ne", self, other).to(Tensor)
template ne*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::ne", self, other).to(Tensor)
template ne_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ne_out", aresult, self, other).to(Tensor)
template ne_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::ne_out", aresult, self, other).to(Tensor)
template ne*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("ne", other).to(Tensor)
template ne*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ne", self, other).to(Tensor)
template ne*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::ne", self, other).to(Tensor)
template ne_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("ne_", other).to(Tensor)
template ne_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("ne_", self, other).to(Tensor)
template ne_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("ne_", other).to(Tensor)
template ne_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("ne_", self, other).to(Tensor)
template min_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("min_out", aresult, self, other).to(Tensor)
template min_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::min_out", aresult, self, other).to(Tensor)
template min*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("min", other).to(Tensor)
template min*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("min", self, other).to(Tensor)
template min*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::min", self, other).to(Tensor)
template min*(self: Tensor): float = self.dynamicCppCall("min").to(float)
template min*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("min", self).to(float)
template min*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::min", self).to(float)
template u_th_min_out*(ty: TensorType; min: var Tensor, min_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_min_out", min, min_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_min_out*(_: typedesc[torch]; min: var Tensor, min_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_min_out", min, min_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_min*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_th_min", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_min*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_min", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_min*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_min", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("max_out", aresult, self, other).to(Tensor)
template max_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::max_out", aresult, self, other).to(Tensor)
template max*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("max", other).to(Tensor)
template max*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("max", self, other).to(Tensor)
template max*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::max", self, other).to(Tensor)
template max*(self: Tensor): float = self.dynamicCppCall("max").to(float)
template max*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("max", self).to(float)
template max*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::max", self).to(float)
template u_th_max_out*(ty: TensorType; max: var Tensor, max_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_max_out", max, max_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_max_out*(_: typedesc[torch]; max: var Tensor, max_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_max_out", max, max_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_max*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_th_max", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_max*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_max", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_max*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_max", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_kthvalue_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_kthvalue_out", values, indices, self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_kthvalue_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_kthvalue_out", values, indices, self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_kthvalue*(self: Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_th_kthvalue", k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_kthvalue*(ty: TensorType; self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_kthvalue", self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_kthvalue*(_: typedesc[torch]; self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_kthvalue", self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_mode_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_mode_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_mode_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_mode_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_mode*(self: Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_th_mode", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_mode*(ty: TensorType; self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_mode", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_mode*(_: typedesc[torch]; self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_mode", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template median*(self: Tensor): float = self.dynamicCppCall("median").to(float)
template median*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("median", self).to(float)
template median*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::median", self).to(float)
template u_th_median_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_median_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_median_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_median_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_median*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_th_median", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_median*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_th_median", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_th_median*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::_th_median", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template sort_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, descending: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("sort_out", values, indices, self, dim, descending).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template sort_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, descending: bool = false): (Tensor, Tensor) = dynamicCCall("at::sort_out", values, indices, self, dim, descending).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template sort*(self: Tensor, dim: int64 = -1, descending: bool = false): (Tensor, Tensor) = self.dynamicCppCall("sort", dim, descending).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template sort*(ty: TensorType; self: var Tensor, dim: int64 = -1, descending: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("sort", self, dim, descending).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template sort*(_: typedesc[torch]; self: var Tensor, dim: int64 = -1, descending: bool = false): (Tensor, Tensor) = dynamicCCall("at::sort", self, dim, descending).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template topk_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, largest: bool = true, sorted: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("topk_out", values, indices, self, k, dim, largest, sorted).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template topk_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, largest: bool = true, sorted: bool = true): (Tensor, Tensor) = dynamicCCall("at::topk_out", values, indices, self, k, dim, largest, sorted).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template topk*(self: Tensor, k: int64, dim: int64 = -1, largest: bool = true, sorted: bool = true): (Tensor, Tensor) = self.dynamicCppCall("topk", k, dim, largest, sorted).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template topk*(ty: TensorType; self: var Tensor, k: int64, dim: int64 = -1, largest: bool = true, sorted: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("topk", self, k, dim, largest, sorted).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template topk*(_: typedesc[torch]; self: var Tensor, k: int64, dim: int64 = -1, largest: bool = true, sorted: bool = true): (Tensor, Tensor) = dynamicCCall("at::topk", self, k, dim, largest, sorted).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template all*(self: Tensor): float = self.dynamicCppCall("all").to(float)
template all*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("all", self).to(float)
template all*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::all", self).to(float)
template u_th_all_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_all_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_all_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_all_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_all*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_all", dim, keepdim).to(Tensor)
template u_th_all*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_all", self, dim, keepdim).to(Tensor)
template u_th_all*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_all", self, dim, keepdim).to(Tensor)
template any*(self: Tensor): float = self.dynamicCppCall("any").to(float)
template any*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("any", self).to(float)
template any*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::any", self).to(float)
template u_th_any_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_any_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_any_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_any_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_any*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_any", dim, keepdim).to(Tensor)
template u_th_any*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_any", self, dim, keepdim).to(Tensor)
template u_th_any*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_any", self, dim, keepdim).to(Tensor)
template u_th_get_device*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_th_get_device", self).to(int64)
template u_th_get_device*(_: typedesc[torch]; self: var Tensor): int64 = dynamicCCall("at::_th_get_device", self).to(int64)
template u_abs_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_abs_out", aresult, self).to(Tensor)
template u_abs_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_abs_out", aresult, self).to(Tensor)
template u_abs*(self: Tensor): Tensor = self.dynamicCppCall("_abs").to(Tensor)
template u_abs*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_abs", self).to(Tensor)
template u_abs*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_abs", self).to(Tensor)
template u_th_sigmoid_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_th_sigmoid_out", aresult, self).to(Tensor)
template u_th_sigmoid_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_th_sigmoid_out", aresult, self).to(Tensor)
template u_th_sigmoid*(self: Tensor): Tensor = self.dynamicCppCall("_th_sigmoid").to(Tensor)
template u_th_sigmoid*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_th_sigmoid", self).to(Tensor)
template u_th_sigmoid*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_th_sigmoid", self).to(Tensor)
template u_log_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_log_out", aresult, self).to(Tensor)
template u_log_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_log_out", aresult, self).to(Tensor)
template u_log*(self: Tensor): Tensor = self.dynamicCppCall("_log").to(Tensor)
template u_log*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_log", self).to(Tensor)
template u_log*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_log", self).to(Tensor)
template u_log10_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_log10_out", aresult, self).to(Tensor)
template u_log10_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_log10_out", aresult, self).to(Tensor)
template u_log10*(self: Tensor): Tensor = self.dynamicCppCall("_log10").to(Tensor)
template u_log10*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_log10", self).to(Tensor)
template u_log10*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_log10", self).to(Tensor)
template u_log1p_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_log1p_out", aresult, self).to(Tensor)
template u_log1p_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_log1p_out", aresult, self).to(Tensor)
template u_log1p*(self: Tensor): Tensor = self.dynamicCppCall("_log1p").to(Tensor)
template u_log1p*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_log1p", self).to(Tensor)
template u_log1p*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_log1p", self).to(Tensor)
template u_log2_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_log2_out", aresult, self).to(Tensor)
template u_log2_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_log2_out", aresult, self).to(Tensor)
template u_log2*(self: Tensor): Tensor = self.dynamicCppCall("_log2").to(Tensor)
template u_log2*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_log2", self).to(Tensor)
template u_log2*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_log2", self).to(Tensor)
template lgamma_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("lgamma_out", aresult, self).to(Tensor)
template lgamma_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::lgamma_out", aresult, self).to(Tensor)
template lgamma*(self: Tensor): Tensor = self.dynamicCppCall("lgamma").to(Tensor)
template lgamma*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("lgamma", self).to(Tensor)
template lgamma*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::lgamma", self).to(Tensor)
template lgamma_u*(self: Tensor): Tensor = self.dynamicCppCall("lgamma_").to(Tensor)
template lgamma_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("lgamma_", self).to(Tensor)
template digamma_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("digamma_out", aresult, self).to(Tensor)
template digamma_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::digamma_out", aresult, self).to(Tensor)
template digamma*(self: Tensor): Tensor = self.dynamicCppCall("digamma").to(Tensor)
template digamma*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("digamma", self).to(Tensor)
template digamma*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::digamma", self).to(Tensor)
template digamma_u*(self: Tensor): Tensor = self.dynamicCppCall("digamma_").to(Tensor)
template digamma_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("digamma_", self).to(Tensor)
template polygamma_out*(ty: TensorType; aresult: var Tensor, n: int64, self: var Tensor): Tensor = ty.dynamicCppCall("polygamma_out", aresult, n, self).to(Tensor)
template polygamma_out*(_: typedesc[torch]; aresult: var Tensor, n: int64, self: var Tensor): Tensor = dynamicCCall("at::polygamma_out", aresult, n, self).to(Tensor)
template polygamma*(self: Tensor, n: int64): Tensor = self.dynamicCppCall("polygamma", n).to(Tensor)
template polygamma*(ty: TensorType; n: int64, self: var Tensor): Tensor = ty.dynamicCppCall("polygamma", n, self).to(Tensor)
template polygamma*(_: typedesc[torch]; n: int64, self: var Tensor): Tensor = dynamicCCall("at::polygamma", n, self).to(Tensor)
template polygamma_u*(self: Tensor, n: int64): Tensor = self.dynamicCppCall("polygamma_", n).to(Tensor)
template polygamma_u*(ty: TensorType; self: var Tensor, n: int64): Tensor = ty.dynamicCppCall("polygamma_", self, n).to(Tensor)
template u_exp_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_exp_out", aresult, self).to(Tensor)
template u_exp_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_exp_out", aresult, self).to(Tensor)
template u_exp*(self: Tensor): Tensor = self.dynamicCppCall("_exp").to(Tensor)
template u_exp*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_exp", self).to(Tensor)
template u_exp*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_exp", self).to(Tensor)
template u_expm1_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_expm1_out", aresult, self).to(Tensor)
template u_expm1_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_expm1_out", aresult, self).to(Tensor)
template u_expm1*(self: Tensor): Tensor = self.dynamicCppCall("_expm1").to(Tensor)
template u_expm1*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_expm1", self).to(Tensor)
template u_expm1*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_expm1", self).to(Tensor)
template u_cos_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_cos_out", aresult, self).to(Tensor)
template u_cos_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_cos_out", aresult, self).to(Tensor)
template u_cos*(self: Tensor): Tensor = self.dynamicCppCall("_cos").to(Tensor)
template u_cos*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_cos", self).to(Tensor)
template u_cos*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_cos", self).to(Tensor)
template u_acos_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_acos_out", aresult, self).to(Tensor)
template u_acos_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_acos_out", aresult, self).to(Tensor)
template u_acos*(self: Tensor): Tensor = self.dynamicCppCall("_acos").to(Tensor)
template u_acos*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_acos", self).to(Tensor)
template u_acos*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_acos", self).to(Tensor)
template u_cosh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_cosh_out", aresult, self).to(Tensor)
template u_cosh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_cosh_out", aresult, self).to(Tensor)
template u_cosh*(self: Tensor): Tensor = self.dynamicCppCall("_cosh").to(Tensor)
template u_cosh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_cosh", self).to(Tensor)
template u_cosh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_cosh", self).to(Tensor)
template u_sin_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_sin_out", aresult, self).to(Tensor)
template u_sin_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_sin_out", aresult, self).to(Tensor)
template u_sin*(self: Tensor): Tensor = self.dynamicCppCall("_sin").to(Tensor)
template u_sin*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sin", self).to(Tensor)
template u_sin*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sin", self).to(Tensor)
template u_asin_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_asin_out", aresult, self).to(Tensor)
template u_asin_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_asin_out", aresult, self).to(Tensor)
template u_asin*(self: Tensor): Tensor = self.dynamicCppCall("_asin").to(Tensor)
template u_asin*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_asin", self).to(Tensor)
template u_asin*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_asin", self).to(Tensor)
template u_sinh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_sinh_out", aresult, self).to(Tensor)
template u_sinh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_sinh_out", aresult, self).to(Tensor)
template u_sinh*(self: Tensor): Tensor = self.dynamicCppCall("_sinh").to(Tensor)
template u_sinh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sinh", self).to(Tensor)
template u_sinh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sinh", self).to(Tensor)
template u_tan_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_tan_out", aresult, self).to(Tensor)
template u_tan_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_tan_out", aresult, self).to(Tensor)
template u_tan*(self: Tensor): Tensor = self.dynamicCppCall("_tan").to(Tensor)
template u_tan*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_tan", self).to(Tensor)
template u_tan*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_tan", self).to(Tensor)
template u_atan_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_atan_out", aresult, self).to(Tensor)
template u_atan_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_atan_out", aresult, self).to(Tensor)
template u_atan*(self: Tensor): Tensor = self.dynamicCppCall("_atan").to(Tensor)
template u_atan*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_atan", self).to(Tensor)
template u_atan*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_atan", self).to(Tensor)
template u_th_tanh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_th_tanh_out", aresult, self).to(Tensor)
template u_th_tanh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_th_tanh_out", aresult, self).to(Tensor)
template u_th_tanh*(self: Tensor): Tensor = self.dynamicCppCall("_th_tanh").to(Tensor)
template u_th_tanh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_th_tanh", self).to(Tensor)
template u_th_tanh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_th_tanh", self).to(Tensor)
template u_erf_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_erf_out", aresult, self).to(Tensor)
template u_erf_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_erf_out", aresult, self).to(Tensor)
template u_erf*(self: Tensor): Tensor = self.dynamicCppCall("_erf").to(Tensor)
template u_erf*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_erf", self).to(Tensor)
template u_erf*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_erf", self).to(Tensor)
template u_erfc_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_erfc_out", aresult, self).to(Tensor)
template u_erfc_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_erfc_out", aresult, self).to(Tensor)
template u_erfc*(self: Tensor): Tensor = self.dynamicCppCall("_erfc").to(Tensor)
template u_erfc*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_erfc", self).to(Tensor)
template u_erfc*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_erfc", self).to(Tensor)
template erfinv_u*(self: Tensor): Tensor = self.dynamicCppCall("erfinv_").to(Tensor)
template erfinv_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erfinv_", self).to(Tensor)
template erfinv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("erfinv_out", aresult, self).to(Tensor)
template erfinv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::erfinv_out", aresult, self).to(Tensor)
template erfinv*(self: Tensor): Tensor = self.dynamicCppCall("erfinv").to(Tensor)
template erfinv*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erfinv", self).to(Tensor)
template erfinv*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::erfinv", self).to(Tensor)
template u_sqrt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_sqrt_out", aresult, self).to(Tensor)
template u_sqrt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_sqrt_out", aresult, self).to(Tensor)
template u_sqrt*(self: Tensor): Tensor = self.dynamicCppCall("_sqrt").to(Tensor)
template u_sqrt*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sqrt", self).to(Tensor)
template u_sqrt*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sqrt", self).to(Tensor)
template u_rsqrt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_rsqrt_out", aresult, self).to(Tensor)
template u_rsqrt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_rsqrt_out", aresult, self).to(Tensor)
template u_rsqrt*(self: Tensor): Tensor = self.dynamicCppCall("_rsqrt").to(Tensor)
template u_rsqrt*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_rsqrt", self).to(Tensor)
template u_rsqrt*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_rsqrt", self).to(Tensor)
template u_ceil_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_ceil_out", aresult, self).to(Tensor)
template u_ceil_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_ceil_out", aresult, self).to(Tensor)
template u_ceil*(self: Tensor): Tensor = self.dynamicCppCall("_ceil").to(Tensor)
template u_ceil*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_ceil", self).to(Tensor)
template u_ceil*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_ceil", self).to(Tensor)
template u_floor_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_floor_out", aresult, self).to(Tensor)
template u_floor_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_floor_out", aresult, self).to(Tensor)
template u_floor*(self: Tensor): Tensor = self.dynamicCppCall("_floor").to(Tensor)
template u_floor*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_floor", self).to(Tensor)
template u_floor*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_floor", self).to(Tensor)
template u_round_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_round_out", aresult, self).to(Tensor)
template u_round_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_round_out", aresult, self).to(Tensor)
template u_round*(self: Tensor): Tensor = self.dynamicCppCall("_round").to(Tensor)
template u_round*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_round", self).to(Tensor)
template u_round*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_round", self).to(Tensor)
template u_trunc_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_trunc_out", aresult, self).to(Tensor)
template u_trunc_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_trunc_out", aresult, self).to(Tensor)
template u_trunc*(self: Tensor): Tensor = self.dynamicCppCall("_trunc").to(Tensor)
template u_trunc*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_trunc", self).to(Tensor)
template u_trunc*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_trunc", self).to(Tensor)
template frac_u*(self: Tensor): Tensor = self.dynamicCppCall("frac_").to(Tensor)
template frac_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("frac_", self).to(Tensor)
template frac_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("frac_out", aresult, self).to(Tensor)
template frac_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::frac_out", aresult, self).to(Tensor)
template frac*(self: Tensor): Tensor = self.dynamicCppCall("frac").to(Tensor)
template frac*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("frac", self).to(Tensor)
template frac*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::frac", self).to(Tensor)
template u_th_var_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template u_th_var_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::_th_var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template u_th_var*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_var", dim, unbiased, keepdim).to(Tensor)
template u_th_var*(ty: TensorType; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_var", self, dim, unbiased, keepdim).to(Tensor)
template u_th_var*(_: typedesc[torch]; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::_th_var", self, dim, unbiased, keepdim).to(Tensor)
template u_th_var*(self: Tensor, unbiased: bool = true): float = self.dynamicCppCall("_th_var", unbiased).to(float)
template u_th_var*(ty: TensorType; self: var Tensor, unbiased: bool = true): float = ty.dynamicCppCall("_th_var", self, unbiased).to(float)
template u_th_var*(_: typedesc[torch]; self: var Tensor, unbiased: bool = true): float = dynamicCCall("at::_th_var", self, unbiased).to(float)
template u_th_std_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template u_th_std_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::_th_std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template u_th_std*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_std", dim, unbiased, keepdim).to(Tensor)
template u_th_std*(ty: TensorType; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_std", self, dim, unbiased, keepdim).to(Tensor)
template u_th_std*(_: typedesc[torch]; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::_th_std", self, dim, unbiased, keepdim).to(Tensor)
template u_th_std*(self: Tensor, unbiased: bool = true): float = self.dynamicCppCall("_th_std", unbiased).to(float)
template u_th_std*(ty: TensorType; self: var Tensor, unbiased: bool = true): float = ty.dynamicCppCall("_th_std", self, unbiased).to(float)
template u_th_std*(_: typedesc[torch]; self: var Tensor, unbiased: bool = true): float = dynamicCCall("at::_th_std", self, unbiased).to(float)
template th_norm*(ty: TensorType; self: var Tensor, p: float = 2): float = ty.dynamicCppCall("th_norm", self, p).to(float)
template th_norm*(_: typedesc[torch]; self: var Tensor, p: float = 2): float = dynamicCCall("at::th_norm", self, p).to(float)
template u_th_norm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_norm_out", aresult, self, p, dim, keepdim).to(Tensor)
template u_th_norm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_norm_out", aresult, self, p, dim, keepdim).to(Tensor)
template u_th_norm*(self: Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_norm", p, dim, keepdim).to(Tensor)
template u_th_norm*(ty: TensorType; self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_norm", self, p, dim, keepdim).to(Tensor)
template u_th_norm*(_: typedesc[torch]; self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_norm", self, p, dim, keepdim).to(Tensor)
template renorm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, p: float, dim: int64, maxnorm: float): Tensor = ty.dynamicCppCall("renorm_out", aresult, self, p, dim, maxnorm).to(Tensor)
template renorm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, p: float, dim: int64, maxnorm: float): Tensor = dynamicCCall("at::renorm_out", aresult, self, p, dim, maxnorm).to(Tensor)
template renorm*(self: Tensor, p: float, dim: int64, maxnorm: float): Tensor = self.dynamicCppCall("renorm", p, dim, maxnorm).to(Tensor)
template renorm*(ty: TensorType; self: var Tensor, p: float, dim: int64, maxnorm: float): Tensor = ty.dynamicCppCall("renorm", self, p, dim, maxnorm).to(Tensor)
template renorm*(_: typedesc[torch]; self: var Tensor, p: float, dim: int64, maxnorm: float): Tensor = dynamicCCall("at::renorm", self, p, dim, maxnorm).to(Tensor)
template renorm_u*(self: Tensor, p: float, dim: int64, maxnorm: float): Tensor = self.dynamicCppCall("renorm_", p, dim, maxnorm).to(Tensor)
template renorm_u*(ty: TensorType; self: var Tensor, p: float, dim: int64, maxnorm: float): Tensor = ty.dynamicCppCall("renorm_", self, p, dim, maxnorm).to(Tensor)
template dist*(self: Tensor, other: var Tensor, p: float = 2): float = self.dynamicCppCall("dist", other, p).to(float)
template dist*(ty: TensorType; self: var Tensor, other: var Tensor, p: float = 2): float = ty.dynamicCppCall("dist", self, other, p).to(float)
template dist*(_: typedesc[torch]; self: var Tensor, other: var Tensor, p: float = 2): float = dynamicCCall("at::dist", self, other, p).to(float)
template reciprocal_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("reciprocal_out", aresult, self).to(Tensor)
template reciprocal_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::reciprocal_out", aresult, self).to(Tensor)
template reciprocal*(self: Tensor): Tensor = self.dynamicCppCall("reciprocal").to(Tensor)
template reciprocal*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("reciprocal", self).to(Tensor)
template reciprocal*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::reciprocal", self).to(Tensor)
template reciprocal_u*(self: Tensor): Tensor = self.dynamicCppCall("reciprocal_").to(Tensor)
template reciprocal_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("reciprocal_", self).to(Tensor)
template neg_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("neg_out", aresult, self).to(Tensor)
template neg_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::neg_out", aresult, self).to(Tensor)
template neg*(self: Tensor): Tensor = self.dynamicCppCall("neg").to(Tensor)
template neg*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("neg", self).to(Tensor)
template neg*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::neg", self).to(Tensor)
template neg_u*(self: Tensor): Tensor = self.dynamicCppCall("neg_").to(Tensor)
template neg_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("neg_", self).to(Tensor)
template atan2_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("atan2_out", aresult, self, other).to(Tensor)
template atan2_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::atan2_out", aresult, self, other).to(Tensor)
template atan2*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("atan2", other).to(Tensor)
template atan2*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("atan2", self, other).to(Tensor)
template atan2*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::atan2", self, other).to(Tensor)
template atan2_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("atan2_", other).to(Tensor)
template atan2_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("atan2_", self, other).to(Tensor)
template th_pow_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("th_pow_out", aresult, self, exponent).to(Tensor)
template th_pow_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = dynamicCCall("at::th_pow_out", aresult, self, exponent).to(Tensor)
template th_pow*(ty: TensorType; self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("th_pow", self, exponent).to(Tensor)
template th_pow*(_: typedesc[torch]; self: var Tensor, exponent: float): Tensor = dynamicCCall("at::th_pow", self, exponent).to(Tensor)
template pow_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, exponent: var Tensor): Tensor = ty.dynamicCppCall("pow_out", aresult, self, exponent).to(Tensor)
template pow_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, exponent: var Tensor): Tensor = dynamicCCall("at::pow_out", aresult, self, exponent).to(Tensor)
template pow*(self: Tensor, exponent: var Tensor): Tensor = self.dynamicCppCall("pow", exponent).to(Tensor)
template pow*(ty: TensorType; self: var Tensor, exponent: var Tensor): Tensor = ty.dynamicCppCall("pow", self, exponent).to(Tensor)
template pow*(_: typedesc[torch]; self: var Tensor, exponent: var Tensor): Tensor = dynamicCCall("at::pow", self, exponent).to(Tensor)
template pow_out*(ty: TensorType; aresult: var Tensor, base: float, self: var Tensor): Tensor = ty.dynamicCppCall("pow_out", aresult, base, self).to(Tensor)
template pow_out*(_: typedesc[torch]; aresult: var Tensor, base: float, self: var Tensor): Tensor = dynamicCCall("at::pow_out", aresult, base, self).to(Tensor)
template pow*(ty: TensorType; base: float, self: var Tensor): Tensor = ty.dynamicCppCall("pow", base, self).to(Tensor)
template pow*(_: typedesc[torch]; base: float, self: var Tensor): Tensor = dynamicCCall("at::pow", base, self).to(Tensor)
template pow_u*(self: Tensor, exponent: float): Tensor = self.dynamicCppCall("pow_", exponent).to(Tensor)
template pow_u*(ty: TensorType; self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("pow_", self, exponent).to(Tensor)
template pow_u*(self: Tensor, exponent: var Tensor): Tensor = self.dynamicCppCall("pow_", exponent).to(Tensor)
template pow_u*(ty: TensorType; self: var Tensor, exponent: var Tensor): Tensor = ty.dynamicCppCall("pow_", self, exponent).to(Tensor)
template lerp_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, aend: var Tensor, weight: float): Tensor = ty.dynamicCppCall("lerp_out", aresult, self, aend, weight).to(Tensor)
template lerp_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, aend: var Tensor, weight: float): Tensor = dynamicCCall("at::lerp_out", aresult, self, aend, weight).to(Tensor)
template lerp*(self: Tensor, aend: var Tensor, weight: float): Tensor = self.dynamicCppCall("lerp", aend, weight).to(Tensor)
template lerp*(ty: TensorType; self: var Tensor, aend: var Tensor, weight: float): Tensor = ty.dynamicCppCall("lerp", self, aend, weight).to(Tensor)
template lerp*(_: typedesc[torch]; self: var Tensor, aend: var Tensor, weight: float): Tensor = dynamicCCall("at::lerp", self, aend, weight).to(Tensor)
template lerp_u*(self: Tensor, aend: var Tensor, weight: float): Tensor = self.dynamicCppCall("lerp_", aend, weight).to(Tensor)
template lerp_u*(ty: TensorType; self: var Tensor, aend: var Tensor, weight: float): Tensor = ty.dynamicCppCall("lerp_", self, aend, weight).to(Tensor)
template u_linspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, steps: int64 = 100): Tensor = ty.dynamicCppCall("_linspace_out", aresult, start, aend, steps).to(Tensor)
template u_linspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, steps: int64 = 100): Tensor = dynamicCCall("at::_linspace_out", aresult, start, aend, steps).to(Tensor)
template u_linspace*(ty: TensorType; start: float, aend: float, steps: int64 = 100): Tensor = ty.dynamicCppCall("_linspace", start, aend, steps).to(Tensor)
template u_logspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, steps: int64 = 100): Tensor = ty.dynamicCppCall("_logspace_out", aresult, start, aend, steps).to(Tensor)
template u_logspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, steps: int64 = 100): Tensor = dynamicCCall("at::_logspace_out", aresult, start, aend, steps).to(Tensor)
template u_logspace*(ty: TensorType; start: float, aend: float, steps: int64 = 100): Tensor = ty.dynamicCppCall("_logspace", start, aend, steps).to(Tensor)
template histc_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor = ty.dynamicCppCall("histc_out", aresult, self, bins, min, max).to(Tensor)
template histc_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor = dynamicCCall("at::histc_out", aresult, self, bins, min, max).to(Tensor)
template histc*(self: Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor = self.dynamicCppCall("histc", bins, min, max).to(Tensor)
template histc*(ty: TensorType; self: var Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor = ty.dynamicCppCall("histc", self, bins, min, max).to(Tensor)
template histc*(_: typedesc[torch]; self: var Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor = dynamicCCall("at::histc", self, bins, min, max).to(Tensor)
template th_zero_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("th_zero_", self).to(Tensor)
template th_zero_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::th_zero_", self).to(Tensor)
template u_sumall*(self: Tensor): float = self.dynamicCppCall("_sumall").to(float)
template u_sumall*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("_sumall", self).to(float)
template u_sumall*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::_sumall", self).to(float)
template u_th_sum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_sum_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_sum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_sum_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_sum*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_sum", dim, keepdim).to(Tensor)
template u_th_sum*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_sum", self, dim, keepdim).to(Tensor)
template u_th_sum*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_sum", self, dim, keepdim).to(Tensor)
template u_prodall*(self: Tensor): float = self.dynamicCppCall("_prodall").to(float)
template u_prodall*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("_prodall", self).to(float)
template u_prodall*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::_prodall", self).to(float)
template u_th_prod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_prod_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_prod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_prod_out", aresult, self, dim, keepdim).to(Tensor)
template u_th_prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_th_prod", dim, keepdim).to(Tensor)
template u_th_prod*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_th_prod", self, dim, keepdim).to(Tensor)
template u_th_prod*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_th_prod", self, dim, keepdim).to(Tensor)
template u_cumsum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("_cumsum_out", aresult, self, dim).to(Tensor)
template u_cumsum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::_cumsum_out", aresult, self, dim).to(Tensor)
template u_cumsum*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("_cumsum", dim).to(Tensor)
template u_cumsum*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("_cumsum", self, dim).to(Tensor)
template u_cumsum*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::_cumsum", self, dim).to(Tensor)
template u_cumprod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("_cumprod_out", aresult, self, dim).to(Tensor)
template u_cumprod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::_cumprod_out", aresult, self, dim).to(Tensor)
template u_cumprod*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("_cumprod", dim).to(Tensor)
template u_cumprod*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("_cumprod", self, dim).to(Tensor)
template u_cumprod*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::_cumprod", self, dim).to(Tensor)
template sign_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("sign_out", aresult, self).to(Tensor)
template sign_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::sign_out", aresult, self).to(Tensor)
template sign*(self: Tensor): Tensor = self.dynamicCppCall("sign").to(Tensor)
template sign*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sign", self).to(Tensor)
template sign*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sign", self).to(Tensor)
template sign_u*(self: Tensor): Tensor = self.dynamicCppCall("sign_").to(Tensor)
template sign_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sign_", self).to(Tensor)
template trace*(self: Tensor): float = self.dynamicCppCall("trace").to(float)
template trace*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("trace", self).to(float)
template trace*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::trace", self).to(float)
template fmod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("fmod_out", aresult, self, other).to(Tensor)
template fmod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::fmod_out", aresult, self, other).to(Tensor)
template fmod*(self: Tensor, other: float): Tensor = self.dynamicCppCall("fmod", other).to(Tensor)
template fmod*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("fmod", self, other).to(Tensor)
template fmod*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::fmod", self, other).to(Tensor)
template fmod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("fmod_out", aresult, self, other).to(Tensor)
template fmod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::fmod_out", aresult, self, other).to(Tensor)
template fmod*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("fmod", other).to(Tensor)
template fmod*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("fmod", self, other).to(Tensor)
template fmod*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::fmod", self, other).to(Tensor)
template fmod_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("fmod_", other).to(Tensor)
template fmod_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("fmod_", self, other).to(Tensor)
template fmod_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("fmod_", other).to(Tensor)
template fmod_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("fmod_", self, other).to(Tensor)
template remainder_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("remainder_out", aresult, self, other).to(Tensor)
template remainder_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::remainder_out", aresult, self, other).to(Tensor)
template remainder*(self: Tensor, other: float): Tensor = self.dynamicCppCall("remainder", other).to(Tensor)
template remainder*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("remainder", self, other).to(Tensor)
template remainder*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::remainder", self, other).to(Tensor)
template remainder_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("remainder_out", aresult, self, other).to(Tensor)
template remainder_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::remainder_out", aresult, self, other).to(Tensor)
template remainder*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("remainder", other).to(Tensor)
template remainder*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("remainder", self, other).to(Tensor)
template remainder*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::remainder", self, other).to(Tensor)
template remainder_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("remainder_", other).to(Tensor)
template remainder_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("remainder_", self, other).to(Tensor)
template remainder_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("remainder_", other).to(Tensor)
template remainder_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("remainder_", self, other).to(Tensor)
template u_th_clamp_u*(self: Tensor, min: float, max: float): Tensor = self.dynamicCppCall("_th_clamp_", min, max).to(Tensor)
template u_th_clamp_u*(ty: TensorType; self: var Tensor, min: float, max: float): Tensor = ty.dynamicCppCall("_th_clamp_", self, min, max).to(Tensor)
template u_th_clamp_u*(_: typedesc[torch]; self: var Tensor, min: float, max: float): Tensor = dynamicCCall("at::_th_clamp_", self, min, max).to(Tensor)
template u_th_clamp_min_u*(self: Tensor, min: float): Tensor = self.dynamicCppCall("_th_clamp_min_", min).to(Tensor)
template u_th_clamp_min_u*(ty: TensorType; self: var Tensor, min: float): Tensor = ty.dynamicCppCall("_th_clamp_min_", self, min).to(Tensor)
template u_th_clamp_min_u*(_: typedesc[torch]; self: var Tensor, min: float): Tensor = dynamicCCall("at::_th_clamp_min_", self, min).to(Tensor)
template u_th_clamp_max_u*(self: Tensor, max: float): Tensor = self.dynamicCppCall("_th_clamp_max_", max).to(Tensor)
template u_th_clamp_max_u*(ty: TensorType; self: var Tensor, max: float): Tensor = ty.dynamicCppCall("_th_clamp_max_", self, max).to(Tensor)
template u_th_clamp_max_u*(_: typedesc[torch]; self: var Tensor, max: float): Tensor = dynamicCCall("at::_th_clamp_max_", self, max).to(Tensor)
template u_dot*(self: Tensor, tensor: var Tensor): float = self.dynamicCppCall("_dot", tensor).to(float)
template u_dot*(ty: TensorType; self: var Tensor, tensor: var Tensor): float = ty.dynamicCppCall("_dot", self, tensor).to(float)
template u_dot*(_: typedesc[torch]; self: var Tensor, tensor: var Tensor): float = dynamicCCall("at::_dot", self, tensor).to(float)
template tril_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("tril_out", aresult, self, diagonal).to(Tensor)
template tril_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::tril_out", aresult, self, diagonal).to(Tensor)
template tril*(self: Tensor, diagonal: int64 = 0): Tensor = self.dynamicCppCall("tril", diagonal).to(Tensor)
template tril*(ty: TensorType; self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("tril", self, diagonal).to(Tensor)
template tril*(_: typedesc[torch]; self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::tril", self, diagonal).to(Tensor)
template tril_u*(self: Tensor, diagonal: int64 = 0): Tensor = self.dynamicCppCall("tril_", diagonal).to(Tensor)
template tril_u*(ty: TensorType; self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("tril_", self, diagonal).to(Tensor)
template triu_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("triu_out", aresult, self, diagonal).to(Tensor)
template triu_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::triu_out", aresult, self, diagonal).to(Tensor)
template triu*(self: Tensor, diagonal: int64 = 0): Tensor = self.dynamicCppCall("triu", diagonal).to(Tensor)
template triu*(ty: TensorType; self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("triu", self, diagonal).to(Tensor)
template triu*(_: typedesc[torch]; self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::triu", self, diagonal).to(Tensor)
template triu_u*(self: Tensor, diagonal: int64 = 0): Tensor = self.dynamicCppCall("triu_", diagonal).to(Tensor)
template triu_u*(ty: TensorType; self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("triu_", self, diagonal).to(Tensor)
template cross_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor, dim: int64 = -1): Tensor = ty.dynamicCppCall("cross_out", aresult, self, other, dim).to(Tensor)
template cross_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor, dim: int64 = -1): Tensor = dynamicCCall("at::cross_out", aresult, self, other, dim).to(Tensor)
template cross*(self: Tensor, other: var Tensor, dim: int64 = -1): Tensor = self.dynamicCppCall("cross", other, dim).to(Tensor)
template cross*(ty: TensorType; self: var Tensor, other: var Tensor, dim: int64 = -1): Tensor = ty.dynamicCppCall("cross", self, other, dim).to(Tensor)
template cross*(_: typedesc[torch]; self: var Tensor, other: var Tensor, dim: int64 = -1): Tensor = dynamicCCall("at::cross", self, other, dim).to(Tensor)
template diag_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("diag_out", aresult, self, diagonal).to(Tensor)
template diag_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::diag_out", aresult, self, diagonal).to(Tensor)
template diag*(self: Tensor, diagonal: int64 = 0): Tensor = self.dynamicCppCall("diag", diagonal).to(Tensor)
template diag*(ty: TensorType; self: var Tensor, diagonal: int64 = 0): Tensor = ty.dynamicCppCall("diag", self, diagonal).to(Tensor)
template diag*(_: typedesc[torch]; self: var Tensor, diagonal: int64 = 0): Tensor = dynamicCCall("at::diag", self, diagonal).to(Tensor)
template th_addmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("th_addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template th_addmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::th_addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template th_addmm*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("th_addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template th_addmm*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::th_addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template th_addmm_u*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("th_addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
template th_addmm_u*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::th_addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
template u_addmv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addmv_out", aresult, self, mat, vec, beta, alpha).to(Tensor)
template u_addmv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::_addmv_out", aresult, self, mat, vec, beta, alpha).to(Tensor)
template u_addmv*(self: Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("_addmv", mat, vec, beta, alpha).to(Tensor)
template u_addmv*(ty: TensorType; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addmv", self, mat, vec, beta, alpha).to(Tensor)
template u_addmv*(_: typedesc[torch]; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::_addmv", self, mat, vec, beta, alpha).to(Tensor)
template u_addmv_u*(self: Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("_addmv_", mat, vec, beta, alpha).to(Tensor)
template u_addmv_u*(ty: TensorType; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addmv_", self, mat, vec, beta, alpha).to(Tensor)
template u_addr_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addr_out", aresult, self, vec1, vec2, beta, alpha).to(Tensor)
template u_addr_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::_addr_out", aresult, self, vec1, vec2, beta, alpha).to(Tensor)
template u_addr*(self: Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("_addr", vec1, vec2, beta, alpha).to(Tensor)
template u_addr*(ty: TensorType; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addr", self, vec1, vec2, beta, alpha).to(Tensor)
template u_addr*(_: typedesc[torch]; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::_addr", self, vec1, vec2, beta, alpha).to(Tensor)
template u_addr_u*(self: Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("_addr_", vec1, vec2, beta, alpha).to(Tensor)
template u_addr_u*(ty: TensorType; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("_addr_", self, vec1, vec2, beta, alpha).to(Tensor)
template u_ger_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec2: var Tensor): Tensor = ty.dynamicCppCall("_ger_out", aresult, self, vec2).to(Tensor)
template u_ger_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec2: var Tensor): Tensor = dynamicCCall("at::_ger_out", aresult, self, vec2).to(Tensor)
template u_ger*(self: Tensor, vec2: var Tensor): Tensor = self.dynamicCppCall("_ger", vec2).to(Tensor)
template u_ger*(ty: TensorType; self: var Tensor, vec2: var Tensor): Tensor = ty.dynamicCppCall("_ger", self, vec2).to(Tensor)
template u_ger*(_: typedesc[torch]; self: var Tensor, vec2: var Tensor): Tensor = dynamicCCall("at::_ger", self, vec2).to(Tensor)
template u_mv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec: var Tensor): Tensor = ty.dynamicCppCall("_mv_out", aresult, self, vec).to(Tensor)
template u_mv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec: var Tensor): Tensor = dynamicCCall("at::_mv_out", aresult, self, vec).to(Tensor)
template u_mv*(self: Tensor, vec: var Tensor): Tensor = self.dynamicCppCall("_mv", vec).to(Tensor)
template u_mv*(ty: TensorType; self: var Tensor, vec: var Tensor): Tensor = ty.dynamicCppCall("_mv", self, vec).to(Tensor)
template u_mv*(_: typedesc[torch]; self: var Tensor, vec: var Tensor): Tensor = dynamicCCall("at::_mv", self, vec).to(Tensor)
template u_mm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("_mm_out", aresult, self, mat2).to(Tensor)
template u_mm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::_mm_out", aresult, self, mat2).to(Tensor)
template u_mm*(self: Tensor, mat2: var Tensor): Tensor = self.dynamicCppCall("_mm", mat2).to(Tensor)
template u_mm*(ty: TensorType; self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("_mm", self, mat2).to(Tensor)
template u_mm*(_: typedesc[torch]; self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::_mm", self, mat2).to(Tensor)
template bmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("bmm_out", aresult, self, mat2).to(Tensor)
template bmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::bmm_out", aresult, self, mat2).to(Tensor)
template bmm*(self: Tensor, mat2: var Tensor): Tensor = self.dynamicCppCall("bmm", mat2).to(Tensor)
template bmm*(ty: TensorType; self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("bmm", self, mat2).to(Tensor)
template bmm*(_: typedesc[torch]; self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::bmm", self, mat2).to(Tensor)
template addbmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
template addbmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
template addbmm*(self: Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addbmm", batch1, batch2, beta, alpha).to(Tensor)
template addbmm*(ty: TensorType; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addbmm", self, batch1, batch2, beta, alpha).to(Tensor)
template addbmm*(_: typedesc[torch]; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addbmm", self, batch1, batch2, beta, alpha).to(Tensor)
template addbmm_u*(self: Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addbmm_", batch1, batch2, beta, alpha).to(Tensor)
template addbmm_u*(ty: TensorType; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addbmm_", self, batch1, batch2, beta, alpha).to(Tensor)
template baddbmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("baddbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
template baddbmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::baddbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
template baddbmm*(self: Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("baddbmm", batch1, batch2, beta, alpha).to(Tensor)
template baddbmm*(ty: TensorType; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("baddbmm", self, batch1, batch2, beta, alpha).to(Tensor)
template baddbmm*(_: typedesc[torch]; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::baddbmm", self, batch1, batch2, beta, alpha).to(Tensor)
template baddbmm_u*(self: Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("baddbmm_", batch1, batch2, beta, alpha).to(Tensor)
template baddbmm_u*(ty: TensorType; self: var Tensor, batch1: var Tensor, batch2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("baddbmm_", self, batch1, batch2, beta, alpha).to(Tensor)
template addcmul_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcmul_out", aresult, self, tensor1, tensor2, value).to(Tensor)
template addcmul_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = dynamicCCall("at::addcmul_out", aresult, self, tensor1, tensor2, value).to(Tensor)
template addcmul*(self: Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = self.dynamicCppCall("addcmul", tensor1, tensor2, value).to(Tensor)
template addcmul*(ty: TensorType; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcmul", self, tensor1, tensor2, value).to(Tensor)
template addcmul*(_: typedesc[torch]; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = dynamicCCall("at::addcmul", self, tensor1, tensor2, value).to(Tensor)
template addcmul_u*(self: Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = self.dynamicCppCall("addcmul_", tensor1, tensor2, value).to(Tensor)
template addcmul_u*(ty: TensorType; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcmul_", self, tensor1, tensor2, value).to(Tensor)
template addcdiv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcdiv_out", aresult, self, tensor1, tensor2, value).to(Tensor)
template addcdiv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = dynamicCCall("at::addcdiv_out", aresult, self, tensor1, tensor2, value).to(Tensor)
template addcdiv*(self: Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = self.dynamicCppCall("addcdiv", tensor1, tensor2, value).to(Tensor)
template addcdiv*(ty: TensorType; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcdiv", self, tensor1, tensor2, value).to(Tensor)
template addcdiv*(_: typedesc[torch]; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = dynamicCCall("at::addcdiv", self, tensor1, tensor2, value).to(Tensor)
template addcdiv_u*(self: Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = self.dynamicCppCall("addcdiv_", tensor1, tensor2, value).to(Tensor)
template addcdiv_u*(ty: TensorType; self: var Tensor, tensor1: var Tensor, tensor2: var Tensor, value: float = 1): Tensor = ty.dynamicCppCall("addcdiv_", self, tensor1, tensor2, value).to(Tensor)
template u_gesv_single_out*(ty: TensorType; solution: var Tensor, lu: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("_gesv_single_out", solution, lu, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_single_out*(_: typedesc[torch]; solution: var Tensor, lu: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::_gesv_single_out", solution, lu, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_single*(self: Tensor, A: var Tensor): (Tensor, Tensor) = self.dynamicCppCall("_gesv_single", A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_single*(ty: TensorType; self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("_gesv_single", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_single*(_: typedesc[torch]; self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::_gesv_single", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gels_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("gels_out", res1, res2, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gels_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::gels_out", res1, res2, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gels*(self: Tensor, A: var Tensor): (Tensor, Tensor) = self.dynamicCppCall("gels", A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gels*(ty: TensorType; self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("gels", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gels*(_: typedesc[torch]; self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::gels", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template trtrs_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor, A: var Tensor, upper: bool = true, transpose: bool = false, unitriangular: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("trtrs_out", res1, res2, self, A, upper, transpose, unitriangular).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template trtrs_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor, A: var Tensor, upper: bool = true, transpose: bool = false, unitriangular: bool = false): (Tensor, Tensor) = dynamicCCall("at::trtrs_out", res1, res2, self, A, upper, transpose, unitriangular).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template trtrs*(self: Tensor, A: var Tensor, upper: bool = true, transpose: bool = false, unitriangular: bool = false): (Tensor, Tensor) = self.dynamicCppCall("trtrs", A, upper, transpose, unitriangular).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template trtrs*(ty: TensorType; self: var Tensor, A: var Tensor, upper: bool = true, transpose: bool = false, unitriangular: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("trtrs", self, A, upper, transpose, unitriangular).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template trtrs*(_: typedesc[torch]; self: var Tensor, A: var Tensor, upper: bool = true, transpose: bool = false, unitriangular: bool = false): (Tensor, Tensor) = dynamicCCall("at::trtrs", self, A, upper, transpose, unitriangular).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template symeig_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor, eigenvectors: bool = false, upper: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("symeig_out", res1, res2, self, eigenvectors, upper).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template symeig_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor, eigenvectors: bool = false, upper: bool = true): (Tensor, Tensor) = dynamicCCall("at::symeig_out", res1, res2, self, eigenvectors, upper).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template symeig*(self: Tensor, eigenvectors: bool = false, upper: bool = true): (Tensor, Tensor) = self.dynamicCppCall("symeig", eigenvectors, upper).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template symeig*(ty: TensorType; self: var Tensor, eigenvectors: bool = false, upper: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("symeig", self, eigenvectors, upper).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template symeig*(_: typedesc[torch]; self: var Tensor, eigenvectors: bool = false, upper: bool = true): (Tensor, Tensor) = dynamicCCall("at::symeig", self, eigenvectors, upper).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template eig_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor, eigenvectors: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("eig_out", res1, res2, self, eigenvectors).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template eig_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor, eigenvectors: bool = false): (Tensor, Tensor) = dynamicCCall("at::eig_out", res1, res2, self, eigenvectors).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template eig*(self: Tensor, eigenvectors: bool = false): (Tensor, Tensor) = self.dynamicCppCall("eig", eigenvectors).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template eig*(ty: TensorType; self: var Tensor, eigenvectors: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("eig", self, eigenvectors).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template eig*(_: typedesc[torch]; self: var Tensor, eigenvectors: bool = false): (Tensor, Tensor) = dynamicCCall("at::eig", self, eigenvectors).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template svd_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, res3: var Tensor, self: var Tensor, some: bool = true): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("svd_out", res1, res2, res3, self, some).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template svd_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, res3: var Tensor, self: var Tensor, some: bool = true): (Tensor, Tensor, Tensor) = dynamicCCall("at::svd_out", res1, res2, res3, self, some).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template svd*(self: Tensor, some: bool = true): (Tensor, Tensor, Tensor) = self.dynamicCppCall("svd", some).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template svd*(ty: TensorType; self: var Tensor, some: bool = true): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("svd", self, some).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template svd*(_: typedesc[torch]; self: var Tensor, some: bool = true): (Tensor, Tensor, Tensor) = dynamicCCall("at::svd", self, some).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template u_getri_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_getri_out", output, self).to(Tensor)
template u_getri_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_getri_out", output, self).to(Tensor)
template u_getri*(self: Tensor): Tensor = self.dynamicCppCall("_getri").to(Tensor)
template u_getri*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_getri", self).to(Tensor)
template u_getri*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_getri", self).to(Tensor)
template potrf_out*(ty: TensorType; output: var Tensor, self: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potrf_out", output, self, upper).to(Tensor)
template potrf_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potrf_out", output, self, upper).to(Tensor)
template potrf*(self: Tensor, upper: bool = true): Tensor = self.dynamicCppCall("potrf", upper).to(Tensor)
template potrf*(ty: TensorType; self: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potrf", self, upper).to(Tensor)
template potrf*(_: typedesc[torch]; self: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potrf", self, upper).to(Tensor)
template potrs_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, input2: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potrs_out", aresult, self, input2, upper).to(Tensor)
template potrs_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, input2: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potrs_out", aresult, self, input2, upper).to(Tensor)
template potrs*(self: Tensor, input2: var Tensor, upper: bool = true): Tensor = self.dynamicCppCall("potrs", input2, upper).to(Tensor)
template potrs*(ty: TensorType; self: var Tensor, input2: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potrs", self, input2, upper).to(Tensor)
template potrs*(_: typedesc[torch]; self: var Tensor, input2: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potrs", self, input2, upper).to(Tensor)
template potri_out*(ty: TensorType; output: var Tensor, self: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potri_out", output, self, upper).to(Tensor)
template potri_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potri_out", output, self, upper).to(Tensor)
template potri*(self: Tensor, upper: bool = true): Tensor = self.dynamicCppCall("potri", upper).to(Tensor)
template potri*(ty: TensorType; self: var Tensor, upper: bool = true): Tensor = ty.dynamicCppCall("potri", self, upper).to(Tensor)
template potri*(_: typedesc[torch]; self: var Tensor, upper: bool = true): Tensor = dynamicCCall("at::potri", self, upper).to(Tensor)
template pstrf_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor, upper: bool = true, tol: float = -1): (Tensor, Tensor) = ty.dynamicCppCall("pstrf_out", res1, res2, self, upper, tol).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template pstrf_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor, upper: bool = true, tol: float = -1): (Tensor, Tensor) = dynamicCCall("at::pstrf_out", res1, res2, self, upper, tol).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template pstrf*(self: Tensor, upper: bool = true, tol: float = -1): (Tensor, Tensor) = self.dynamicCppCall("pstrf", upper, tol).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template pstrf*(ty: TensorType; self: var Tensor, upper: bool = true, tol: float = -1): (Tensor, Tensor) = ty.dynamicCppCall("pstrf", self, upper, tol).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template pstrf*(_: typedesc[torch]; self: var Tensor, upper: bool = true, tol: float = -1): (Tensor, Tensor) = dynamicCCall("at::pstrf", self, upper, tol).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template qr_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("qr_out", res1, res2, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template qr_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::qr_out", res1, res2, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template qr*(self: Tensor): (Tensor, Tensor) = self.dynamicCppCall("qr").to(StdTuple2[Tensor, Tensor]).toNimTuple()
template qr*(ty: TensorType; self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("qr", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template qr*(_: typedesc[torch]; self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::qr", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template geqrf_out*(ty: TensorType; res1: var Tensor, res2: var Tensor, self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("geqrf_out", res1, res2, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template geqrf_out*(_: typedesc[torch]; res1: var Tensor, res2: var Tensor, self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::geqrf_out", res1, res2, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template geqrf*(self: Tensor): (Tensor, Tensor) = self.dynamicCppCall("geqrf").to(StdTuple2[Tensor, Tensor]).toNimTuple()
template geqrf*(ty: TensorType; self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("geqrf", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template geqrf*(_: typedesc[torch]; self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::geqrf", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template orgqr_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, input2: var Tensor): Tensor = ty.dynamicCppCall("orgqr_out", aresult, self, input2).to(Tensor)
template orgqr_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, input2: var Tensor): Tensor = dynamicCCall("at::orgqr_out", aresult, self, input2).to(Tensor)
template orgqr*(self: Tensor, input2: var Tensor): Tensor = self.dynamicCppCall("orgqr", input2).to(Tensor)
template orgqr*(ty: TensorType; self: var Tensor, input2: var Tensor): Tensor = ty.dynamicCppCall("orgqr", self, input2).to(Tensor)
template orgqr*(_: typedesc[torch]; self: var Tensor, input2: var Tensor): Tensor = dynamicCCall("at::orgqr", self, input2).to(Tensor)
template ormqr_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, input2: var Tensor, input3: var Tensor, left: bool = true, transpose: bool = false): Tensor = ty.dynamicCppCall("ormqr_out", aresult, self, input2, input3, left, transpose).to(Tensor)
template ormqr_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, input2: var Tensor, input3: var Tensor, left: bool = true, transpose: bool = false): Tensor = dynamicCCall("at::ormqr_out", aresult, self, input2, input3, left, transpose).to(Tensor)
template ormqr*(self: Tensor, input2: var Tensor, input3: var Tensor, left: bool = true, transpose: bool = false): Tensor = self.dynamicCppCall("ormqr", input2, input3, left, transpose).to(Tensor)
template ormqr*(ty: TensorType; self: var Tensor, input2: var Tensor, input3: var Tensor, left: bool = true, transpose: bool = false): Tensor = ty.dynamicCppCall("ormqr", self, input2, input3, left, transpose).to(Tensor)
template ormqr*(_: typedesc[torch]; self: var Tensor, input2: var Tensor, input3: var Tensor, left: bool = true, transpose: bool = false): Tensor = dynamicCCall("at::ormqr", self, input2, input3, left, transpose).to(Tensor)
template btrifact_out*(ty: TensorType; aresult: var Tensor, pivots: var Tensor, self: var Tensor, pivot: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("btrifact_out", aresult, pivots, self, pivot).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template btrifact_out*(_: typedesc[torch]; aresult: var Tensor, pivots: var Tensor, self: var Tensor, pivot: bool = true): (Tensor, Tensor) = dynamicCCall("at::btrifact_out", aresult, pivots, self, pivot).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template btrifact*(self: Tensor, pivot: bool = true): (Tensor, Tensor) = self.dynamicCppCall("btrifact", pivot).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template btrifact*(ty: TensorType; self: var Tensor, pivot: bool = true): (Tensor, Tensor) = ty.dynamicCppCall("btrifact", self, pivot).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template btrifact*(_: typedesc[torch]; self: var Tensor, pivot: bool = true): (Tensor, Tensor) = dynamicCCall("at::btrifact", self, pivot).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template btrifact_with_info_out*(ty: TensorType; aresult: var Tensor, pivots: var Tensor, info: var Tensor, self: var Tensor, pivot: bool = true): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("btrifact_with_info_out", aresult, pivots, info, self, pivot).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template btrifact_with_info_out*(_: typedesc[torch]; aresult: var Tensor, pivots: var Tensor, info: var Tensor, self: var Tensor, pivot: bool = true): (Tensor, Tensor, Tensor) = dynamicCCall("at::btrifact_with_info_out", aresult, pivots, info, self, pivot).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template btrifact_with_info*(self: Tensor, pivot: bool = true): (Tensor, Tensor, Tensor) = self.dynamicCppCall("btrifact_with_info", pivot).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template btrifact_with_info*(ty: TensorType; self: var Tensor, pivot: bool = true): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("btrifact_with_info", self, pivot).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template btrifact_with_info*(_: typedesc[torch]; self: var Tensor, pivot: bool = true): (Tensor, Tensor, Tensor) = dynamicCCall("at::btrifact_with_info", self, pivot).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template btrisolve_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, LU_data: var Tensor, LU_pivots: var Tensor): Tensor = ty.dynamicCppCall("btrisolve_out", aresult, self, LU_data, LU_pivots).to(Tensor)
template btrisolve_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, LU_data: var Tensor, LU_pivots: var Tensor): Tensor = dynamicCCall("at::btrisolve_out", aresult, self, LU_data, LU_pivots).to(Tensor)
template btrisolve*(self: Tensor, LU_data: var Tensor, LU_pivots: var Tensor): Tensor = self.dynamicCppCall("btrisolve", LU_data, LU_pivots).to(Tensor)
template btrisolve*(ty: TensorType; self: var Tensor, LU_data: var Tensor, LU_pivots: var Tensor): Tensor = ty.dynamicCppCall("btrisolve", self, LU_data, LU_pivots).to(Tensor)
template btrisolve*(_: typedesc[torch]; self: var Tensor, LU_data: var Tensor, LU_pivots: var Tensor): Tensor = dynamicCCall("at::btrisolve", self, LU_data, LU_pivots).to(Tensor)
template random_u*(self: Tensor, afrom: int64, ato: int64, generator: pointer = nil): Tensor = self.dynamicCppCall("random_", afrom, ato, generator).to(Tensor)
template random_u*(ty: TensorType; self: var Tensor, afrom: int64, ato: int64, generator: pointer = nil): Tensor = ty.dynamicCppCall("random_", self, afrom, ato, generator).to(Tensor)
template random_u*(self: Tensor, ato: int64, generator: pointer = nil): Tensor = self.dynamicCppCall("random_", ato, generator).to(Tensor)
template random_u*(ty: TensorType; self: var Tensor, ato: int64, generator: pointer = nil): Tensor = ty.dynamicCppCall("random_", self, ato, generator).to(Tensor)
template random_u*(self: Tensor, generator: pointer = nil): Tensor = self.dynamicCppCall("random_", generator).to(Tensor)
template random_u*(ty: TensorType; self: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("random_", self, generator).to(Tensor)
template multinomial_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, num_samples: int64, replacement: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("multinomial_out", aresult, self, num_samples, replacement, generator).to(Tensor)
template multinomial_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, num_samples: int64, replacement: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::multinomial_out", aresult, self, num_samples, replacement, generator).to(Tensor)
template multinomial*(self: Tensor, num_samples: int64, replacement: bool = false, generator: pointer = nil): Tensor = self.dynamicCppCall("multinomial", num_samples, replacement, generator).to(Tensor)
template multinomial*(ty: TensorType; self: var Tensor, num_samples: int64, replacement: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("multinomial", self, num_samples, replacement, generator).to(Tensor)
template multinomial*(_: typedesc[torch]; self: var Tensor, num_samples: int64, replacement: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::multinomial", self, num_samples, replacement, generator).to(Tensor)
template uniform_u*(self: Tensor, afrom: float64 = 0, ato: float64 = 1, generator: pointer = nil): Tensor = self.dynamicCppCall("uniform_", afrom, ato, generator).to(Tensor)
template uniform_u*(ty: TensorType; self: var Tensor, afrom: float64 = 0, ato: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("uniform_", self, afrom, ato, generator).to(Tensor)
template normal_out*(ty: TensorType; output: var Tensor, mean: var Tensor, std: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal_out", output, mean, std, generator).to(Tensor)
template normal_out*(_: typedesc[torch]; output: var Tensor, mean: var Tensor, std: float64 = 1, generator: pointer = nil): Tensor = dynamicCCall("at::normal_out", output, mean, std, generator).to(Tensor)
template normal*(ty: TensorType; mean: var Tensor, std: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal", mean, std, generator).to(Tensor)
template normal*(_: typedesc[torch]; mean: var Tensor, std: float64 = 1, generator: pointer = nil): Tensor = dynamicCCall("at::normal", mean, std, generator).to(Tensor)
template normal_out*(ty: TensorType; output: var Tensor, mean: float64, std: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal_out", output, mean, std, generator).to(Tensor)
template normal_out*(_: typedesc[torch]; output: var Tensor, mean: float64, std: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::normal_out", output, mean, std, generator).to(Tensor)
template normal*(ty: TensorType; mean: float64, std: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal", mean, std, generator).to(Tensor)
template normal*(_: typedesc[torch]; mean: float64, std: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::normal", mean, std, generator).to(Tensor)
template normal_out*(ty: TensorType; output: var Tensor, mean: var Tensor, std: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal_out", output, mean, std, generator).to(Tensor)
template normal_out*(_: typedesc[torch]; output: var Tensor, mean: var Tensor, std: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::normal_out", output, mean, std, generator).to(Tensor)
template normal*(ty: TensorType; mean: var Tensor, std: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal", mean, std, generator).to(Tensor)
template normal*(_: typedesc[torch]; mean: var Tensor, std: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::normal", mean, std, generator).to(Tensor)
template normal_u*(self: Tensor, mean: float64 = 0, std: float64 = 1, generator: pointer = nil): Tensor = self.dynamicCppCall("normal_", mean, std, generator).to(Tensor)
template normal_u*(ty: TensorType; self: var Tensor, mean: float64 = 0, std: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("normal_", self, mean, std, generator).to(Tensor)
template cauchy_u*(self: Tensor, median: float64 = 0, sigma: float64 = 1, generator: pointer = nil): Tensor = self.dynamicCppCall("cauchy_", median, sigma, generator).to(Tensor)
template cauchy_u*(ty: TensorType; self: var Tensor, median: float64 = 0, sigma: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("cauchy_", self, median, sigma, generator).to(Tensor)
template log_normal_u*(self: Tensor, mean: float64 = 1, std: float64 = 2, generator: pointer = nil): Tensor = self.dynamicCppCall("log_normal_", mean, std, generator).to(Tensor)
template log_normal_u*(ty: TensorType; self: var Tensor, mean: float64 = 1, std: float64 = 2, generator: pointer = nil): Tensor = ty.dynamicCppCall("log_normal_", self, mean, std, generator).to(Tensor)
template exponential_u*(self: Tensor, lambd: float64 = 1, generator: pointer = nil): Tensor = self.dynamicCppCall("exponential_", lambd, generator).to(Tensor)
template exponential_u*(ty: TensorType; self: var Tensor, lambd: float64 = 1, generator: pointer = nil): Tensor = ty.dynamicCppCall("exponential_", self, lambd, generator).to(Tensor)
template geometric_u*(self: Tensor, p: float64, generator: pointer = nil): Tensor = self.dynamicCppCall("geometric_", p, generator).to(Tensor)
template geometric_u*(ty: TensorType; self: var Tensor, p: float64, generator: pointer = nil): Tensor = ty.dynamicCppCall("geometric_", self, p, generator).to(Tensor)
template u_bernoulli_u*(self: Tensor, p: float64, generator: pointer = nil): Tensor = self.dynamicCppCall("_bernoulli_", p, generator).to(Tensor)
template u_bernoulli_u*(ty: TensorType; self: var Tensor, p: float64, generator: pointer = nil): Tensor = ty.dynamicCppCall("_bernoulli_", self, p, generator).to(Tensor)
template u_th_bernoulli_out*(ty: TensorType; output: var Tensor, self: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("_th_bernoulli_out", output, self, generator).to(Tensor)
template u_th_bernoulli_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::_th_bernoulli_out", output, self, generator).to(Tensor)
template u_th_bernoulli*(self: Tensor, generator: pointer = nil): Tensor = self.dynamicCppCall("_th_bernoulli", generator).to(Tensor)
template u_th_bernoulli*(ty: TensorType; self: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("_th_bernoulli", self, generator).to(Tensor)
template u_th_bernoulli*(_: typedesc[torch]; self: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::_th_bernoulli", self, generator).to(Tensor)
template u_dirichlet_grad_out*(ty: TensorType; output: var Tensor, x: var Tensor, alpha: var Tensor, total: var Tensor): Tensor = ty.dynamicCppCall("_dirichlet_grad_out", output, x, alpha, total).to(Tensor)
template u_dirichlet_grad_out*(_: typedesc[torch]; output: var Tensor, x: var Tensor, alpha: var Tensor, total: var Tensor): Tensor = dynamicCCall("at::_dirichlet_grad_out", output, x, alpha, total).to(Tensor)
template u_dirichlet_grad*(ty: TensorType; x: var Tensor, alpha: var Tensor, total: var Tensor): Tensor = ty.dynamicCppCall("_dirichlet_grad", x, alpha, total).to(Tensor)
template u_dirichlet_grad*(_: typedesc[torch]; x: var Tensor, alpha: var Tensor, total: var Tensor): Tensor = dynamicCCall("at::_dirichlet_grad", x, alpha, total).to(Tensor)
template th_tensor*(ty: TensorType; size: IntList): Tensor = ty.dynamicCppCall("th_tensor", size).to(Tensor)
template th_tensor*(ty: TensorType; ): Tensor = ty.dynamicCppCall("th_tensor").to(Tensor)
template tensor*(ty: TensorType; storage: var AStorage, storageOffset: int64, size: IntList, stride: IntList): Tensor = ty.dynamicCppCall("tensor", storage, storageOffset, size, stride).to(Tensor)
template tensor*(ty: TensorType; size: IntList, stride: IntList): Tensor = ty.dynamicCppCall("tensor", size, stride).to(Tensor)
template alias*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("alias", self).to(Tensor)
template alias*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::alias", self).to(Tensor)
template u_copy_ignoring_overlaps_u*(self: Tensor, src: var Tensor): Tensor = self.dynamicCppCall("_copy_ignoring_overlaps_", src).to(Tensor)
template u_copy_ignoring_overlaps_u*(ty: TensorType; self: var Tensor, src: var Tensor): Tensor = ty.dynamicCppCall("_copy_ignoring_overlaps_", self, src).to(Tensor)
template u_cat_out*(ty: TensorType; self: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("_cat_out", self, tensors, dim).to(Tensor)
template u_cat_out*(_: typedesc[torch]; self: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::_cat_out", self, tensors, dim).to(Tensor)
template u_cat*(ty: TensorType; tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("_cat", tensors, dim).to(Tensor)
template u_cat*(_: typedesc[torch]; tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::_cat", tensors, dim).to(Tensor)
template binary_cross_entropy_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy_out", output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy_out", output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy", self, target, weight, reduction).to(Tensor)
template binary_cross_entropy*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy", self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy_forward_out", output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy_forward_out", output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_forward*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy_forward", self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy_forward", self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy_backward_out", grad_input, grad_output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy_backward_out", grad_input, grad_output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("binary_cross_entropy_backward", grad_output, self, target, weight, reduction).to(Tensor)
template binary_cross_entropy_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::binary_cross_entropy_backward", grad_output, self, target, weight, reduction).to(Tensor)
template kl_div_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div_out", output, self, target, reduction).to(Tensor)
template kl_div_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div_out", output, self, target, reduction).to(Tensor)
template kl_div*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div", self, target, reduction).to(Tensor)
template kl_div*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div", self, target, reduction).to(Tensor)
template kl_div_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div_forward_out", output, self, target, reduction).to(Tensor)
template kl_div_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div_forward_out", output, self, target, reduction).to(Tensor)
template kl_div_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div_forward", self, target, reduction).to(Tensor)
template kl_div_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div_forward", self, target, reduction).to(Tensor)
template kl_div_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template kl_div_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template kl_div_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("kl_div_backward", grad_output, self, target, reduction).to(Tensor)
template kl_div_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::kl_div_backward", grad_output, self, target, reduction).to(Tensor)
template l1_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss_out", output, self, target, reduction).to(Tensor)
template l1_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss_out", output, self, target, reduction).to(Tensor)
template l1_loss*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss", self, target, reduction).to(Tensor)
template l1_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss", self, target, reduction).to(Tensor)
template l1_loss_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss_forward_out", output, self, target, reduction).to(Tensor)
template l1_loss_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss_forward_out", output, self, target, reduction).to(Tensor)
template l1_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss_forward", self, target, reduction).to(Tensor)
template l1_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss_forward", self, target, reduction).to(Tensor)
template l1_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template l1_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template l1_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("l1_loss_backward", grad_output, self, target, reduction).to(Tensor)
template l1_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::l1_loss_backward", grad_output, self, target, reduction).to(Tensor)
template mse_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss_out", output, self, target, reduction).to(Tensor)
template mse_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss_out", output, self, target, reduction).to(Tensor)
template mse_loss*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss", self, target, reduction).to(Tensor)
template mse_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss", self, target, reduction).to(Tensor)
template mse_loss_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss_forward_out", output, self, target, reduction).to(Tensor)
template mse_loss_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss_forward_out", output, self, target, reduction).to(Tensor)
template mse_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss_forward", self, target, reduction).to(Tensor)
template mse_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss_forward", self, target, reduction).to(Tensor)
template mse_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template mse_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template mse_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("mse_loss_backward", grad_output, self, target, reduction).to(Tensor)
template mse_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::mse_loss_backward", grad_output, self, target, reduction).to(Tensor)
template multi_margin_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, p: float = 1, margin: float = 1, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss_out", output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, p: float = 1, margin: float = 1, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss_out", output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss*(ty: TensorType; self: var Tensor, target: var Tensor, p: float = 1, margin: float = 1, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss", self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, p: float = 1, margin: float = 1, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss", self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss_forward_out", output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss_forward_out", output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss_forward", self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss_forward", self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss_backward_out", grad_input, grad_output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss_backward_out", grad_input, grad_output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multi_margin_loss_backward", grad_output, self, target, p, margin, weight, reduction).to(Tensor)
template multi_margin_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, p: float, margin: float, weight: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multi_margin_loss_backward", grad_output, self, target, p, margin, weight, reduction).to(Tensor)
template multilabel_margin_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multilabel_margin_loss_out", output, self, target, reduction).to(Tensor)
template multilabel_margin_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multilabel_margin_loss_out", output, self, target, reduction).to(Tensor)
template multilabel_margin_loss*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("multilabel_margin_loss", self, target, reduction).to(Tensor)
template multilabel_margin_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::multilabel_margin_loss", self, target, reduction).to(Tensor)
template multilabel_margin_loss_forward_out*(ty: TensorType; output: var Tensor, is_target: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): (Tensor, Tensor) = ty.dynamicCppCall("multilabel_margin_loss_forward_out", output, is_target, self, target, reduction).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template multilabel_margin_loss_forward_out*(_: typedesc[torch]; output: var Tensor, is_target: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): (Tensor, Tensor) = dynamicCCall("at::multilabel_margin_loss_forward_out", output, is_target, self, target, reduction).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template multilabel_margin_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): (Tensor, Tensor) = ty.dynamicCppCall("multilabel_margin_loss_forward", self, target, reduction).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template multilabel_margin_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): (Tensor, Tensor) = dynamicCCall("at::multilabel_margin_loss_forward", self, target, reduction).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template multilabel_margin_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64, is_target: var Tensor): Tensor = ty.dynamicCppCall("multilabel_margin_loss_backward_out", grad_input, grad_output, self, target, reduction, is_target).to(Tensor)
template multilabel_margin_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64, is_target: var Tensor): Tensor = dynamicCCall("at::multilabel_margin_loss_backward_out", grad_input, grad_output, self, target, reduction, is_target).to(Tensor)
template multilabel_margin_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64, is_target: var Tensor): Tensor = ty.dynamicCppCall("multilabel_margin_loss_backward", grad_output, self, target, reduction, is_target).to(Tensor)
template multilabel_margin_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64, is_target: var Tensor): Tensor = dynamicCCall("at::multilabel_margin_loss_backward", grad_output, self, target, reduction, is_target).to(Tensor)
template nll_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = ty.dynamicCppCall("nll_loss_out", output, self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = dynamicCCall("at::nll_loss_out", output, self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = ty.dynamicCppCall("nll_loss", self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = dynamicCCall("at::nll_loss", self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss_forward_out*(ty: TensorType; output: var Tensor, total_weight: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = ty.dynamicCppCall("nll_loss_forward_out", output, total_weight, self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss_forward_out*(_: typedesc[torch]; output: var Tensor, total_weight: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = dynamicCCall("at::nll_loss_forward_out", output, total_weight, self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = ty.dynamicCppCall("nll_loss_forward", self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = dynamicCCall("at::nll_loss_forward", self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = ty.dynamicCppCall("nll_loss_backward_out", grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = dynamicCCall("at::nll_loss_backward_out", grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = ty.dynamicCppCall("nll_loss_backward", grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = dynamicCCall("at::nll_loss_backward", grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = ty.dynamicCppCall("nll_loss2d_out", output, self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = dynamicCCall("at::nll_loss2d_out", output, self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss2d*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = ty.dynamicCppCall("nll_loss2d", self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss2d*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64 = -100): Tensor = dynamicCCall("at::nll_loss2d", self, target, weight, reduction, ignore_index).to(Tensor)
template nll_loss2d_forward_out*(ty: TensorType; output: var Tensor, total_weight: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = ty.dynamicCppCall("nll_loss2d_forward_out", output, total_weight, self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss2d_forward_out*(_: typedesc[torch]; output: var Tensor, total_weight: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = dynamicCCall("at::nll_loss2d_forward_out", output, total_weight, self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss2d_forward*(ty: TensorType; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = ty.dynamicCppCall("nll_loss2d_forward", self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss2d_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64): (Tensor, Tensor) = dynamicCCall("at::nll_loss2d_forward", self, target, weight, reduction, ignore_index).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template nll_loss2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = ty.dynamicCppCall("nll_loss2d_backward_out", grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = dynamicCCall("at::nll_loss2d_backward_out", grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = ty.dynamicCppCall("nll_loss2d_backward", grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template nll_loss2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, weight: var Tensor, reduction: int64, ignore_index: int64, total_weight: var Tensor): Tensor = dynamicCCall("at::nll_loss2d_backward", grad_output, self, target, weight, reduction, ignore_index, total_weight).to(Tensor)
template smooth_l1_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss_out", output, self, target, reduction).to(Tensor)
template smooth_l1_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss_out", output, self, target, reduction).to(Tensor)
template smooth_l1_loss*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss", self, target, reduction).to(Tensor)
template smooth_l1_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss", self, target, reduction).to(Tensor)
template smooth_l1_loss_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss_forward_out", output, self, target, reduction).to(Tensor)
template smooth_l1_loss_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss_forward_out", output, self, target, reduction).to(Tensor)
template smooth_l1_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss_forward", self, target, reduction).to(Tensor)
template smooth_l1_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss_forward", self, target, reduction).to(Tensor)
template smooth_l1_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template smooth_l1_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template smooth_l1_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("smooth_l1_loss_backward", grad_output, self, target, reduction).to(Tensor)
template smooth_l1_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::smooth_l1_loss_backward", grad_output, self, target, reduction).to(Tensor)
template soft_margin_loss_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss_out", output, self, target, reduction).to(Tensor)
template soft_margin_loss_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss_out", output, self, target, reduction).to(Tensor)
template soft_margin_loss*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss", self, target, reduction).to(Tensor)
template soft_margin_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss", self, target, reduction).to(Tensor)
template soft_margin_loss_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss_forward_out", output, self, target, reduction).to(Tensor)
template soft_margin_loss_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss_forward_out", output, self, target, reduction).to(Tensor)
template soft_margin_loss_forward*(ty: TensorType; self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss_forward", self, target, reduction).to(Tensor)
template soft_margin_loss_forward*(_: typedesc[torch]; self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss_forward", self, target, reduction).to(Tensor)
template soft_margin_loss_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template soft_margin_loss_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss_backward_out", grad_input, grad_output, self, target, reduction).to(Tensor)
template soft_margin_loss_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = ty.dynamicCppCall("soft_margin_loss_backward", grad_output, self, target, reduction).to(Tensor)
template soft_margin_loss_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, target: var Tensor, reduction: int64): Tensor = dynamicCCall("at::soft_margin_loss_backward", grad_output, self, target, reduction).to(Tensor)
template elu_out*(ty: TensorType; output: var Tensor, self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = ty.dynamicCppCall("elu_out", output, self, alpha, scale, input_scale).to(Tensor)
template elu_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = dynamicCCall("at::elu_out", output, self, alpha, scale, input_scale).to(Tensor)
template elu*(ty: TensorType; self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = ty.dynamicCppCall("elu", self, alpha, scale, input_scale).to(Tensor)
template elu*(_: typedesc[torch]; self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = dynamicCCall("at::elu", self, alpha, scale, input_scale).to(Tensor)
template elu_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = ty.dynamicCppCall("elu_forward_out", output, self, alpha, scale, input_scale).to(Tensor)
template elu_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = dynamicCCall("at::elu_forward_out", output, self, alpha, scale, input_scale).to(Tensor)
template elu_forward*(ty: TensorType; self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = ty.dynamicCppCall("elu_forward", self, alpha, scale, input_scale).to(Tensor)
template elu_forward*(_: typedesc[torch]; self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = dynamicCCall("at::elu_forward", self, alpha, scale, input_scale).to(Tensor)
template elu_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, alpha: float, scale: float, input_scale: float, output: var Tensor): Tensor = ty.dynamicCppCall("elu_backward_out", grad_input, grad_output, alpha, scale, input_scale, output).to(Tensor)
template elu_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, alpha: float, scale: float, input_scale: float, output: var Tensor): Tensor = dynamicCCall("at::elu_backward_out", grad_input, grad_output, alpha, scale, input_scale, output).to(Tensor)
template elu_backward*(ty: TensorType; grad_output: var Tensor, alpha: float, scale: float, input_scale: float, output: var Tensor): Tensor = ty.dynamicCppCall("elu_backward", grad_output, alpha, scale, input_scale, output).to(Tensor)
template elu_backward*(_: typedesc[torch]; grad_output: var Tensor, alpha: float, scale: float, input_scale: float, output: var Tensor): Tensor = dynamicCCall("at::elu_backward", grad_output, alpha, scale, input_scale, output).to(Tensor)
template elu_u*(ty: TensorType; self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = ty.dynamicCppCall("elu_", self, alpha, scale, input_scale).to(Tensor)
template elu_u*(_: typedesc[torch]; self: var Tensor, alpha: float = 1, scale: float = 1, input_scale: float = 1): Tensor = dynamicCCall("at::elu_", self, alpha, scale, input_scale).to(Tensor)
template elu_forward_u*(ty: TensorType; self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = ty.dynamicCppCall("elu_forward_", self, alpha, scale, input_scale).to(Tensor)
template elu_forward_u*(_: typedesc[torch]; self: var Tensor, alpha: float, scale: float, input_scale: float): Tensor = dynamicCCall("at::elu_forward_", self, alpha, scale, input_scale).to(Tensor)
template glu_out*(ty: TensorType; output: var Tensor, self: var Tensor, dim: int64 = -1): Tensor = ty.dynamicCppCall("glu_out", output, self, dim).to(Tensor)
template glu_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, dim: int64 = -1): Tensor = dynamicCCall("at::glu_out", output, self, dim).to(Tensor)
template glu*(ty: TensorType; self: var Tensor, dim: int64 = -1): Tensor = ty.dynamicCppCall("glu", self, dim).to(Tensor)
template glu*(_: typedesc[torch]; self: var Tensor, dim: int64 = -1): Tensor = dynamicCCall("at::glu", self, dim).to(Tensor)
template glu_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("glu_forward_out", output, self, dim).to(Tensor)
template glu_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::glu_forward_out", output, self, dim).to(Tensor)
template glu_forward*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("glu_forward", self, dim).to(Tensor)
template glu_forward*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::glu_forward", self, dim).to(Tensor)
template glu_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("glu_backward_out", grad_input, grad_output, self, dim).to(Tensor)
template glu_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::glu_backward_out", grad_input, grad_output, self, dim).to(Tensor)
template glu_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("glu_backward", grad_output, self, dim).to(Tensor)
template glu_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::glu_backward", grad_output, self, dim).to(Tensor)
template hardtanh_out*(ty: TensorType; output: var Tensor, self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = ty.dynamicCppCall("hardtanh_out", output, self, min_val, max_val).to(Tensor)
template hardtanh_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = dynamicCCall("at::hardtanh_out", output, self, min_val, max_val).to(Tensor)
template hardtanh*(ty: TensorType; self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = ty.dynamicCppCall("hardtanh", self, min_val, max_val).to(Tensor)
template hardtanh*(_: typedesc[torch]; self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = dynamicCCall("at::hardtanh", self, min_val, max_val).to(Tensor)
template hardtanh_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = ty.dynamicCppCall("hardtanh_forward_out", output, self, min_val, max_val).to(Tensor)
template hardtanh_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = dynamicCCall("at::hardtanh_forward_out", output, self, min_val, max_val).to(Tensor)
template hardtanh_forward*(ty: TensorType; self: var Tensor, min_val: float, max_val: float): Tensor = ty.dynamicCppCall("hardtanh_forward", self, min_val, max_val).to(Tensor)
template hardtanh_forward*(_: typedesc[torch]; self: var Tensor, min_val: float, max_val: float): Tensor = dynamicCCall("at::hardtanh_forward", self, min_val, max_val).to(Tensor)
template hardtanh_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = ty.dynamicCppCall("hardtanh_backward_out", grad_input, grad_output, self, min_val, max_val).to(Tensor)
template hardtanh_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = dynamicCCall("at::hardtanh_backward_out", grad_input, grad_output, self, min_val, max_val).to(Tensor)
template hardtanh_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = ty.dynamicCppCall("hardtanh_backward", grad_output, self, min_val, max_val).to(Tensor)
template hardtanh_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, min_val: float, max_val: float): Tensor = dynamicCCall("at::hardtanh_backward", grad_output, self, min_val, max_val).to(Tensor)
template hardtanh_u*(ty: TensorType; self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = ty.dynamicCppCall("hardtanh_", self, min_val, max_val).to(Tensor)
template hardtanh_u*(_: typedesc[torch]; self: var Tensor, min_val: float = -1, max_val: float = 1): Tensor = dynamicCCall("at::hardtanh_", self, min_val, max_val).to(Tensor)
template hardtanh_forward_u*(ty: TensorType; self: var Tensor, min_val: float, max_val: float): Tensor = ty.dynamicCppCall("hardtanh_forward_", self, min_val, max_val).to(Tensor)
template hardtanh_forward_u*(_: typedesc[torch]; self: var Tensor, min_val: float, max_val: float): Tensor = dynamicCCall("at::hardtanh_forward_", self, min_val, max_val).to(Tensor)
template leaky_relu_out*(ty: TensorType; output: var Tensor, self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_out", output, self, negative_slope).to(Tensor)
template leaky_relu_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_out", output, self, negative_slope).to(Tensor)
template leaky_relu*(ty: TensorType; self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu", self, negative_slope).to(Tensor)
template leaky_relu*(_: typedesc[torch]; self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu", self, negative_slope).to(Tensor)
template leaky_relu_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_forward_out", output, self, negative_slope).to(Tensor)
template leaky_relu_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_forward_out", output, self, negative_slope).to(Tensor)
template leaky_relu_forward*(ty: TensorType; self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_forward", self, negative_slope).to(Tensor)
template leaky_relu_forward*(_: typedesc[torch]; self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_forward", self, negative_slope).to(Tensor)
template leaky_relu_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_backward_out", grad_input, grad_output, self, negative_slope).to(Tensor)
template leaky_relu_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_backward_out", grad_input, grad_output, self, negative_slope).to(Tensor)
template leaky_relu_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_backward", grad_output, self, negative_slope).to(Tensor)
template leaky_relu_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_backward", grad_output, self, negative_slope).to(Tensor)
template leaky_relu_u*(ty: TensorType; self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_", self, negative_slope).to(Tensor)
template leaky_relu_u*(_: typedesc[torch]; self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_", self, negative_slope).to(Tensor)
template leaky_relu_forward_u*(ty: TensorType; self: var Tensor, negative_slope: float): Tensor = ty.dynamicCppCall("leaky_relu_forward_", self, negative_slope).to(Tensor)
template leaky_relu_forward_u*(_: typedesc[torch]; self: var Tensor, negative_slope: float): Tensor = dynamicCCall("at::leaky_relu_forward_", self, negative_slope).to(Tensor)
template log_sigmoid_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("log_sigmoid_out", output, self).to(Tensor)
template log_sigmoid_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::log_sigmoid_out", output, self).to(Tensor)
template log_sigmoid*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log_sigmoid", self).to(Tensor)
template log_sigmoid*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log_sigmoid", self).to(Tensor)
template log_sigmoid_forward_out*(ty: TensorType; output: var Tensor, buffer: var Tensor, self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("log_sigmoid_forward_out", output, buffer, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template log_sigmoid_forward_out*(_: typedesc[torch]; output: var Tensor, buffer: var Tensor, self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::log_sigmoid_forward_out", output, buffer, self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template log_sigmoid_forward*(ty: TensorType; self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("log_sigmoid_forward", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template log_sigmoid_forward*(_: typedesc[torch]; self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::log_sigmoid_forward", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template log_sigmoid_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, buffer: var Tensor): Tensor = ty.dynamicCppCall("log_sigmoid_backward_out", grad_input, grad_output, self, buffer).to(Tensor)
template log_sigmoid_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, buffer: var Tensor): Tensor = dynamicCCall("at::log_sigmoid_backward_out", grad_input, grad_output, self, buffer).to(Tensor)
template log_sigmoid_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, buffer: var Tensor): Tensor = ty.dynamicCppCall("log_sigmoid_backward", grad_output, self, buffer).to(Tensor)
template log_sigmoid_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, buffer: var Tensor): Tensor = dynamicCCall("at::log_sigmoid_backward", grad_output, self, buffer).to(Tensor)
template prelu_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor): Tensor = ty.dynamicCppCall("prelu_out", output, self, weight).to(Tensor)
template prelu_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor): Tensor = dynamicCCall("at::prelu_out", output, self, weight).to(Tensor)
template prelu*(ty: TensorType; self: var Tensor, weight: var Tensor): Tensor = ty.dynamicCppCall("prelu", self, weight).to(Tensor)
template prelu*(_: typedesc[torch]; self: var Tensor, weight: var Tensor): Tensor = dynamicCCall("at::prelu", self, weight).to(Tensor)
template prelu_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor): Tensor = ty.dynamicCppCall("prelu_forward_out", output, self, weight).to(Tensor)
template prelu_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor): Tensor = dynamicCCall("at::prelu_forward_out", output, self, weight).to(Tensor)
template prelu_forward*(ty: TensorType; self: var Tensor, weight: var Tensor): Tensor = ty.dynamicCppCall("prelu_forward", self, weight).to(Tensor)
template prelu_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor): Tensor = dynamicCCall("at::prelu_forward", self, weight).to(Tensor)
template prelu_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("prelu_backward_out", grad_input, grad_weight, grad_output, self, weight).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template prelu_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor): (Tensor, Tensor) = dynamicCCall("at::prelu_backward_out", grad_input, grad_weight, grad_output, self, weight).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template prelu_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, output_mask: StdArray[bool, 2]): (Tensor, Tensor) = ty.dynamicCppCall("prelu_backward", grad_output, self, weight, output_mask).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template prelu_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, output_mask: StdArray[bool, 2]): (Tensor, Tensor) = dynamicCCall("at::prelu_backward", grad_output, self, weight, output_mask).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template rrelu_with_noise_out*(ty: TensorType; output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("rrelu_with_noise_out", output, self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::rrelu_with_noise_out", output, self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise*(ty: TensorType; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("rrelu_with_noise", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise*(_: typedesc[torch]; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::rrelu_with_noise", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = ty.dynamicCppCall("rrelu_with_noise_forward_out", output, self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = dynamicCCall("at::rrelu_with_noise_forward_out", output, self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward*(ty: TensorType; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = ty.dynamicCppCall("rrelu_with_noise_forward", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward*(_: typedesc[torch]; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = dynamicCCall("at::rrelu_with_noise_forward", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool): Tensor = ty.dynamicCppCall("rrelu_with_noise_backward_out", grad_input, grad_output, self, noise, lower, upper, training).to(Tensor)
template rrelu_with_noise_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool): Tensor = dynamicCCall("at::rrelu_with_noise_backward_out", grad_input, grad_output, self, noise, lower, upper, training).to(Tensor)
template rrelu_with_noise_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool): Tensor = ty.dynamicCppCall("rrelu_with_noise_backward", grad_output, self, noise, lower, upper, training).to(Tensor)
template rrelu_with_noise_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool): Tensor = dynamicCCall("at::rrelu_with_noise_backward", grad_output, self, noise, lower, upper, training).to(Tensor)
template rrelu_with_noise_u*(ty: TensorType; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("rrelu_with_noise_", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_u*(_: typedesc[torch]; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::rrelu_with_noise_", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward_u*(ty: TensorType; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = ty.dynamicCppCall("rrelu_with_noise_forward_", self, noise, lower, upper, training, generator).to(Tensor)
template rrelu_with_noise_forward_u*(_: typedesc[torch]; self: var Tensor, noise: var Tensor, lower: float, upper: float, training: bool, generator: pointer): Tensor = dynamicCCall("at::rrelu_with_noise_forward_", self, noise, lower, upper, training, generator).to(Tensor)
template softplus_out*(ty: TensorType; output: var Tensor, self: var Tensor, beta: float = 1, threshold: float = 20): Tensor = ty.dynamicCppCall("softplus_out", output, self, beta, threshold).to(Tensor)
template softplus_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, beta: float = 1, threshold: float = 20): Tensor = dynamicCCall("at::softplus_out", output, self, beta, threshold).to(Tensor)
template softplus*(ty: TensorType; self: var Tensor, beta: float = 1, threshold: float = 20): Tensor = ty.dynamicCppCall("softplus", self, beta, threshold).to(Tensor)
template softplus*(_: typedesc[torch]; self: var Tensor, beta: float = 1, threshold: float = 20): Tensor = dynamicCCall("at::softplus", self, beta, threshold).to(Tensor)
template softplus_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, beta: float, threshold: float): Tensor = ty.dynamicCppCall("softplus_forward_out", output, self, beta, threshold).to(Tensor)
template softplus_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, beta: float, threshold: float): Tensor = dynamicCCall("at::softplus_forward_out", output, self, beta, threshold).to(Tensor)
template softplus_forward*(ty: TensorType; self: var Tensor, beta: float, threshold: float): Tensor = ty.dynamicCppCall("softplus_forward", self, beta, threshold).to(Tensor)
template softplus_forward*(_: typedesc[torch]; self: var Tensor, beta: float, threshold: float): Tensor = dynamicCCall("at::softplus_forward", self, beta, threshold).to(Tensor)
template softplus_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, beta: float, threshold: float, output: var Tensor): Tensor = ty.dynamicCppCall("softplus_backward_out", grad_input, grad_output, self, beta, threshold, output).to(Tensor)
template softplus_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, beta: float, threshold: float, output: var Tensor): Tensor = dynamicCCall("at::softplus_backward_out", grad_input, grad_output, self, beta, threshold, output).to(Tensor)
template softplus_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, beta: float, threshold: float, output: var Tensor): Tensor = ty.dynamicCppCall("softplus_backward", grad_output, self, beta, threshold, output).to(Tensor)
template softplus_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, beta: float, threshold: float, output: var Tensor): Tensor = dynamicCCall("at::softplus_backward", grad_output, self, beta, threshold, output).to(Tensor)
template softshrink_out*(ty: TensorType; output: var Tensor, self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink_out", output, self, lambd).to(Tensor)
template softshrink_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink_out", output, self, lambd).to(Tensor)
template softshrink*(ty: TensorType; self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink", self, lambd).to(Tensor)
template softshrink*(_: typedesc[torch]; self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink", self, lambd).to(Tensor)
template softshrink_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink_forward_out", output, self, lambd).to(Tensor)
template softshrink_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink_forward_out", output, self, lambd).to(Tensor)
template softshrink_forward*(ty: TensorType; self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink_forward", self, lambd).to(Tensor)
template softshrink_forward*(_: typedesc[torch]; self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink_forward", self, lambd).to(Tensor)
template softshrink_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink_backward_out", grad_input, grad_output, self, lambd).to(Tensor)
template softshrink_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink_backward_out", grad_input, grad_output, self, lambd).to(Tensor)
template softshrink_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("softshrink_backward", grad_output, self, lambd).to(Tensor)
template softshrink_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, lambd: float): Tensor = dynamicCCall("at::softshrink_backward", grad_output, self, lambd).to(Tensor)
template threshold_out*(ty: TensorType; output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_out", output, self, threshold, value).to(Tensor)
template threshold_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_out", output, self, threshold, value).to(Tensor)
template threshold*(ty: TensorType; self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold", self, threshold, value).to(Tensor)
template threshold*(_: typedesc[torch]; self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold", self, threshold, value).to(Tensor)
template threshold_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_forward_out", output, self, threshold, value).to(Tensor)
template threshold_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_forward_out", output, self, threshold, value).to(Tensor)
template threshold_forward*(ty: TensorType; self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_forward", self, threshold, value).to(Tensor)
template threshold_forward*(_: typedesc[torch]; self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_forward", self, threshold, value).to(Tensor)
template threshold_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_backward_out", grad_input, grad_output, self, threshold, value).to(Tensor)
template threshold_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_backward_out", grad_input, grad_output, self, threshold, value).to(Tensor)
template threshold_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_backward", grad_output, self, threshold, value).to(Tensor)
template threshold_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_backward", grad_output, self, threshold, value).to(Tensor)
template threshold_u*(ty: TensorType; self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_", self, threshold, value).to(Tensor)
template threshold_u*(_: typedesc[torch]; self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_", self, threshold, value).to(Tensor)
template threshold_forward_u*(ty: TensorType; self: var Tensor, threshold: float, value: float): Tensor = ty.dynamicCppCall("threshold_forward_", self, threshold, value).to(Tensor)
template threshold_forward_u*(_: typedesc[torch]; self: var Tensor, threshold: float, value: float): Tensor = dynamicCCall("at::threshold_forward_", self, threshold, value).to(Tensor)
template adaptive_avg_pool2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool2d_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool2d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d", self, output_size).to(Tensor)
template adaptive_avg_pool2d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool2d", self, output_size).to(Tensor)
template adaptive_avg_pool2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d_forward_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool2d_forward_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool2d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d_forward", self, output_size).to(Tensor)
template adaptive_avg_pool2d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool2d_forward", self, output_size).to(Tensor)
template adaptive_avg_pool2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d_backward_out", grad_input, grad_output, self).to(Tensor)
template adaptive_avg_pool2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::adaptive_avg_pool2d_backward_out", grad_input, grad_output, self).to(Tensor)
template adaptive_avg_pool2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("adaptive_avg_pool2d_backward", grad_output, self).to(Tensor)
template adaptive_avg_pool2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::adaptive_avg_pool2d_backward", grad_output, self).to(Tensor)
template adaptive_avg_pool3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool3d_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool3d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d", self, output_size).to(Tensor)
template adaptive_avg_pool3d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool3d", self, output_size).to(Tensor)
template adaptive_avg_pool3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d_forward_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool3d_forward_out", output, self, output_size).to(Tensor)
template adaptive_avg_pool3d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d_forward", self, output_size).to(Tensor)
template adaptive_avg_pool3d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool3d_forward", self, output_size).to(Tensor)
template adaptive_avg_pool3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d_backward_out", grad_input, grad_output, self).to(Tensor)
template adaptive_avg_pool3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::adaptive_avg_pool3d_backward_out", grad_input, grad_output, self).to(Tensor)
template adaptive_avg_pool3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("adaptive_avg_pool3d_backward", grad_output, self).to(Tensor)
template adaptive_avg_pool3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::adaptive_avg_pool3d_backward", grad_output, self).to(Tensor)
template adaptive_max_pool2d_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool2d_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool2d_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d*(ty: TensorType; self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool2d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool2d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_forward_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool2d_forward_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_forward_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool2d_forward_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool2d_forward", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool2d_forward", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = ty.dynamicCppCall("adaptive_max_pool2d_backward_out", grad_input, grad_output, self, indices).to(Tensor)
template adaptive_max_pool2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = dynamicCCall("at::adaptive_max_pool2d_backward_out", grad_input, grad_output, self, indices).to(Tensor)
template adaptive_max_pool2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = ty.dynamicCppCall("adaptive_max_pool2d_backward", grad_output, self, indices).to(Tensor)
template adaptive_max_pool2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = dynamicCCall("at::adaptive_max_pool2d_backward", grad_output, self, indices).to(Tensor)
template adaptive_max_pool3d_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool3d_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool3d_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d*(ty: TensorType; self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool3d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool3d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_forward_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool3d_forward_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_forward_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool3d_forward_out", output, indices, self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool3d_forward", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool3d_forward", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = ty.dynamicCppCall("adaptive_max_pool3d_backward_out", grad_input, grad_output, self, indices).to(Tensor)
template adaptive_max_pool3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = dynamicCCall("at::adaptive_max_pool3d_backward_out", grad_input, grad_output, self, indices).to(Tensor)
template adaptive_max_pool3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = ty.dynamicCppCall("adaptive_max_pool3d_backward", grad_output, self, indices).to(Tensor)
template adaptive_max_pool3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, indices: var Tensor): Tensor = dynamicCCall("at::adaptive_max_pool3d_backward", grad_output, self, indices).to(Tensor)
template avg_pool2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = ty.dynamicCppCall("avg_pool2d_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = dynamicCCall("at::avg_pool2d_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = ty.dynamicCppCall("avg_pool2d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = dynamicCCall("at::avg_pool2d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool2d_forward_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool2d_forward_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_forward*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool2d_forward", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_forward*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool2d_forward", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool2d_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool2d_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool2d_backward", grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool2d_backward", grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = ty.dynamicCppCall("avg_pool3d_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = dynamicCCall("at::avg_pool3d_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = ty.dynamicCppCall("avg_pool3d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool = false, count_include_pad: bool = true): Tensor = dynamicCCall("at::avg_pool3d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool3d_forward_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool3d_forward_out", output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_forward*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool3d_forward", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_forward*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool3d_forward", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool3d_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool3d_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = ty.dynamicCppCall("avg_pool3d_backward", grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, ceil_mode: bool, count_include_pad: bool): Tensor = dynamicCCall("at::avg_pool3d_backward", grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template fractional_max_pool2d_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("fractional_max_pool2d_out", output, indices, self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = dynamicCCall("at::fractional_max_pool2d_out", output, indices, self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d*(ty: TensorType; self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("fractional_max_pool2d", self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = dynamicCCall("at::fractional_max_pool2d", self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_forward_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("fractional_max_pool2d_forward_out", output, indices, self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_forward_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = dynamicCCall("at::fractional_max_pool2d_forward_out", output, indices, self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_forward*(ty: TensorType; self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("fractional_max_pool2d_forward", self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_forward*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, output_size: IntList, random_samples: var Tensor): (Tensor, Tensor) = dynamicCCall("at::fractional_max_pool2d_forward", self, kernel_size, output_size, random_samples).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template fractional_max_pool2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, indices: var Tensor): Tensor = ty.dynamicCppCall("fractional_max_pool2d_backward_out", grad_input, grad_output, self, kernel_size, output_size, indices).to(Tensor)
template fractional_max_pool2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, indices: var Tensor): Tensor = dynamicCCall("at::fractional_max_pool2d_backward_out", grad_input, grad_output, self, kernel_size, output_size, indices).to(Tensor)
template fractional_max_pool2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, indices: var Tensor): Tensor = ty.dynamicCppCall("fractional_max_pool2d_backward", grad_output, self, kernel_size, output_size, indices).to(Tensor)
template fractional_max_pool2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, output_size: IntList, indices: var Tensor): Tensor = dynamicCCall("at::fractional_max_pool2d_backward", grad_output, self, kernel_size, output_size, indices).to(Tensor)
template max_pool2d_with_indices_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_pool2d_with_indices_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_pool2d_with_indices_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_pool2d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_pool2d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_forward_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = ty.dynamicCppCall("max_pool2d_with_indices_forward_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_forward_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = dynamicCCall("at::max_pool2d_with_indices_forward_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_forward*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = ty.dynamicCppCall("max_pool2d_with_indices_forward", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_forward*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = dynamicCCall("at::max_pool2d_with_indices_forward", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool2d_with_indices_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = ty.dynamicCppCall("max_pool2d_with_indices_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool2d_with_indices_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = dynamicCCall("at::max_pool2d_with_indices_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool2d_with_indices_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = ty.dynamicCppCall("max_pool2d_with_indices_backward", grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool2d_with_indices_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = dynamicCCall("at::max_pool2d_with_indices_backward", grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool3d_with_indices_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_pool3d_with_indices_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_pool3d_with_indices_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_pool3d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_pool3d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_forward_out*(ty: TensorType; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = ty.dynamicCppCall("max_pool3d_with_indices_forward_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_forward_out*(_: typedesc[torch]; output: var Tensor, indices: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = dynamicCCall("at::max_pool3d_with_indices_forward_out", output, indices, self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_forward*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = ty.dynamicCppCall("max_pool3d_with_indices_forward", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_forward*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool): (Tensor, Tensor) = dynamicCCall("at::max_pool3d_with_indices_forward", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool3d_with_indices_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = ty.dynamicCppCall("max_pool3d_with_indices_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool3d_with_indices_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = dynamicCCall("at::max_pool3d_with_indices_backward_out", grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool3d_with_indices_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = ty.dynamicCppCall("max_pool3d_with_indices_backward", grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_pool3d_with_indices_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, ceil_mode: bool, indices: var Tensor): Tensor = dynamicCCall("at::max_pool3d_with_indices_backward", grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices).to(Tensor)
template max_unpool2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d_out", output, self, indices, output_size).to(Tensor)
template max_unpool2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d_out", output, self, indices, output_size).to(Tensor)
template max_unpool2d*(ty: TensorType; self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d", self, indices, output_size).to(Tensor)
template max_unpool2d*(_: typedesc[torch]; self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d", self, indices, output_size).to(Tensor)
template max_unpool2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d_forward_out", output, self, indices, output_size).to(Tensor)
template max_unpool2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d_forward_out", output, self, indices, output_size).to(Tensor)
template max_unpool2d_forward*(ty: TensorType; self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d_forward", self, indices, output_size).to(Tensor)
template max_unpool2d_forward*(_: typedesc[torch]; self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d_forward", self, indices, output_size).to(Tensor)
template max_unpool2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d_backward_out", grad_input, grad_output, self, indices, output_size).to(Tensor)
template max_unpool2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d_backward_out", grad_input, grad_output, self, indices, output_size).to(Tensor)
template max_unpool2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("max_unpool2d_backward", grad_output, self, indices, output_size).to(Tensor)
template max_unpool2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::max_unpool2d_backward", grad_output, self, indices, output_size).to(Tensor)
template max_unpool3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d_out", output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d_out", output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d*(ty: TensorType; self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d", self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d*(_: typedesc[torch]; self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d", self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d_forward_out", output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d_forward_out", output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_forward*(ty: TensorType; self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d_forward", self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_forward*(_: typedesc[torch]; self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d_forward", self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d_backward_out", grad_input, grad_output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d_backward_out", grad_input, grad_output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("max_unpool3d_backward", grad_output, self, indices, output_size, stride, padding).to(Tensor)
template max_unpool3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, indices: var Tensor, output_size: IntList, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::max_unpool3d_backward", grad_output, self, indices, output_size, stride, padding).to(Tensor)
template reflection_pad1d_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d_out", output, self, padding).to(Tensor)
template reflection_pad1d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d_out", output, self, padding).to(Tensor)
template reflection_pad1d*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d", self, padding).to(Tensor)
template reflection_pad1d*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d", self, padding).to(Tensor)
template reflection_pad1d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d_forward_out", output, self, padding).to(Tensor)
template reflection_pad1d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d_forward_out", output, self, padding).to(Tensor)
template reflection_pad1d_forward*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d_forward", self, padding).to(Tensor)
template reflection_pad1d_forward*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d_forward", self, padding).to(Tensor)
template reflection_pad1d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template reflection_pad1d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template reflection_pad1d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad1d_backward", grad_output, self, padding).to(Tensor)
template reflection_pad1d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad1d_backward", grad_output, self, padding).to(Tensor)
template reflection_pad2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d_out", output, self, padding).to(Tensor)
template reflection_pad2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d_out", output, self, padding).to(Tensor)
template reflection_pad2d*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d", self, padding).to(Tensor)
template reflection_pad2d*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d", self, padding).to(Tensor)
template reflection_pad2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d_forward_out", output, self, padding).to(Tensor)
template reflection_pad2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d_forward_out", output, self, padding).to(Tensor)
template reflection_pad2d_forward*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d_forward", self, padding).to(Tensor)
template reflection_pad2d_forward*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d_forward", self, padding).to(Tensor)
template reflection_pad2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template reflection_pad2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template reflection_pad2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("reflection_pad2d_backward", grad_output, self, padding).to(Tensor)
template reflection_pad2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::reflection_pad2d_backward", grad_output, self, padding).to(Tensor)
template replication_pad1d_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d_out", output, self, padding).to(Tensor)
template replication_pad1d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d_out", output, self, padding).to(Tensor)
template replication_pad1d*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d", self, padding).to(Tensor)
template replication_pad1d*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d", self, padding).to(Tensor)
template replication_pad1d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d_forward_out", output, self, padding).to(Tensor)
template replication_pad1d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d_forward_out", output, self, padding).to(Tensor)
template replication_pad1d_forward*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d_forward", self, padding).to(Tensor)
template replication_pad1d_forward*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d_forward", self, padding).to(Tensor)
template replication_pad1d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad1d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad1d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad1d_backward", grad_output, self, padding).to(Tensor)
template replication_pad1d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad1d_backward", grad_output, self, padding).to(Tensor)
template replication_pad2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d_out", output, self, padding).to(Tensor)
template replication_pad2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d_out", output, self, padding).to(Tensor)
template replication_pad2d*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d", self, padding).to(Tensor)
template replication_pad2d*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d", self, padding).to(Tensor)
template replication_pad2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d_forward_out", output, self, padding).to(Tensor)
template replication_pad2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d_forward_out", output, self, padding).to(Tensor)
template replication_pad2d_forward*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d_forward", self, padding).to(Tensor)
template replication_pad2d_forward*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d_forward", self, padding).to(Tensor)
template replication_pad2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad2d_backward", grad_output, self, padding).to(Tensor)
template replication_pad2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad2d_backward", grad_output, self, padding).to(Tensor)
template replication_pad3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d_out", output, self, padding).to(Tensor)
template replication_pad3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d_out", output, self, padding).to(Tensor)
template replication_pad3d*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d", self, padding).to(Tensor)
template replication_pad3d*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d", self, padding).to(Tensor)
template replication_pad3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d_forward_out", output, self, padding).to(Tensor)
template replication_pad3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d_forward_out", output, self, padding).to(Tensor)
template replication_pad3d_forward*(ty: TensorType; self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d_forward", self, padding).to(Tensor)
template replication_pad3d_forward*(_: typedesc[torch]; self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d_forward", self, padding).to(Tensor)
template replication_pad3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d_backward_out", grad_input, grad_output, self, padding).to(Tensor)
template replication_pad3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = ty.dynamicCppCall("replication_pad3d_backward", grad_output, self, padding).to(Tensor)
template replication_pad3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, padding: IntList): Tensor = dynamicCCall("at::replication_pad3d_backward", grad_output, self, padding).to(Tensor)
template upsample_linear1d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_linear1d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_linear1d*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d", self, output_size, align_corners).to(Tensor)
template upsample_linear1d*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d", self, output_size, align_corners).to(Tensor)
template upsample_linear1d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_linear1d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_linear1d_forward*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d_forward", self, output_size, align_corners).to(Tensor)
template upsample_linear1d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d_forward", self, output_size, align_corners).to(Tensor)
template upsample_linear1d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_linear1d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_linear1d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_linear1d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_linear1d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_linear1d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_bilinear2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d", self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d", self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_forward*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d_forward", self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d_forward", self, output_size, align_corners).to(Tensor)
template upsample_bilinear2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_bilinear2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_bilinear2d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_bilinear2d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_bilinear2d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_bilinear2d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_trilinear3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d_out", output, self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d", self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d", self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d_forward_out", output, self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_forward*(ty: TensorType; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d_forward", self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d_forward", self, output_size, align_corners).to(Tensor)
template upsample_trilinear3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_trilinear3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d_backward_out", grad_input, grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_trilinear3d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = ty.dynamicCppCall("upsample_trilinear3d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_trilinear3d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList, align_corners: bool): Tensor = dynamicCCall("at::upsample_trilinear3d_backward", grad_output, output_size, input_size, align_corners).to(Tensor)
template upsample_nearest1d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d_out", output, self, output_size).to(Tensor)
template upsample_nearest1d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d_out", output, self, output_size).to(Tensor)
template upsample_nearest1d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d", self, output_size).to(Tensor)
template upsample_nearest1d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d", self, output_size).to(Tensor)
template upsample_nearest1d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest1d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest1d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d_forward", self, output_size).to(Tensor)
template upsample_nearest1d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d_forward", self, output_size).to(Tensor)
template upsample_nearest1d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest1d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest1d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest1d_backward", grad_output, output_size, input_size).to(Tensor)
template upsample_nearest1d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest1d_backward", grad_output, output_size, input_size).to(Tensor)
template upsample_nearest2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d_out", output, self, output_size).to(Tensor)
template upsample_nearest2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d_out", output, self, output_size).to(Tensor)
template upsample_nearest2d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d", self, output_size).to(Tensor)
template upsample_nearest2d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d", self, output_size).to(Tensor)
template upsample_nearest2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest2d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d_forward", self, output_size).to(Tensor)
template upsample_nearest2d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d_forward", self, output_size).to(Tensor)
template upsample_nearest2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest2d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest2d_backward", grad_output, output_size, input_size).to(Tensor)
template upsample_nearest2d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest2d_backward", grad_output, output_size, input_size).to(Tensor)
template upsample_nearest3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d_out", output, self, output_size).to(Tensor)
template upsample_nearest3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d_out", output, self, output_size).to(Tensor)
template upsample_nearest3d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d", self, output_size).to(Tensor)
template upsample_nearest3d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d", self, output_size).to(Tensor)
template upsample_nearest3d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest3d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d_forward_out", output, self, output_size).to(Tensor)
template upsample_nearest3d_forward*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d_forward", self, output_size).to(Tensor)
template upsample_nearest3d_forward*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d_forward", self, output_size).to(Tensor)
template upsample_nearest3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d_backward_out", grad_input, grad_output, output_size, input_size).to(Tensor)
template upsample_nearest3d_backward*(ty: TensorType; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = ty.dynamicCppCall("upsample_nearest3d_backward", grad_output, output_size, input_size).to(Tensor)
template upsample_nearest3d_backward*(_: typedesc[torch]; grad_output: var Tensor, output_size: IntList, input_size: IntList): Tensor = dynamicCCall("at::upsample_nearest3d_backward", grad_output, output_size, input_size).to(Tensor)
template u_sigmoid_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid_out", output, self).to(Tensor)
template u_sigmoid_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_sigmoid_out", output, self).to(Tensor)
template u_sigmoid*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid", self).to(Tensor)
template u_sigmoid*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sigmoid", self).to(Tensor)
template u_sigmoid_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid_forward_out", output, self).to(Tensor)
template u_sigmoid_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_sigmoid_forward_out", output, self).to(Tensor)
template u_sigmoid_forward*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid_forward", self).to(Tensor)
template u_sigmoid_forward*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sigmoid_forward", self).to(Tensor)
template u_sigmoid_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid_backward_out", grad_input, grad_output, output).to(Tensor)
template u_sigmoid_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output: var Tensor): Tensor = dynamicCCall("at::_sigmoid_backward_out", grad_input, grad_output, output).to(Tensor)
template u_sigmoid_backward*(ty: TensorType; grad_output: var Tensor, output: var Tensor): Tensor = ty.dynamicCppCall("_sigmoid_backward", grad_output, output).to(Tensor)
template u_sigmoid_backward*(_: typedesc[torch]; grad_output: var Tensor, output: var Tensor): Tensor = dynamicCCall("at::_sigmoid_backward", grad_output, output).to(Tensor)
template u_tanh_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_tanh_out", output, self).to(Tensor)
template u_tanh_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_tanh_out", output, self).to(Tensor)
template u_tanh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_tanh", self).to(Tensor)
template u_tanh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_tanh", self).to(Tensor)
template u_tanh_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("_tanh_forward_out", output, self).to(Tensor)
template u_tanh_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::_tanh_forward_out", output, self).to(Tensor)
template u_tanh_forward*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_tanh_forward", self).to(Tensor)
template u_tanh_forward*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_tanh_forward", self).to(Tensor)
template u_tanh_backward_out*(ty: TensorType; grad_input: var Tensor, grad_output: var Tensor, output: var Tensor): Tensor = ty.dynamicCppCall("_tanh_backward_out", grad_input, grad_output, output).to(Tensor)
template u_tanh_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_output: var Tensor, output: var Tensor): Tensor = dynamicCCall("at::_tanh_backward_out", grad_input, grad_output, output).to(Tensor)
template u_tanh_backward*(ty: TensorType; grad_output: var Tensor, output: var Tensor): Tensor = ty.dynamicCppCall("_tanh_backward", grad_output, output).to(Tensor)
template u_tanh_backward*(_: typedesc[torch]; grad_output: var Tensor, output: var Tensor): Tensor = dynamicCCall("at::_tanh_backward", grad_output, output).to(Tensor)
template thnn_batch_norm_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): Tensor = ty.dynamicCppCall("thnn_batch_norm_out", output, self, weight, bias, running_mean, running_var, training, momentum, eps).to(Tensor)
template thnn_batch_norm_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): Tensor = dynamicCCall("at::thnn_batch_norm_out", output, self, weight, bias, running_mean, running_var, training, momentum, eps).to(Tensor)
template thnn_batch_norm*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): Tensor = ty.dynamicCppCall("thnn_batch_norm", self, weight, bias, running_mean, running_var, training, momentum, eps).to(Tensor)
template thnn_batch_norm*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): Tensor = dynamicCCall("at::thnn_batch_norm", self, weight, bias, running_mean, running_var, training, momentum, eps).to(Tensor)
template thnn_batch_norm_forward_out*(ty: TensorType; output: var Tensor, save_mean: var Tensor, save_std: var Tensor, self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_batch_norm_forward_out", output, save_mean, save_std, self, weight, bias, running_mean, running_var, training, momentum, eps).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_forward_out*(_: typedesc[torch]; output: var Tensor, save_mean: var Tensor, save_std: var Tensor, self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_batch_norm_forward_out", output, save_mean, save_std, self, weight, bias, running_mean, running_var, training, momentum, eps).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_batch_norm_forward", self, weight, bias, running_mean, running_var, training, momentum, eps).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_batch_norm_forward", self, weight, bias, running_mean, running_var, training, momentum, eps).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, eps: float64, save_mean: var Tensor, save_std: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_batch_norm_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, running_mean, running_var, training, eps, save_mean, save_std).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, eps: float64, save_mean: var Tensor, save_std: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_batch_norm_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, running_mean, running_var, training, eps, save_mean, save_std).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, eps: float64, save_mean: var Tensor, save_std: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_batch_norm_backward", grad_output, self, weight, running_mean, running_var, training, eps, save_mean, save_std, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_batch_norm_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, eps: float64, save_mean: var Tensor, save_std: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_batch_norm_backward", grad_output, self, weight, running_mean, running_var, training, eps, save_mean, save_std, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_transpose2d_out", output, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_transpose2d_out", output, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose2d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_transpose2d", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose2d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_transpose2d", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose2d_forward_out*(ty: TensorType; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose2d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_forward_out*(_: typedesc[torch]; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose2d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose2d_forward", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose2d_forward", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose2d_backward", grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose2d_backward", grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_transpose3d_out", output, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_transpose3d_out", output, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose3d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_transpose3d", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose3d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_transpose3d", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(Tensor)
template thnn_conv_transpose3d_forward_out*(ty: TensorType; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose3d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_forward_out*(_: typedesc[torch]; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose3d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose3d_forward", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose3d_forward", self, weight, kernel_size, bias, stride, padding, output_padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_transpose3d_backward", grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_transpose3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, output_padding: IntList, dilation: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_transpose3d_backward", grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("thnn_conv2d_out", output, self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::thnn_conv2d_out", output, self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv2d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("thnn_conv2d", self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv2d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::thnn_conv2d", self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv2d_forward_out*(ty: TensorType; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv2d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_forward_out*(_: typedesc[torch]; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv2d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv2d_forward", self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv2d_forward", self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv2d_backward", grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv2d_backward", grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_depthwise2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_depthwise2d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_depthwise2d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_depthwise2d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_depthwise2d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_forward_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_depthwise2d_forward_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_forward_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_depthwise2d_forward_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_depthwise2d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_depthwise2d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_depthwise2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_depthwise2d_backward_out", grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template thnn_conv_depthwise2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor) = dynamicCCall("at::thnn_conv_depthwise2d_backward_out", grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template thnn_conv_depthwise2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, output_mask: StdArray[bool, 2]): (Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_depthwise2d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template thnn_conv_depthwise2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, output_mask: StdArray[bool, 2]): (Tensor, Tensor) = dynamicCCall("at::thnn_conv_depthwise2d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template thnn_conv3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("thnn_conv3d_out", output, self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::thnn_conv3d_out", output, self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv3d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = ty.dynamicCppCall("thnn_conv3d", self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv3d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): Tensor = dynamicCCall("at::thnn_conv3d", self, weight, kernel_size, bias, stride, padding).to(Tensor)
template thnn_conv3d_forward_out*(ty: TensorType; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv3d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_forward_out*(_: typedesc[torch]; output: var Tensor, finput: var Tensor, fgrad_input: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv3d_forward_out", output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv3d_forward", self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv3d_forward", self, weight, kernel_size, bias, stride, padding).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv3d_backward", grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, finput: var Tensor, fgrad_input: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv3d_backward", grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_dilated2d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated2d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_dilated2d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated2d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_dilated2d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated2d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_dilated2d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated2d_forward_out*(ty: TensorType; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated2d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_forward_out*(_: typedesc[torch]; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated2d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated2d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated2d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated2d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated2d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated2d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated2d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_out*(ty: TensorType; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_dilated3d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated3d_out*(_: typedesc[torch]; output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_dilated3d_out", output, self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated3d*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = ty.dynamicCppCall("thnn_conv_dilated3d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated3d*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): Tensor = dynamicCCall("at::thnn_conv_dilated3d", self, weight, kernel_size, bias, stride, padding, dilation).to(Tensor)
template thnn_conv_dilated3d_forward_out*(ty: TensorType; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated3d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_forward_out*(_: typedesc[torch]; output: var Tensor, columns: var Tensor, ones: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated3d_forward_out", output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_forward*(ty: TensorType; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated3d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_forward*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, kernel_size: IntList, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated3d_forward", self, weight, kernel_size, bias, stride, padding, dilation).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_backward_out*(ty: TensorType; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_backward_out*(_: typedesc[torch]; grad_input: var Tensor, grad_weight: var Tensor, grad_bias: var Tensor, grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated3d_backward_out", grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_backward*(ty: TensorType; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("thnn_conv_dilated3d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template thnn_conv_dilated3d_backward*(_: typedesc[torch]; grad_output: var Tensor, self: var Tensor, weight: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList, dilation: IntList, columns: var Tensor, ones: var Tensor, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::thnn_conv_dilated3d_backward", grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template u_cast_Byte*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Byte", non_blocking).to(Tensor)
template u_cast_Byte*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Byte", self, non_blocking).to(Tensor)
template u_cast_Byte*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Byte", self, non_blocking).to(Tensor)
template u_cast_Char*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Char", non_blocking).to(Tensor)
template u_cast_Char*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Char", self, non_blocking).to(Tensor)
template u_cast_Char*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Char", self, non_blocking).to(Tensor)
template u_cast_Double*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Double", non_blocking).to(Tensor)
template u_cast_Double*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Double", self, non_blocking).to(Tensor)
template u_cast_Double*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Double", self, non_blocking).to(Tensor)
template u_cast_Float*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Float", non_blocking).to(Tensor)
template u_cast_Float*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Float", self, non_blocking).to(Tensor)
template u_cast_Float*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Float", self, non_blocking).to(Tensor)
template u_cast_Int*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Int", non_blocking).to(Tensor)
template u_cast_Int*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Int", self, non_blocking).to(Tensor)
template u_cast_Int*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Int", self, non_blocking).to(Tensor)
template u_cast_Long*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Long", non_blocking).to(Tensor)
template u_cast_Long*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Long", self, non_blocking).to(Tensor)
template u_cast_Long*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Long", self, non_blocking).to(Tensor)
template u_cast_Short*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Short", non_blocking).to(Tensor)
template u_cast_Short*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Short", self, non_blocking).to(Tensor)
template u_cast_Short*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Short", self, non_blocking).to(Tensor)
template u_cast_Half*(self: Tensor, non_blocking: bool = false): Tensor = self.dynamicCppCall("_cast_Half", non_blocking).to(Tensor)
template u_cast_Half*(ty: TensorType; self: var Tensor, non_blocking: bool = false): Tensor = ty.dynamicCppCall("_cast_Half", self, non_blocking).to(Tensor)
template u_cast_Half*(_: typedesc[torch]; self: var Tensor, non_blocking: bool = false): Tensor = dynamicCCall("at::_cast_Half", self, non_blocking).to(Tensor)
template u_cudnn_ctc_loss*(ty: TensorType; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64, deterministic: bool): (Tensor, Tensor) = ty.dynamicCppCall("_cudnn_ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, deterministic).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_cudnn_ctc_loss*(_: typedesc[torch]; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64, deterministic: bool): (Tensor, Tensor) = dynamicCCall("at::_cudnn_ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, deterministic).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_cudnn_rnn_flatten_weight*(ty: TensorType; weight_arr: TensorList, weight_stride0: int64, input_size: int64, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, bidirectional: bool): Tensor = ty.dynamicCppCall("_cudnn_rnn_flatten_weight", weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional).to(Tensor)
template u_cudnn_rnn_flatten_weight*(_: typedesc[torch]; weight_arr: TensorList, weight_stride0: int64, input_size: int64, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, bidirectional: bool): Tensor = dynamicCCall("at::_cudnn_rnn_flatten_weight", weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional).to(Tensor)
template u_cudnn_rnn*(ty: TensorType; input: var Tensor, weight: TensorList, weight_stride0: int64, weight_buf: var Tensor, hx: var Tensor, cx: var Tensor, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, dropout: float64, train: bool, bidirectional: bool, batch_sizes: IntList, dropout_state: var Tensor): (Tensor, Tensor, Tensor, Tensor, Tensor) = ty.dynamicCppCall("_cudnn_rnn", input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state).to(StdTuple5[Tensor, Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template u_cudnn_rnn*(_: typedesc[torch]; input: var Tensor, weight: TensorList, weight_stride0: int64, weight_buf: var Tensor, hx: var Tensor, cx: var Tensor, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, dropout: float64, train: bool, bidirectional: bool, batch_sizes: IntList, dropout_state: var Tensor): (Tensor, Tensor, Tensor, Tensor, Tensor) = dynamicCCall("at::_cudnn_rnn", input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state).to(StdTuple5[Tensor, Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template u_cudnn_rnn_backward*(ty: TensorType; input: var Tensor, weight: TensorList, weight_stride0: int64, weight_buf: var Tensor, hx: var Tensor, cx: var Tensor, output: var Tensor, grad_output: var Tensor, grad_hy: var Tensor, grad_cy: var Tensor, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, dropout: float64, train: bool, bidirectional: bool, batch_sizes: IntList, dropout_state: var Tensor, reserve: var Tensor, output_mask: StdArray[bool, 4]): (Tensor, Tensor, Tensor, TensorList) = ty.dynamicCppCall("_cudnn_rnn_backward", input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask).to(StdTuple4[Tensor, Tensor, Tensor, TensorList]).toNimTuple()
template u_cudnn_rnn_backward*(_: typedesc[torch]; input: var Tensor, weight: TensorList, weight_stride0: int64, weight_buf: var Tensor, hx: var Tensor, cx: var Tensor, output: var Tensor, grad_output: var Tensor, grad_hy: var Tensor, grad_cy: var Tensor, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, dropout: float64, train: bool, bidirectional: bool, batch_sizes: IntList, dropout_state: var Tensor, reserve: var Tensor, output_mask: StdArray[bool, 4]): (Tensor, Tensor, Tensor, TensorList) = dynamicCCall("at::_cudnn_rnn_backward", input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask).to(StdTuple4[Tensor, Tensor, Tensor, TensorList]).toNimTuple()
template u_cudnn_init_dropout_state*(ty: TensorType; self_ty: var TensorType, dropout: float64, train: bool, dropout_seed: int64): Tensor = ty.dynamicCppCall("_cudnn_init_dropout_state", self_ty, dropout, train, dropout_seed).to(Tensor)
template u_cudnn_init_dropout_state*(_: typedesc[torch]; self_ty: var TensorType, dropout: float64, train: bool, dropout_seed: int64): Tensor = dynamicCCall("at::_cudnn_init_dropout_state", self_ty, dropout, train, dropout_seed).to(Tensor)
template abs*(self: Tensor): Tensor = self.dynamicCppCall("abs").to(Tensor)
template abs*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("abs", self).to(Tensor)
template abs*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::abs", self).to(Tensor)
template abs_u*(self: Tensor): Tensor = self.dynamicCppCall("abs_").to(Tensor)
template abs_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("abs_", self).to(Tensor)
template abs_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::abs_", self).to(Tensor)
template abs_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("abs_out", aresult, self).to(Tensor)
template abs_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::abs_out", aresult, self).to(Tensor)
template acos*(self: Tensor): Tensor = self.dynamicCppCall("acos").to(Tensor)
template acos*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("acos", self).to(Tensor)
template acos*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::acos", self).to(Tensor)
template acos_u*(self: Tensor): Tensor = self.dynamicCppCall("acos_").to(Tensor)
template acos_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("acos_", self).to(Tensor)
template acos_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::acos_", self).to(Tensor)
template acos_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("acos_out", aresult, self).to(Tensor)
template acos_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::acos_out", aresult, self).to(Tensor)
template avg_pool1d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], ceil_mode: bool = false, count_include_pad: bool = true): Tensor = ty.dynamicCppCall("avg_pool1d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template avg_pool1d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], ceil_mode: bool = false, count_include_pad: bool = true): Tensor = dynamicCCall("at::avg_pool1d", self, kernel_size, stride, padding, ceil_mode, count_include_pad).to(Tensor)
template adaptive_avg_pool1d*(ty: TensorType; self: var Tensor, output_size: IntList): Tensor = ty.dynamicCppCall("adaptive_avg_pool1d", self, output_size).to(Tensor)
template adaptive_avg_pool1d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): Tensor = dynamicCCall("at::adaptive_avg_pool1d", self, output_size).to(Tensor)
template adaptive_max_pool1d*(ty: TensorType; self: var Tensor, output_size: IntList): (Tensor, Tensor) = ty.dynamicCppCall("adaptive_max_pool1d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template adaptive_max_pool1d*(_: typedesc[torch]; self: var Tensor, output_size: IntList): (Tensor, Tensor) = dynamicCCall("at::adaptive_max_pool1d", self, output_size).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template add*(self: Tensor, other: var Tensor, alpha: float = 1): Tensor = self.dynamicCppCall("add", other, alpha).to(Tensor)
template add*(ty: TensorType; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("add", self, other, alpha).to(Tensor)
template add*(_: typedesc[torch]; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = dynamicCCall("at::add", self, other, alpha).to(Tensor)
template add_u*(self: Tensor, other: var Tensor, alpha: float = 1): Tensor = self.dynamicCppCall("add_", other, alpha).to(Tensor)
template add_u*(ty: TensorType; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("add_", self, other, alpha).to(Tensor)
template add_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("add_out", aresult, self, other, alpha).to(Tensor)
template add_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = dynamicCCall("at::add_out", aresult, self, other, alpha).to(Tensor)
template add*(self: Tensor, other: float, alpha: float = 1): Tensor = self.dynamicCppCall("add", other, alpha).to(Tensor)
template add*(ty: TensorType; self: var Tensor, other: float, alpha: float = 1): Tensor = ty.dynamicCppCall("add", self, other, alpha).to(Tensor)
template add*(_: typedesc[torch]; self: var Tensor, other: float, alpha: float = 1): Tensor = dynamicCCall("at::add", self, other, alpha).to(Tensor)
template add_u*(self: Tensor, other: float, alpha: float = 1): Tensor = self.dynamicCppCall("add_", other, alpha).to(Tensor)
template add_u*(ty: TensorType; self: var Tensor, other: float, alpha: float = 1): Tensor = ty.dynamicCppCall("add_", self, other, alpha).to(Tensor)
template addmv*(self: Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addmv", mat, vec, beta, alpha).to(Tensor)
template addmv*(ty: TensorType; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmv", self, mat, vec, beta, alpha).to(Tensor)
template addmv*(_: typedesc[torch]; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addmv", self, mat, vec, beta, alpha).to(Tensor)
template addmv_u*(self: Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addmv_", mat, vec, beta, alpha).to(Tensor)
template addmv_u*(ty: TensorType; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmv_", self, mat, vec, beta, alpha).to(Tensor)
template addmv_u*(_: typedesc[torch]; self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addmv_", self, mat, vec, beta, alpha).to(Tensor)
template addmv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmv_out", aresult, self, mat, vec, beta, alpha).to(Tensor)
template addmv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat: var Tensor, vec: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addmv_out", aresult, self, mat, vec, beta, alpha).to(Tensor)
template addr*(self: Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addr", vec1, vec2, beta, alpha).to(Tensor)
template addr*(ty: TensorType; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addr", self, vec1, vec2, beta, alpha).to(Tensor)
template addr*(_: typedesc[torch]; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addr", self, vec1, vec2, beta, alpha).to(Tensor)
template addr_u*(self: Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addr_", vec1, vec2, beta, alpha).to(Tensor)
template addr_u*(ty: TensorType; self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addr_", self, vec1, vec2, beta, alpha).to(Tensor)
template addr_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addr_out", aresult, self, vec1, vec2, beta, alpha).to(Tensor)
template addr_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec1: var Tensor, vec2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addr_out", aresult, self, vec1, vec2, beta, alpha).to(Tensor)
template all*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("all", dim, keepdim).to(Tensor)
template all*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("all", self, dim, keepdim).to(Tensor)
template all*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::all", self, dim, keepdim).to(Tensor)
template all_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("all_out", aresult, self, dim, keepdim).to(Tensor)
template all_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::all_out", aresult, self, dim, keepdim).to(Tensor)
template allclose*(self: Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): bool = self.dynamicCppCall("allclose", other, rtol, atol, equal_nan).to(bool)
template allclose*(ty: TensorType; self: var Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): bool = ty.dynamicCppCall("allclose", self, other, rtol, atol, equal_nan).to(bool)
template allclose*(_: typedesc[torch]; self: var Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): bool = dynamicCCall("at::allclose", self, other, rtol, atol, equal_nan).to(bool)
template any*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("any", dim, keepdim).to(Tensor)
template any*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("any", self, dim, keepdim).to(Tensor)
template any*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::any", self, dim, keepdim).to(Tensor)
template any_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("any_out", aresult, self, dim, keepdim).to(Tensor)
template any_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::any_out", aresult, self, dim, keepdim).to(Tensor)
template arange*(ty: TensorType; start: float, aend: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("arange", start, aend, options).to(Tensor)
template arange*(_: typedesc[torch]; start: float, aend: float, options: var ATensorOptions): Tensor = dynamicCCall("at::arange", start, aend, options).to(Tensor)
template arange*(ty: TensorType; start: float, aend: float, step: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("arange", start, aend, step, options).to(Tensor)
template arange*(_: typedesc[torch]; start: float, aend: float, step: float, options: var ATensorOptions): Tensor = dynamicCCall("at::arange", start, aend, step, options).to(Tensor)
template arange_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float): Tensor = ty.dynamicCppCall("arange_out", aresult, start, aend).to(Tensor)
template arange_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float): Tensor = dynamicCCall("at::arange_out", aresult, start, aend).to(Tensor)
template arange_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, step: float): Tensor = ty.dynamicCppCall("arange_out", aresult, start, aend, step).to(Tensor)
template arange_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, step: float): Tensor = dynamicCCall("at::arange_out", aresult, start, aend, step).to(Tensor)
template arange*(ty: TensorType; aend: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("arange", aend, options).to(Tensor)
template arange*(_: typedesc[torch]; aend: float, options: var ATensorOptions): Tensor = dynamicCCall("at::arange", aend, options).to(Tensor)
template arange_out*(ty: TensorType; aresult: var Tensor, aend: float): Tensor = ty.dynamicCppCall("arange_out", aresult, aend).to(Tensor)
template arange_out*(_: typedesc[torch]; aresult: var Tensor, aend: float): Tensor = dynamicCCall("at::arange_out", aresult, aend).to(Tensor)
template arange*(ty: TensorType; dtype: var TensorType, start: float, aend: float, step: float = 1): Tensor {.deprecated.} = ty.dynamicCppCall("arange", dtype, start, aend, step).to(Tensor)
template arange*(_: typedesc[torch]; dtype: var TensorType, start: float, aend: float, step: float = 1): Tensor {.deprecated.} = dynamicCCall("at::arange", dtype, start, aend, step).to(Tensor)
template arange*(ty: TensorType; dtype: var TensorType, aend: float): Tensor {.deprecated.} = ty.dynamicCppCall("arange", dtype, aend).to(Tensor)
template arange*(_: typedesc[torch]; dtype: var TensorType, aend: float): Tensor {.deprecated.} = dynamicCCall("at::arange", dtype, aend).to(Tensor)
template u_dim_arange*(ty: TensorType; like: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("_dim_arange", like, dim).to(Tensor)
template u_dim_arange*(_: typedesc[torch]; like: var Tensor, dim: int64): Tensor = dynamicCCall("at::_dim_arange", like, dim).to(Tensor)
template argmax*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("argmax", dim, keepdim).to(Tensor)
template argmax*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("argmax", self, dim, keepdim).to(Tensor)
template argmax*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::argmax", self, dim, keepdim).to(Tensor)
template argmax*(self: Tensor): Tensor = self.dynamicCppCall("argmax").to(Tensor)
template argmax*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("argmax", self).to(Tensor)
template argmax*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::argmax", self).to(Tensor)
template u_argmax*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_argmax", dim, keepdim).to(Tensor)
template u_argmax*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_argmax", self, dim, keepdim).to(Tensor)
template u_argmax*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_argmax", self, dim, keepdim).to(Tensor)
template argmin*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("argmin", dim, keepdim).to(Tensor)
template argmin*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("argmin", self, dim, keepdim).to(Tensor)
template argmin*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::argmin", self, dim, keepdim).to(Tensor)
template argmin*(self: Tensor): Tensor = self.dynamicCppCall("argmin").to(Tensor)
template argmin*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("argmin", self).to(Tensor)
template argmin*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::argmin", self).to(Tensor)
template u_argmin*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_argmin", dim, keepdim).to(Tensor)
template u_argmin*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_argmin", self, dim, keepdim).to(Tensor)
template u_argmin*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_argmin", self, dim, keepdim).to(Tensor)
template as_strided*(self: Tensor, size: IntList, stride: IntList): Tensor = self.dynamicCppCall("as_strided", size, stride).to(Tensor)
template as_strided*(ty: TensorType; self: var Tensor, size: IntList, stride: IntList): Tensor = ty.dynamicCppCall("as_strided", self, size, stride).to(Tensor)
template as_strided*(_: typedesc[torch]; self: var Tensor, size: IntList, stride: IntList): Tensor = dynamicCCall("at::as_strided", self, size, stride).to(Tensor)
template as_strided_u*(self: Tensor, size: IntList, stride: IntList): Tensor = self.dynamicCppCall("as_strided_", size, stride).to(Tensor)
template as_strided_u*(ty: TensorType; self: var Tensor, size: IntList, stride: IntList): Tensor = ty.dynamicCppCall("as_strided_", self, size, stride).to(Tensor)
template as_strided_u*(_: typedesc[torch]; self: var Tensor, size: IntList, stride: IntList): Tensor = dynamicCCall("at::as_strided_", self, size, stride).to(Tensor)
template as_strided*(self: Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = self.dynamicCppCall("as_strided", size, stride, storage_offset).to(Tensor)
template as_strided*(ty: TensorType; self: var Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = ty.dynamicCppCall("as_strided", self, size, stride, storage_offset).to(Tensor)
template as_strided*(_: typedesc[torch]; self: var Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = dynamicCCall("at::as_strided", self, size, stride, storage_offset).to(Tensor)
template as_strided_u*(self: Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = self.dynamicCppCall("as_strided_", size, stride, storage_offset).to(Tensor)
template as_strided_u*(ty: TensorType; self: var Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = ty.dynamicCppCall("as_strided_", self, size, stride, storage_offset).to(Tensor)
template as_strided_u*(_: typedesc[torch]; self: var Tensor, size: IntList, stride: IntList, storage_offset: int64): Tensor = dynamicCCall("at::as_strided_", self, size, stride, storage_offset).to(Tensor)
template asin*(self: Tensor): Tensor = self.dynamicCppCall("asin").to(Tensor)
template asin*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("asin", self).to(Tensor)
template asin*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::asin", self).to(Tensor)
template asin_u*(self: Tensor): Tensor = self.dynamicCppCall("asin_").to(Tensor)
template asin_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("asin_", self).to(Tensor)
template asin_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::asin_", self).to(Tensor)
template asin_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("asin_out", aresult, self).to(Tensor)
template asin_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::asin_out", aresult, self).to(Tensor)
template atan*(self: Tensor): Tensor = self.dynamicCppCall("atan").to(Tensor)
template atan*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("atan", self).to(Tensor)
template atan*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::atan", self).to(Tensor)
template atan_u*(self: Tensor): Tensor = self.dynamicCppCall("atan_").to(Tensor)
template atan_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("atan_", self).to(Tensor)
template atan_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::atan_", self).to(Tensor)
template atan_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("atan_out", aresult, self).to(Tensor)
template atan_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::atan_out", aresult, self).to(Tensor)
template bartlett_window*(ty: TensorType; window_length: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("bartlett_window", window_length, options).to(Tensor)
template bartlett_window*(_: typedesc[torch]; window_length: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::bartlett_window", window_length, options).to(Tensor)
template bartlett_window*(ty: TensorType; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = ty.dynamicCppCall("bartlett_window", window_length, periodic, options).to(Tensor)
template bartlett_window*(_: typedesc[torch]; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = dynamicCCall("at::bartlett_window", window_length, periodic, options).to(Tensor)
template batch_norm*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64, cudnn_enabled: bool): Tensor = ty.dynamicCppCall("batch_norm", input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled).to(Tensor)
template batch_norm*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, momentum: float64, eps: float64, cudnn_enabled: bool): Tensor = dynamicCCall("at::batch_norm", input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled).to(Tensor)
template bernoulli*(self: Tensor, p: var Tensor, generator: pointer = nil): Tensor = self.dynamicCppCall("bernoulli", p, generator).to(Tensor)
template bernoulli*(ty: TensorType; self: var Tensor, p: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("bernoulli", self, p, generator).to(Tensor)
template bernoulli*(_: typedesc[torch]; self: var Tensor, p: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::bernoulli", self, p, generator).to(Tensor)
template bernoulli*(self: Tensor, p: float64, generator: pointer = nil): Tensor = self.dynamicCppCall("bernoulli", p, generator).to(Tensor)
template bernoulli*(ty: TensorType; self: var Tensor, p: float64, generator: pointer = nil): Tensor = ty.dynamicCppCall("bernoulli", self, p, generator).to(Tensor)
template bernoulli*(_: typedesc[torch]; self: var Tensor, p: float64, generator: pointer = nil): Tensor = dynamicCCall("at::bernoulli", self, p, generator).to(Tensor)
template bernoulli*(self: Tensor): Tensor = self.dynamicCppCall("bernoulli").to(Tensor)
template bernoulli*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("bernoulli", self).to(Tensor)
template bernoulli*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::bernoulli", self).to(Tensor)
template bernoulli_u*(self: Tensor, p: var Tensor, generator: pointer = nil): Tensor = self.dynamicCppCall("bernoulli_", p, generator).to(Tensor)
template bernoulli_u*(ty: TensorType; self: var Tensor, p: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("bernoulli_", self, p, generator).to(Tensor)
template bernoulli_u*(_: typedesc[torch]; self: var Tensor, p: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::bernoulli_", self, p, generator).to(Tensor)
template bernoulli_u*(self: Tensor, p: float64, generator: pointer = nil): Tensor = self.dynamicCppCall("bernoulli_", p, generator).to(Tensor)
template bernoulli_u*(ty: TensorType; self: var Tensor, p: float64, generator: pointer = nil): Tensor = ty.dynamicCppCall("bernoulli_", self, p, generator).to(Tensor)
template bernoulli_u*(_: typedesc[torch]; self: var Tensor, p: float64, generator: pointer = nil): Tensor = dynamicCCall("at::bernoulli_", self, p, generator).to(Tensor)
template bernoulli_u*(self: Tensor): Tensor = self.dynamicCppCall("bernoulli_").to(Tensor)
template bernoulli_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("bernoulli_", self).to(Tensor)
template bernoulli_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::bernoulli_", self).to(Tensor)
template bilinear*(ty: TensorType; input1: var Tensor, input2: var Tensor, weight: var Tensor, bias: var Tensor): Tensor = ty.dynamicCppCall("bilinear", input1, input2, weight, bias).to(Tensor)
template bilinear*(_: typedesc[torch]; input1: var Tensor, input2: var Tensor, weight: var Tensor, bias: var Tensor): Tensor = dynamicCCall("at::bilinear", input1, input2, weight, bias).to(Tensor)
template bincount*(self: Tensor, weights: var Tensor, minlength: int64 = 0): Tensor = self.dynamicCppCall("bincount", weights, minlength).to(Tensor)
template bincount*(ty: TensorType; self: var Tensor, weights: var Tensor, minlength: int64 = 0): Tensor = ty.dynamicCppCall("bincount", self, weights, minlength).to(Tensor)
template bincount*(_: typedesc[torch]; self: var Tensor, weights: var Tensor, minlength: int64 = 0): Tensor = dynamicCCall("at::bincount", self, weights, minlength).to(Tensor)
template blackman_window*(ty: TensorType; window_length: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("blackman_window", window_length, options).to(Tensor)
template blackman_window*(_: typedesc[torch]; window_length: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::blackman_window", window_length, options).to(Tensor)
template blackman_window*(ty: TensorType; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = ty.dynamicCppCall("blackman_window", window_length, periodic, options).to(Tensor)
template blackman_window*(_: typedesc[torch]; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = dynamicCCall("at::blackman_window", window_length, periodic, options).to(Tensor)
template broadcast_tensors*(ty: TensorType; tensors: TensorList): TensorList = ty.dynamicCppCall("broadcast_tensors", tensors).to(TensorList)
template broadcast_tensors*(_: typedesc[torch]; tensors: TensorList): TensorList = dynamicCCall("at::broadcast_tensors", tensors).to(TensorList)
template cat*(ty: TensorType; tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("cat", tensors, dim).to(Tensor)
template cat*(_: typedesc[torch]; tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::cat", tensors, dim).to(Tensor)
template cat_out*(ty: TensorType; aresult: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("cat_out", aresult, tensors, dim).to(Tensor)
template cat_out*(_: typedesc[torch]; aresult: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::cat_out", aresult, tensors, dim).to(Tensor)
template ceil*(self: Tensor): Tensor = self.dynamicCppCall("ceil").to(Tensor)
template ceil*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("ceil", self).to(Tensor)
template ceil*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::ceil", self).to(Tensor)
template ceil_u*(self: Tensor): Tensor = self.dynamicCppCall("ceil_").to(Tensor)
template ceil_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("ceil_", self).to(Tensor)
template ceil_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::ceil_", self).to(Tensor)
template ceil_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("ceil_out", aresult, self).to(Tensor)
template ceil_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::ceil_out", aresult, self).to(Tensor)
template chunk*(self: Tensor, chunks: int64, dim: int64 = 0): TensorList = self.dynamicCppCall("chunk", chunks, dim).to(TensorList)
template chunk*(ty: TensorType; self: var Tensor, chunks: int64, dim: int64 = 0): TensorList = ty.dynamicCppCall("chunk", self, chunks, dim).to(TensorList)
template chunk*(_: typedesc[torch]; self: var Tensor, chunks: int64, dim: int64 = 0): TensorList = dynamicCCall("at::chunk", self, chunks, dim).to(TensorList)
template clamp*(self: Tensor, min: float, max: float): Tensor = self.dynamicCppCall("clamp", min, max).to(Tensor)
template clamp*(ty: TensorType; self: var Tensor, min: float, max: float): Tensor = ty.dynamicCppCall("clamp", self, min, max).to(Tensor)
template clamp*(_: typedesc[torch]; self: var Tensor, min: float, max: float): Tensor = dynamicCCall("at::clamp", self, min, max).to(Tensor)
template clamp_u*(self: Tensor, min: float, max: float): Tensor = self.dynamicCppCall("clamp_", min, max).to(Tensor)
template clamp_u*(ty: TensorType; self: var Tensor, min: float, max: float): Tensor = ty.dynamicCppCall("clamp_", self, min, max).to(Tensor)
template clamp_u*(_: typedesc[torch]; self: var Tensor, min: float, max: float): Tensor = dynamicCCall("at::clamp_", self, min, max).to(Tensor)
template clamp_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, min: float, max: float): Tensor = ty.dynamicCppCall("clamp_out", aresult, self, min, max).to(Tensor)
template clamp_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, min: float, max: float): Tensor = dynamicCCall("at::clamp_out", aresult, self, min, max).to(Tensor)
template clamp_max*(self: Tensor, max: float): Tensor = self.dynamicCppCall("clamp_max", max).to(Tensor)
template clamp_max*(ty: TensorType; self: var Tensor, max: float): Tensor = ty.dynamicCppCall("clamp_max", self, max).to(Tensor)
template clamp_max*(_: typedesc[torch]; self: var Tensor, max: float): Tensor = dynamicCCall("at::clamp_max", self, max).to(Tensor)
template clamp_max_u*(self: Tensor, max: float): Tensor = self.dynamicCppCall("clamp_max_", max).to(Tensor)
template clamp_max_u*(ty: TensorType; self: var Tensor, max: float): Tensor = ty.dynamicCppCall("clamp_max_", self, max).to(Tensor)
template clamp_max_u*(_: typedesc[torch]; self: var Tensor, max: float): Tensor = dynamicCCall("at::clamp_max_", self, max).to(Tensor)
template clamp_max_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, max: float): Tensor = ty.dynamicCppCall("clamp_max_out", aresult, self, max).to(Tensor)
template clamp_max_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, max: float): Tensor = dynamicCCall("at::clamp_max_out", aresult, self, max).to(Tensor)
template clamp_min*(self: Tensor, min: float): Tensor = self.dynamicCppCall("clamp_min", min).to(Tensor)
template clamp_min*(ty: TensorType; self: var Tensor, min: float): Tensor = ty.dynamicCppCall("clamp_min", self, min).to(Tensor)
template clamp_min*(_: typedesc[torch]; self: var Tensor, min: float): Tensor = dynamicCCall("at::clamp_min", self, min).to(Tensor)
template clamp_min_u*(self: Tensor, min: float): Tensor = self.dynamicCppCall("clamp_min_", min).to(Tensor)
template clamp_min_u*(ty: TensorType; self: var Tensor, min: float): Tensor = ty.dynamicCppCall("clamp_min_", self, min).to(Tensor)
template clamp_min_u*(_: typedesc[torch]; self: var Tensor, min: float): Tensor = dynamicCCall("at::clamp_min_", self, min).to(Tensor)
template clamp_min_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, min: float): Tensor = ty.dynamicCppCall("clamp_min_out", aresult, self, min).to(Tensor)
template clamp_min_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, min: float): Tensor = dynamicCCall("at::clamp_min_out", aresult, self, min).to(Tensor)
template cudnn_is_acceptable*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("cudnn_is_acceptable", self).to(bool)
template cudnn_is_acceptable*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::cudnn_is_acceptable", self).to(bool)
template convolution*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64): Tensor = ty.dynamicCppCall("convolution", input, weight, bias, stride, padding, dilation, transposed, output_padding, groups).to(Tensor)
template convolution*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64): Tensor = dynamicCCall("at::convolution", input, weight, bias, stride, padding, dilation, transposed, output_padding, groups).to(Tensor)
template u_convolution*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64, benchmark: bool, deterministic: bool, cudnn_enabled: bool): Tensor = ty.dynamicCppCall("_convolution", input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled).to(Tensor)
template u_convolution*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64, benchmark: bool, deterministic: bool, cudnn_enabled: bool): Tensor = dynamicCCall("at::_convolution", input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled).to(Tensor)
template u_convolution_nogroup*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList): Tensor = ty.dynamicCppCall("_convolution_nogroup", input, weight, bias, stride, padding, dilation, transposed, output_padding).to(Tensor)
template u_convolution_nogroup*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList): Tensor = dynamicCCall("at::_convolution_nogroup", input, weight, bias, stride, padding, dilation, transposed, output_padding).to(Tensor)
template u_convolution_double_backward*(ty: TensorType; ggI: var Tensor, ggW: var Tensor, ggb: var Tensor, gO: var Tensor, weight: var Tensor, self: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64, benchmark: bool, deterministic: bool, cudnn_enabled: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("_convolution_double_backward", ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template u_convolution_double_backward*(_: typedesc[torch]; ggI: var Tensor, ggW: var Tensor, ggb: var Tensor, gO: var Tensor, weight: var Tensor, self: var Tensor, stride: IntList, padding: IntList, dilation: IntList, transposed: bool, output_padding: IntList, groups: int64, benchmark: bool, deterministic: bool, cudnn_enabled: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::_convolution_double_backward", ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template conv1d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = ty.dynamicCppCall("conv1d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv1d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = dynamicCCall("at::conv1d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv2d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = ty.dynamicCppCall("conv2d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv2d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = dynamicCCall("at::conv2d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv3d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = ty.dynamicCppCall("conv3d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv3d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], dilation: IntList = @[1], groups: int64 = 1): Tensor = dynamicCCall("at::conv3d", input, weight, bias, stride, padding, dilation, groups).to(Tensor)
template conv_tbc*(self: Tensor, weight: var Tensor, bias: var Tensor, pad: int64): Tensor = self.dynamicCppCall("conv_tbc", weight, bias, pad).to(Tensor)
template conv_tbc*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, pad: int64): Tensor = ty.dynamicCppCall("conv_tbc", self, weight, bias, pad).to(Tensor)
template conv_tbc*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, pad: int64): Tensor = dynamicCCall("at::conv_tbc", self, weight, bias, pad).to(Tensor)
template conv_tbc_backward*(self: Tensor, input: var Tensor, weight: var Tensor, bias: var Tensor, pad: int64): (Tensor, Tensor, Tensor) = self.dynamicCppCall("conv_tbc_backward", input, weight, bias, pad).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template conv_tbc_backward*(ty: TensorType; self: var Tensor, input: var Tensor, weight: var Tensor, bias: var Tensor, pad: int64): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("conv_tbc_backward", self, input, weight, bias, pad).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template conv_tbc_backward*(_: typedesc[torch]; self: var Tensor, input: var Tensor, weight: var Tensor, bias: var Tensor, pad: int64): (Tensor, Tensor, Tensor) = dynamicCCall("at::conv_tbc_backward", self, input, weight, bias, pad).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template conv_transpose1d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = ty.dynamicCppCall("conv_transpose1d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template conv_transpose1d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = dynamicCCall("at::conv_transpose1d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template conv_transpose2d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = ty.dynamicCppCall("conv_transpose2d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template conv_transpose2d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = dynamicCCall("at::conv_transpose2d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template conv_transpose3d*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = ty.dynamicCppCall("conv_transpose3d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template conv_transpose3d*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, stride: IntList = @[1], padding: IntList = @[0], output_padding: IntList = @[0], groups: int64 = 1, dilation: IntList = @[1]): Tensor = dynamicCCall("at::conv_transpose3d", input, weight, bias, stride, padding, output_padding, groups, dilation).to(Tensor)
template cos*(self: Tensor): Tensor = self.dynamicCppCall("cos").to(Tensor)
template cos*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("cos", self).to(Tensor)
template cos*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::cos", self).to(Tensor)
template cos_u*(self: Tensor): Tensor = self.dynamicCppCall("cos_").to(Tensor)
template cos_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("cos_", self).to(Tensor)
template cos_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::cos_", self).to(Tensor)
template cos_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("cos_out", aresult, self).to(Tensor)
template cos_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::cos_out", aresult, self).to(Tensor)
template cosh*(self: Tensor): Tensor = self.dynamicCppCall("cosh").to(Tensor)
template cosh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("cosh", self).to(Tensor)
template cosh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::cosh", self).to(Tensor)
template cosh_u*(self: Tensor): Tensor = self.dynamicCppCall("cosh_").to(Tensor)
template cosh_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("cosh_", self).to(Tensor)
template cosh_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::cosh_", self).to(Tensor)
template cosh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("cosh_out", aresult, self).to(Tensor)
template cosh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::cosh_out", aresult, self).to(Tensor)
template cosine_embedding_loss*(ty: TensorType; input1: var Tensor, input2: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = ty.dynamicCppCall("cosine_embedding_loss", input1, input2, target, margin, reduction).to(Tensor)
template cosine_embedding_loss*(_: typedesc[torch]; input1: var Tensor, input2: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = dynamicCCall("at::cosine_embedding_loss", input1, input2, target, margin, reduction).to(Tensor)
template cudnn_affine_grid_generator*(ty: TensorType; theta: var Tensor, N: int64, C: int64, H: int64, W: int64): Tensor = ty.dynamicCppCall("cudnn_affine_grid_generator", theta, N, C, H, W).to(Tensor)
template cudnn_affine_grid_generator*(_: typedesc[torch]; theta: var Tensor, N: int64, C: int64, H: int64, W: int64): Tensor = dynamicCCall("at::cudnn_affine_grid_generator", theta, N, C, H, W).to(Tensor)
template cudnn_affine_grid_generator_backward*(ty: TensorType; grad: var Tensor, N: int64, C: int64, H: int64, W: int64): Tensor = ty.dynamicCppCall("cudnn_affine_grid_generator_backward", grad, N, C, H, W).to(Tensor)
template cudnn_affine_grid_generator_backward*(_: typedesc[torch]; grad: var Tensor, N: int64, C: int64, H: int64, W: int64): Tensor = dynamicCCall("at::cudnn_affine_grid_generator_backward", grad, N, C, H, W).to(Tensor)
template cudnn_batch_norm*(ty: TensorType; input: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, exponential_average_factor: float64, epsilon: float64): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("cudnn_batch_norm", input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_batch_norm*(_: typedesc[torch]; input: var Tensor, weight: var Tensor, bias: var Tensor, running_mean: var Tensor, running_var: var Tensor, training: bool, exponential_average_factor: float64, epsilon: float64): (Tensor, Tensor, Tensor) = dynamicCCall("at::cudnn_batch_norm", input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_batch_norm_backward*(ty: TensorType; input: var Tensor, grad_output: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, save_mean: var Tensor, save_var: var Tensor, epsilon: float64): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("cudnn_batch_norm_backward", input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_batch_norm_backward*(_: typedesc[torch]; input: var Tensor, grad_output: var Tensor, weight: var Tensor, running_mean: var Tensor, running_var: var Tensor, save_mean: var Tensor, save_var: var Tensor, epsilon: float64): (Tensor, Tensor, Tensor) = dynamicCCall("at::cudnn_batch_norm_backward", input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_convolution*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution", self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution", self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_backward_input*(ty: TensorType; self_size: IntList, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution_backward_input", self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_backward_input*(_: typedesc[torch]; self_size: IntList, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution_backward_input", self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_backward*(ty: TensorType; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("cudnn_convolution_backward", self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_convolution_backward*(_: typedesc[torch]; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::cudnn_convolution_backward", self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_convolution_backward_bias*(ty: TensorType; grad_output: var Tensor): Tensor = ty.dynamicCppCall("cudnn_convolution_backward_bias", grad_output).to(Tensor)
template cudnn_convolution_backward_bias*(_: typedesc[torch]; grad_output: var Tensor): Tensor = dynamicCCall("at::cudnn_convolution_backward_bias", grad_output).to(Tensor)
template cudnn_convolution_backward_weight*(ty: TensorType; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution_backward_weight", weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_backward_weight*(_: typedesc[torch]; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution_backward_weight", weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, output_padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution_transpose", self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, output_padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution_transpose", self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose_backward*(ty: TensorType; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, output_padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("cudnn_convolution_transpose_backward", self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_convolution_transpose_backward*(_: typedesc[torch]; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, output_padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::cudnn_convolution_transpose_backward", self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template cudnn_convolution_transpose_backward_bias*(ty: TensorType; grad_output: var Tensor): Tensor = ty.dynamicCppCall("cudnn_convolution_transpose_backward_bias", grad_output).to(Tensor)
template cudnn_convolution_transpose_backward_bias*(_: typedesc[torch]; grad_output: var Tensor): Tensor = dynamicCCall("at::cudnn_convolution_transpose_backward_bias", grad_output).to(Tensor)
template cudnn_convolution_transpose_backward_input*(ty: TensorType; grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution_transpose_backward_input", grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose_backward_input*(_: typedesc[torch]; grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution_transpose_backward_input", grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose_backward_weight*(ty: TensorType; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = ty.dynamicCppCall("cudnn_convolution_transpose_backward_weight", weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_convolution_transpose_backward_weight*(_: typedesc[torch]; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, benchmark: bool, deterministic: bool): Tensor = dynamicCCall("at::cudnn_convolution_transpose_backward_weight", weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic).to(Tensor)
template cudnn_grid_sampler*(ty: TensorType; self: var Tensor, grid: var Tensor): Tensor = ty.dynamicCppCall("cudnn_grid_sampler", self, grid).to(Tensor)
template cudnn_grid_sampler*(_: typedesc[torch]; self: var Tensor, grid: var Tensor): Tensor = dynamicCCall("at::cudnn_grid_sampler", self, grid).to(Tensor)
template cudnn_grid_sampler_backward*(ty: TensorType; self: var Tensor, grid: var Tensor, grad_output: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("cudnn_grid_sampler_backward", self, grid, grad_output).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template cudnn_grid_sampler_backward*(_: typedesc[torch]; self: var Tensor, grid: var Tensor, grad_output: var Tensor): (Tensor, Tensor) = dynamicCCall("at::cudnn_grid_sampler_backward", self, grid, grad_output).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template cumsum*(self: Tensor, dim: int64, dtype: AScalarType): Tensor = self.dynamicCppCall("cumsum", dim, dtype).to(Tensor)
template cumsum*(ty: TensorType; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("cumsum", self, dim, dtype).to(Tensor)
template cumsum*(_: typedesc[torch]; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::cumsum", self, dim, dtype).to(Tensor)
template cumsum*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("cumsum", dim).to(Tensor)
template cumsum*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("cumsum", self, dim).to(Tensor)
template cumsum*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::cumsum", self, dim).to(Tensor)
template cumsum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("cumsum_out", aresult, self, dim, dtype).to(Tensor)
template cumsum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::cumsum_out", aresult, self, dim, dtype).to(Tensor)
template cumsum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("cumsum_out", aresult, self, dim).to(Tensor)
template cumsum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::cumsum_out", aresult, self, dim).to(Tensor)
template cumprod*(self: Tensor, dim: int64, dtype: AScalarType): Tensor = self.dynamicCppCall("cumprod", dim, dtype).to(Tensor)
template cumprod*(ty: TensorType; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("cumprod", self, dim, dtype).to(Tensor)
template cumprod*(_: typedesc[torch]; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::cumprod", self, dim, dtype).to(Tensor)
template cumprod*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("cumprod", dim).to(Tensor)
template cumprod*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("cumprod", self, dim).to(Tensor)
template cumprod*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::cumprod", self, dim).to(Tensor)
template cumprod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("cumprod_out", aresult, self, dim, dtype).to(Tensor)
template cumprod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::cumprod_out", aresult, self, dim, dtype).to(Tensor)
template cumprod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("cumprod_out", aresult, self, dim).to(Tensor)
template cumprod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64): Tensor = dynamicCCall("at::cumprod_out", aresult, self, dim).to(Tensor)
template ctc_loss*(ty: TensorType; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64 = 0, reduction: int64): Tensor = ty.dynamicCppCall("ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, reduction).to(Tensor)
template ctc_loss*(_: typedesc[torch]; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64 = 0, reduction: int64): Tensor = dynamicCCall("at::ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, reduction).to(Tensor)
template ctc_loss*(ty: TensorType; log_probs: var Tensor, targets: var Tensor, input_lengths: var Tensor, target_lengths: var Tensor, blank: int64 = 0, reduction: int64): Tensor = ty.dynamicCppCall("ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, reduction).to(Tensor)
template ctc_loss*(_: typedesc[torch]; log_probs: var Tensor, targets: var Tensor, input_lengths: var Tensor, target_lengths: var Tensor, blank: int64 = 0, reduction: int64): Tensor = dynamicCCall("at::ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, reduction).to(Tensor)
template u_ctc_loss*(ty: TensorType; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64 = 0): (Tensor, Tensor) = ty.dynamicCppCall("_ctc_loss", log_probs, targets, input_lengths, target_lengths, blank).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_ctc_loss*(_: typedesc[torch]; log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, blank: int64 = 0): (Tensor, Tensor) = dynamicCCall("at::_ctc_loss", log_probs, targets, input_lengths, target_lengths, blank).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_ctc_loss_backward*(ty: TensorType; grad: var Tensor, log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, neg_log_likelihood: var Tensor, log_alpha: var Tensor, blank: int64): Tensor = ty.dynamicCppCall("_ctc_loss_backward", grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank).to(Tensor)
template u_ctc_loss_backward*(_: typedesc[torch]; grad: var Tensor, log_probs: var Tensor, targets: var Tensor, input_lengths: IntList, target_lengths: IntList, neg_log_likelihood: var Tensor, log_alpha: var Tensor, blank: int64): Tensor = dynamicCCall("at::_ctc_loss_backward", grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank).to(Tensor)
template det*(self: Tensor): Tensor = self.dynamicCppCall("det").to(Tensor)
template det*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("det", self).to(Tensor)
template det*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::det", self).to(Tensor)
template diagflat*(ty: TensorType; self: var Tensor, offset: int64 = 0): Tensor = ty.dynamicCppCall("diagflat", self, offset).to(Tensor)
template diagflat*(_: typedesc[torch]; self: var Tensor, offset: int64 = 0): Tensor = dynamicCCall("at::diagflat", self, offset).to(Tensor)
template diagonal*(self: Tensor, offset: int64 = 0, dim1: int64 = 0, dim2: int64 = 1): Tensor = self.dynamicCppCall("diagonal", offset, dim1, dim2).to(Tensor)
template diagonal*(ty: TensorType; self: var Tensor, offset: int64 = 0, dim1: int64 = 0, dim2: int64 = 1): Tensor = ty.dynamicCppCall("diagonal", self, offset, dim1, dim2).to(Tensor)
template diagonal*(_: typedesc[torch]; self: var Tensor, offset: int64 = 0, dim1: int64 = 0, dim2: int64 = 1): Tensor = dynamicCCall("at::diagonal", self, offset, dim1, dim2).to(Tensor)
template adiv*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("div", other).to(Tensor)
template adiv*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("div", self, other).to(Tensor)
template adiv*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::div", self, other).to(Tensor)
template div_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("div_", other).to(Tensor)
template div_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("div_", self, other).to(Tensor)
template div_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("div_out", aresult, self, other).to(Tensor)
template div_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::div_out", aresult, self, other).to(Tensor)
template adiv*(self: Tensor, other: float): Tensor = self.dynamicCppCall("div", other).to(Tensor)
template adiv*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("div", self, other).to(Tensor)
template adiv*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::div", self, other).to(Tensor)
template div_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("div_", other).to(Tensor)
template div_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("div_", self, other).to(Tensor)
template dot*(self: Tensor, tensor: var Tensor): Tensor = self.dynamicCppCall("dot", tensor).to(Tensor)
template dot*(ty: TensorType; self: var Tensor, tensor: var Tensor): Tensor = ty.dynamicCppCall("dot", self, tensor).to(Tensor)
template dot*(_: typedesc[torch]; self: var Tensor, tensor: var Tensor): Tensor = dynamicCCall("at::dot", self, tensor).to(Tensor)
template dot_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, tensor: var Tensor): Tensor = ty.dynamicCppCall("dot_out", aresult, self, tensor).to(Tensor)
template dot_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, tensor: var Tensor): Tensor = dynamicCCall("at::dot_out", aresult, self, tensor).to(Tensor)
template einsum*(ty: TensorType; equation: StdString, tensors: TensorList): Tensor = ty.dynamicCppCall("einsum", equation, tensors).to(Tensor)
template einsum*(_: typedesc[torch]; equation: StdString, tensors: TensorList): Tensor = dynamicCCall("at::einsum", equation, tensors).to(Tensor)
template embedding*(ty: TensorType; weight: var Tensor, indices: var Tensor, padding_idx: int64 = -1, scale_grad_by_freq: bool = false, sparse: bool = false): Tensor = ty.dynamicCppCall("embedding", weight, indices, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
template embedding*(_: typedesc[torch]; weight: var Tensor, indices: var Tensor, padding_idx: int64 = -1, scale_grad_by_freq: bool = false, sparse: bool = false): Tensor = dynamicCCall("at::embedding", weight, indices, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
template embedding_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool, sparse: bool): Tensor = ty.dynamicCppCall("embedding_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
template embedding_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool, sparse: bool): Tensor = dynamicCCall("at::embedding_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
template embedding_dense_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor = ty.dynamicCppCall("embedding_dense_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
template embedding_dense_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor = dynamicCCall("at::embedding_dense_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
template embedding_renorm_u*(ty: TensorType; self: var Tensor, indices: var Tensor, max_norm: float64, norm_type: float64): Tensor = ty.dynamicCppCall("embedding_renorm_", self, indices, max_norm, norm_type).to(Tensor)
template embedding_renorm_u*(_: typedesc[torch]; self: var Tensor, indices: var Tensor, max_norm: float64, norm_type: float64): Tensor = dynamicCCall("at::embedding_renorm_", self, indices, max_norm, norm_type).to(Tensor)
template embedding_sparse_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor = ty.dynamicCppCall("embedding_sparse_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
template embedding_sparse_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor = dynamicCCall("at::embedding_sparse_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
template embedding_bag*(ty: TensorType; weight: var Tensor, indices: var Tensor, offsets: var Tensor, scale_grad_by_freq: bool = false, mode: int64 = 0, sparse: bool = false): (Tensor, Tensor, Tensor, Tensor) = ty.dynamicCppCall("embedding_bag", weight, indices, offsets, scale_grad_by_freq, mode, sparse).to(StdTuple4[Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template embedding_bag*(_: typedesc[torch]; weight: var Tensor, indices: var Tensor, offsets: var Tensor, scale_grad_by_freq: bool = false, mode: int64 = 0, sparse: bool = false): (Tensor, Tensor, Tensor, Tensor) = dynamicCCall("at::embedding_bag", weight, indices, offsets, scale_grad_by_freq, mode, sparse).to(StdTuple4[Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template u_embedding_bag*(ty: TensorType; weight: var Tensor, indices: var Tensor, offsets: var Tensor, scale_grad_by_freq: bool = false, mode: int64 = 0, sparse: bool = false): (Tensor, Tensor, Tensor, Tensor) = ty.dynamicCppCall("_embedding_bag", weight, indices, offsets, scale_grad_by_freq, mode, sparse).to(StdTuple4[Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template u_embedding_bag*(_: typedesc[torch]; weight: var Tensor, indices: var Tensor, offsets: var Tensor, scale_grad_by_freq: bool = false, mode: int64 = 0, sparse: bool = false): (Tensor, Tensor, Tensor, Tensor) = dynamicCCall("at::_embedding_bag", weight, indices, offsets, scale_grad_by_freq, mode, sparse).to(StdTuple4[Tensor, Tensor, Tensor, Tensor]).toNimTuple()
template u_embedding_bag_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, maximum_indices: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64, sparse: bool): Tensor = ty.dynamicCppCall("_embedding_bag_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse).to(Tensor)
template u_embedding_bag_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, maximum_indices: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64, sparse: bool): Tensor = dynamicCCall("at::_embedding_bag_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse).to(Tensor)
template u_embedding_bag_sparse_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor = ty.dynamicCppCall("_embedding_bag_sparse_backward", grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode).to(Tensor)
template u_embedding_bag_sparse_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor = dynamicCCall("at::_embedding_bag_sparse_backward", grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode).to(Tensor)
template u_embedding_bag_dense_backward*(ty: TensorType; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, maximum_indices: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor = ty.dynamicCppCall("_embedding_bag_dense_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode).to(Tensor)
template u_embedding_bag_dense_backward*(_: typedesc[torch]; grad: var Tensor, indices: var Tensor, offsets: var Tensor, offset2bag: var Tensor, bag_size: var Tensor, maximum_indices: var Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor = dynamicCCall("at::_embedding_bag_dense_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode).to(Tensor)
template empty*(ty: TensorType; size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("empty", size, options).to(Tensor)
template empty*(_: typedesc[torch]; size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::empty", size, options).to(Tensor)
template empty_out*(ty: TensorType; aresult: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("empty_out", aresult, size).to(Tensor)
template empty_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList): Tensor = dynamicCCall("at::empty_out", aresult, size).to(Tensor)
template empty_like*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("empty_like", self).to(Tensor)
template empty_like*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::empty_like", self).to(Tensor)
template empty_like*(ty: TensorType; self: var Tensor, options: var ATensorOptions): Tensor = ty.dynamicCppCall("empty_like", self, options).to(Tensor)
template empty_like*(_: typedesc[torch]; self: var Tensor, options: var ATensorOptions): Tensor = dynamicCCall("at::empty_like", self, options).to(Tensor)
template empty*(ty: TensorType; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = ty.dynamicCppCall("empty", dtype, size).to(Tensor)
template empty*(_: typedesc[torch]; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = dynamicCCall("at::empty", dtype, size).to(Tensor)
template erf*(self: Tensor): Tensor = self.dynamicCppCall("erf").to(Tensor)
template erf*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erf", self).to(Tensor)
template erf*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::erf", self).to(Tensor)
template erf_u*(self: Tensor): Tensor = self.dynamicCppCall("erf_").to(Tensor)
template erf_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erf_", self).to(Tensor)
template erf_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::erf_", self).to(Tensor)
template erf_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("erf_out", aresult, self).to(Tensor)
template erf_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::erf_out", aresult, self).to(Tensor)
template erfc*(self: Tensor): Tensor = self.dynamicCppCall("erfc").to(Tensor)
template erfc*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erfc", self).to(Tensor)
template erfc*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::erfc", self).to(Tensor)
template erfc_u*(self: Tensor): Tensor = self.dynamicCppCall("erfc_").to(Tensor)
template erfc_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("erfc_", self).to(Tensor)
template erfc_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::erfc_", self).to(Tensor)
template erfc_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("erfc_out", aresult, self).to(Tensor)
template erfc_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::erfc_out", aresult, self).to(Tensor)
template exp*(self: Tensor): Tensor = self.dynamicCppCall("exp").to(Tensor)
template exp*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("exp", self).to(Tensor)
template exp*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::exp", self).to(Tensor)
template exp_u*(self: Tensor): Tensor = self.dynamicCppCall("exp_").to(Tensor)
template exp_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("exp_", self).to(Tensor)
template exp_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::exp_", self).to(Tensor)
template exp_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("exp_out", aresult, self).to(Tensor)
template exp_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::exp_out", aresult, self).to(Tensor)
template expm1*(self: Tensor): Tensor = self.dynamicCppCall("expm1").to(Tensor)
template expm1*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("expm1", self).to(Tensor)
template expm1*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::expm1", self).to(Tensor)
template expm1_u*(self: Tensor): Tensor = self.dynamicCppCall("expm1_").to(Tensor)
template expm1_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("expm1_", self).to(Tensor)
template expm1_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::expm1_", self).to(Tensor)
template expm1_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("expm1_out", aresult, self).to(Tensor)
template expm1_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::expm1_out", aresult, self).to(Tensor)
template expand*(self: Tensor, size: IntList, implicit: bool = false): Tensor = self.dynamicCppCall("expand", size, implicit).to(Tensor)
template expand*(ty: TensorType; self: var Tensor, size: IntList, implicit: bool = false): Tensor = ty.dynamicCppCall("expand", self, size, implicit).to(Tensor)
template expand_as*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("expand_as", other).to(Tensor)
template expand_as*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("expand_as", self, other).to(Tensor)
template eye*(ty: TensorType; n: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("eye", n, options).to(Tensor)
template eye*(_: typedesc[torch]; n: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::eye", n, options).to(Tensor)
template eye*(ty: TensorType; n: int64, m: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("eye", n, m, options).to(Tensor)
template eye*(_: typedesc[torch]; n: int64, m: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::eye", n, m, options).to(Tensor)
template eye_out*(ty: TensorType; aresult: var Tensor, n: int64): Tensor = ty.dynamicCppCall("eye_out", aresult, n).to(Tensor)
template eye_out*(_: typedesc[torch]; aresult: var Tensor, n: int64): Tensor = dynamicCCall("at::eye_out", aresult, n).to(Tensor)
template eye_out*(ty: TensorType; aresult: var Tensor, n: int64, m: int64): Tensor = ty.dynamicCppCall("eye_out", aresult, n, m).to(Tensor)
template eye_out*(_: typedesc[torch]; aresult: var Tensor, n: int64, m: int64): Tensor = dynamicCCall("at::eye_out", aresult, n, m).to(Tensor)
template eye*(ty: TensorType; dtype: var TensorType, n: int64, m: int64 = -1): Tensor {.deprecated.} = ty.dynamicCppCall("eye", dtype, n, m).to(Tensor)
template eye*(_: typedesc[torch]; dtype: var TensorType, n: int64, m: int64 = -1): Tensor {.deprecated.} = dynamicCCall("at::eye", dtype, n, m).to(Tensor)
template flatten*(self: Tensor, start_dim: int64 = 0, end_dim: int64 = -1): Tensor = self.dynamicCppCall("flatten", start_dim, end_dim).to(Tensor)
template flatten*(ty: TensorType; self: var Tensor, start_dim: int64 = 0, end_dim: int64 = -1): Tensor = ty.dynamicCppCall("flatten", self, start_dim, end_dim).to(Tensor)
template flatten*(_: typedesc[torch]; self: var Tensor, start_dim: int64 = 0, end_dim: int64 = -1): Tensor = dynamicCCall("at::flatten", self, start_dim, end_dim).to(Tensor)
template fill_u*(self: Tensor, value: float): Tensor = self.dynamicCppCall("fill_", value).to(Tensor)
template fill_u*(ty: TensorType; self: var Tensor, value: float): Tensor = ty.dynamicCppCall("fill_", self, value).to(Tensor)
template fill_u*(_: typedesc[torch]; self: var Tensor, value: float): Tensor = dynamicCCall("at::fill_", self, value).to(Tensor)
template fill_u*(self: Tensor, value: var Tensor): Tensor = self.dynamicCppCall("fill_", value).to(Tensor)
template fill_u*(ty: TensorType; self: var Tensor, value: var Tensor): Tensor = ty.dynamicCppCall("fill_", self, value).to(Tensor)
template fill_u*(_: typedesc[torch]; self: var Tensor, value: var Tensor): Tensor = dynamicCCall("at::fill_", self, value).to(Tensor)
template floor*(self: Tensor): Tensor = self.dynamicCppCall("floor").to(Tensor)
template floor*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("floor", self).to(Tensor)
template floor*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::floor", self).to(Tensor)
template floor_u*(self: Tensor): Tensor = self.dynamicCppCall("floor_").to(Tensor)
template floor_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("floor_", self).to(Tensor)
template floor_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::floor_", self).to(Tensor)
template floor_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("floor_out", aresult, self).to(Tensor)
template floor_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::floor_out", aresult, self).to(Tensor)
template full*(ty: TensorType; size: IntList, fill_value: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("full", size, fill_value, options).to(Tensor)
template full*(_: typedesc[torch]; size: IntList, fill_value: float, options: var ATensorOptions): Tensor = dynamicCCall("at::full", size, fill_value, options).to(Tensor)
template full_out*(ty: TensorType; aresult: var Tensor, size: IntList, fill_value: float): Tensor = ty.dynamicCppCall("full_out", aresult, size, fill_value).to(Tensor)
template full_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList, fill_value: float): Tensor = dynamicCCall("at::full_out", aresult, size, fill_value).to(Tensor)
template full_like*(ty: TensorType; self: var Tensor, fill_value: float): Tensor = ty.dynamicCppCall("full_like", self, fill_value).to(Tensor)
template full_like*(_: typedesc[torch]; self: var Tensor, fill_value: float): Tensor = dynamicCCall("at::full_like", self, fill_value).to(Tensor)
template full_like*(ty: TensorType; self: var Tensor, fill_value: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("full_like", self, fill_value, options).to(Tensor)
template full_like*(_: typedesc[torch]; self: var Tensor, fill_value: float, options: var ATensorOptions): Tensor = dynamicCCall("at::full_like", self, fill_value, options).to(Tensor)
template full*(ty: TensorType; dtype: var TensorType, size: IntList, fill_value: float): Tensor {.deprecated.} = ty.dynamicCppCall("full", dtype, size, fill_value).to(Tensor)
template full*(_: typedesc[torch]; dtype: var TensorType, size: IntList, fill_value: float): Tensor {.deprecated.} = dynamicCCall("at::full", dtype, size, fill_value).to(Tensor)
template grid_sampler*(ty: TensorType; input: var Tensor, grid: var Tensor, padding_mode: int64): Tensor = ty.dynamicCppCall("grid_sampler", input, grid, padding_mode).to(Tensor)
template grid_sampler*(_: typedesc[torch]; input: var Tensor, grid: var Tensor, padding_mode: int64): Tensor = dynamicCCall("at::grid_sampler", input, grid, padding_mode).to(Tensor)
template grid_sampler_2d*(ty: TensorType; input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): Tensor = ty.dynamicCppCall("grid_sampler_2d", input, grid, interpolation_mode, padding_mode).to(Tensor)
template grid_sampler_2d*(_: typedesc[torch]; input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): Tensor = dynamicCCall("at::grid_sampler_2d", input, grid, interpolation_mode, padding_mode).to(Tensor)
template grid_sampler_2d_backward*(ty: TensorType; grad_output: var Tensor, input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): (Tensor, Tensor) = ty.dynamicCppCall("grid_sampler_2d_backward", grad_output, input, grid, interpolation_mode, padding_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template grid_sampler_2d_backward*(_: typedesc[torch]; grad_output: var Tensor, input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): (Tensor, Tensor) = dynamicCCall("at::grid_sampler_2d_backward", grad_output, input, grid, interpolation_mode, padding_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template grid_sampler_3d*(ty: TensorType; input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): Tensor = ty.dynamicCppCall("grid_sampler_3d", input, grid, interpolation_mode, padding_mode).to(Tensor)
template grid_sampler_3d*(_: typedesc[torch]; input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): Tensor = dynamicCCall("at::grid_sampler_3d", input, grid, interpolation_mode, padding_mode).to(Tensor)
template grid_sampler_3d_backward*(ty: TensorType; grad_output: var Tensor, input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): (Tensor, Tensor) = ty.dynamicCppCall("grid_sampler_3d_backward", grad_output, input, grid, interpolation_mode, padding_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template grid_sampler_3d_backward*(_: typedesc[torch]; grad_output: var Tensor, input: var Tensor, grid: var Tensor, interpolation_mode: int64, padding_mode: int64): (Tensor, Tensor) = dynamicCCall("at::grid_sampler_3d_backward", grad_output, input, grid, interpolation_mode, padding_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template hann_window*(ty: TensorType; window_length: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hann_window", window_length, options).to(Tensor)
template hann_window*(_: typedesc[torch]; window_length: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::hann_window", window_length, options).to(Tensor)
template hann_window*(ty: TensorType; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hann_window", window_length, periodic, options).to(Tensor)
template hann_window*(_: typedesc[torch]; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = dynamicCCall("at::hann_window", window_length, periodic, options).to(Tensor)
template hamming_window*(ty: TensorType; window_length: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hamming_window", window_length, options).to(Tensor)
template hamming_window*(_: typedesc[torch]; window_length: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::hamming_window", window_length, options).to(Tensor)
template hamming_window*(ty: TensorType; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hamming_window", window_length, periodic, options).to(Tensor)
template hamming_window*(_: typedesc[torch]; window_length: int64, periodic: bool, options: var ATensorOptions): Tensor = dynamicCCall("at::hamming_window", window_length, periodic, options).to(Tensor)
template hamming_window*(ty: TensorType; window_length: int64, periodic: bool, alpha: float64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hamming_window", window_length, periodic, alpha, options).to(Tensor)
template hamming_window*(_: typedesc[torch]; window_length: int64, periodic: bool, alpha: float64, options: var ATensorOptions): Tensor = dynamicCCall("at::hamming_window", window_length, periodic, alpha, options).to(Tensor)
template hamming_window*(ty: TensorType; window_length: int64, periodic: bool, alpha: float64, beta: float64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("hamming_window", window_length, periodic, alpha, beta, options).to(Tensor)
template hamming_window*(_: typedesc[torch]; window_length: int64, periodic: bool, alpha: float64, beta: float64, options: var ATensorOptions): Tensor = dynamicCCall("at::hamming_window", window_length, periodic, alpha, beta, options).to(Tensor)
template hinge_embedding_loss*(ty: TensorType; self: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = ty.dynamicCppCall("hinge_embedding_loss", self, target, margin, reduction).to(Tensor)
template hinge_embedding_loss*(_: typedesc[torch]; self: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = dynamicCCall("at::hinge_embedding_loss", self, target, margin, reduction).to(Tensor)
template ger*(self: Tensor, vec2: var Tensor): Tensor = self.dynamicCppCall("ger", vec2).to(Tensor)
template ger*(ty: TensorType; self: var Tensor, vec2: var Tensor): Tensor = ty.dynamicCppCall("ger", self, vec2).to(Tensor)
template ger*(_: typedesc[torch]; self: var Tensor, vec2: var Tensor): Tensor = dynamicCCall("at::ger", self, vec2).to(Tensor)
template ger_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec2: var Tensor): Tensor = ty.dynamicCppCall("ger_out", aresult, self, vec2).to(Tensor)
template ger_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec2: var Tensor): Tensor = dynamicCCall("at::ger_out", aresult, self, vec2).to(Tensor)
template gesv*(self: Tensor, A: var Tensor): (Tensor, Tensor) = self.dynamicCppCall("gesv", A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gesv*(ty: TensorType; self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("gesv", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gesv*(_: typedesc[torch]; self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::gesv", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gesv_out*(ty: TensorType; solution: var Tensor, lu: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("gesv_out", solution, lu, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template gesv_out*(_: typedesc[torch]; solution: var Tensor, lu: var Tensor, self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::gesv_out", solution, lu, self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_helper*(self: Tensor, A: var Tensor): (Tensor, Tensor) = self.dynamicCppCall("_gesv_helper", A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_helper*(ty: TensorType; self: var Tensor, A: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("_gesv_helper", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_gesv_helper*(_: typedesc[torch]; self: var Tensor, A: var Tensor): (Tensor, Tensor) = dynamicCCall("at::_gesv_helper", self, A).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template group_norm*(ty: TensorType; input: var Tensor, num_groups: int64, weight: var Tensor, bias: var Tensor, eps: float64, cudnn_enabled: bool = true): Tensor = ty.dynamicCppCall("group_norm", input, num_groups, weight, bias, eps, cudnn_enabled).to(Tensor)
template group_norm*(_: typedesc[torch]; input: var Tensor, num_groups: int64, weight: var Tensor, bias: var Tensor, eps: float64, cudnn_enabled: bool = true): Tensor = dynamicCCall("at::group_norm", input, num_groups, weight, bias, eps, cudnn_enabled).to(Tensor)
template fft*(self: Tensor, signal_ndim: int64, normalized: bool = false): Tensor = self.dynamicCppCall("fft", signal_ndim, normalized).to(Tensor)
template fft*(ty: TensorType; self: var Tensor, signal_ndim: int64, normalized: bool = false): Tensor = ty.dynamicCppCall("fft", self, signal_ndim, normalized).to(Tensor)
template fft*(_: typedesc[torch]; self: var Tensor, signal_ndim: int64, normalized: bool = false): Tensor = dynamicCCall("at::fft", self, signal_ndim, normalized).to(Tensor)
template ifft*(self: Tensor, signal_ndim: int64, normalized: bool = false): Tensor = self.dynamicCppCall("ifft", signal_ndim, normalized).to(Tensor)
template ifft*(ty: TensorType; self: var Tensor, signal_ndim: int64, normalized: bool = false): Tensor = ty.dynamicCppCall("ifft", self, signal_ndim, normalized).to(Tensor)
template ifft*(_: typedesc[torch]; self: var Tensor, signal_ndim: int64, normalized: bool = false): Tensor = dynamicCCall("at::ifft", self, signal_ndim, normalized).to(Tensor)
template rfft*(self: Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true): Tensor = self.dynamicCppCall("rfft", signal_ndim, normalized, onesided).to(Tensor)
template rfft*(ty: TensorType; self: var Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true): Tensor = ty.dynamicCppCall("rfft", self, signal_ndim, normalized, onesided).to(Tensor)
template rfft*(_: typedesc[torch]; self: var Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true): Tensor = dynamicCCall("at::rfft", self, signal_ndim, normalized, onesided).to(Tensor)
template irfft*(self: Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true, signal_sizes: IntList): Tensor = self.dynamicCppCall("irfft", signal_ndim, normalized, onesided, signal_sizes).to(Tensor)
template irfft*(ty: TensorType; self: var Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true, signal_sizes: IntList): Tensor = ty.dynamicCppCall("irfft", self, signal_ndim, normalized, onesided, signal_sizes).to(Tensor)
template irfft*(_: typedesc[torch]; self: var Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true, signal_sizes: IntList): Tensor = dynamicCCall("at::irfft", self, signal_ndim, normalized, onesided, signal_sizes).to(Tensor)
template u_fft_with_size*(self: Tensor, signal_ndim: int64, complex_input: bool, complex_output: bool, inverse: bool, checked_signal_sizes: IntList, normalized: bool, onesided: bool, output_sizes: IntList): Tensor = self.dynamicCppCall("_fft_with_size", signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes).to(Tensor)
template u_fft_with_size*(ty: TensorType; self: var Tensor, signal_ndim: int64, complex_input: bool, complex_output: bool, inverse: bool, checked_signal_sizes: IntList, normalized: bool, onesided: bool, output_sizes: IntList): Tensor = ty.dynamicCppCall("_fft_with_size", self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes).to(Tensor)
template u_fft_with_size*(_: typedesc[torch]; self: var Tensor, signal_ndim: int64, complex_input: bool, complex_output: bool, inverse: bool, checked_signal_sizes: IntList, normalized: bool, onesided: bool, output_sizes: IntList): Tensor = dynamicCCall("at::_fft_with_size", self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes).to(Tensor)
template u_cufft_get_plan_cache_size*(ty: TensorType; ): int64 = ty.dynamicCppCall("_cufft_get_plan_cache_size").to(int64)
template u_cufft_get_plan_cache_size*(_: typedesc[torch]; ): int64 = dynamicCCall("at::_cufft_get_plan_cache_size").to(int64)
template u_cufft_get_plan_cache_max_size*(ty: TensorType; ): int64 = ty.dynamicCppCall("_cufft_get_plan_cache_max_size").to(int64)
template u_cufft_get_plan_cache_max_size*(_: typedesc[torch]; ): int64 = dynamicCCall("at::_cufft_get_plan_cache_max_size").to(int64)
template u_cufft_set_plan_cache_max_size*(ty: TensorType; max_size: int64): void = ty.dynamicCppCall("_cufft_set_plan_cache_max_size", max_size).to(void)
template u_cufft_set_plan_cache_max_size*(_: typedesc[torch]; max_size: int64): void = dynamicCCall("at::_cufft_set_plan_cache_max_size", max_size).to(void)
template u_cufft_clear_plan_cache*(ty: TensorType; ): void = ty.dynamicCppCall("_cufft_clear_plan_cache").to(void)
template u_cufft_clear_plan_cache*(_: typedesc[torch]; ): void = dynamicCCall("at::_cufft_clear_plan_cache").to(void)
template index*(self: Tensor, indices: TensorList): Tensor = self.dynamicCppCall("index", indices).to(Tensor)
template index*(ty: TensorType; self: var Tensor, indices: TensorList): Tensor = ty.dynamicCppCall("index", self, indices).to(Tensor)
template index*(_: typedesc[torch]; self: var Tensor, indices: TensorList): Tensor = dynamicCCall("at::index", self, indices).to(Tensor)
template index_copy_u*(self: Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = self.dynamicCppCall("index_copy_", dim, index, source).to(Tensor)
template index_copy_u*(ty: TensorType; self: var Tensor, dim: int64, index: var Tensor, source: var Tensor): Tensor = ty.dynamicCppCall("index_copy_", self, dim, index, source).to(Tensor)
template index_put*(self: Tensor, indices: TensorList, values: var Tensor): Tensor = self.dynamicCppCall("index_put", indices, values).to(Tensor)
template index_put*(ty: TensorType; self: var Tensor, indices: TensorList, values: var Tensor): Tensor = ty.dynamicCppCall("index_put", self, indices, values).to(Tensor)
template index_put*(_: typedesc[torch]; self: var Tensor, indices: TensorList, values: var Tensor): Tensor = dynamicCCall("at::index_put", self, indices, values).to(Tensor)
template index_put_u*(self: Tensor, indices: TensorList, values: var Tensor): Tensor = self.dynamicCppCall("index_put_", indices, values).to(Tensor)
template index_put_u*(ty: TensorType; self: var Tensor, indices: TensorList, values: var Tensor): Tensor = ty.dynamicCppCall("index_put_", self, indices, values).to(Tensor)
template index_put_u*(_: typedesc[torch]; self: var Tensor, indices: TensorList, values: var Tensor): Tensor = dynamicCCall("at::index_put_", self, indices, values).to(Tensor)
template inverse*(self: Tensor): Tensor = self.dynamicCppCall("inverse").to(Tensor)
template inverse*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("inverse", self).to(Tensor)
template inverse*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::inverse", self).to(Tensor)
template inverse_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("inverse_out", aresult, self).to(Tensor)
template inverse_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::inverse_out", aresult, self).to(Tensor)
template isclose*(self: Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): Tensor = self.dynamicCppCall("isclose", other, rtol, atol, equal_nan).to(Tensor)
template isclose*(ty: TensorType; self: var Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): Tensor = ty.dynamicCppCall("isclose", self, other, rtol, atol, equal_nan).to(Tensor)
template isclose*(_: typedesc[torch]; self: var Tensor, other: var Tensor, rtol: float64, atol: float64, equal_nan: bool = false): Tensor = dynamicCCall("at::isclose", self, other, rtol, atol, equal_nan).to(Tensor)
template is_cuda*(self: Tensor): bool = self.dynamicCppCall("is_cuda").to(bool)
template is_cuda*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_cuda", self).to(bool)
template is_cuda*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_cuda", self).to(bool)
template is_distributed*(self: Tensor): bool = self.dynamicCppCall("is_distributed").to(bool)
template is_distributed*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_distributed", self).to(bool)
template is_distributed*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_distributed", self).to(bool)
template is_floating_point*(self: Tensor): bool = self.dynamicCppCall("is_floating_point").to(bool)
template is_floating_point*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_floating_point", self).to(bool)
template is_floating_point*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_floating_point", self).to(bool)
template is_nonzero*(self: Tensor): bool = self.dynamicCppCall("is_nonzero").to(bool)
template is_nonzero*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_nonzero", self).to(bool)
template is_nonzero*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_nonzero", self).to(bool)
template is_same_size*(self: Tensor, other: var Tensor): bool = self.dynamicCppCall("is_same_size", other).to(bool)
template is_same_size*(ty: TensorType; self: var Tensor, other: var Tensor): bool = ty.dynamicCppCall("is_same_size", self, other).to(bool)
template is_same_size*(_: typedesc[torch]; self: var Tensor, other: var Tensor): bool = dynamicCCall("at::is_same_size", self, other).to(bool)
template is_signed*(self: Tensor): bool = self.dynamicCppCall("is_signed").to(bool)
template is_signed*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_signed", self).to(bool)
template is_signed*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_signed", self).to(bool)
template is_sparse*(self: Tensor): bool = self.dynamicCppCall("is_sparse").to(bool)
template is_sparse*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_sparse", self).to(bool)
template is_sparse*(_: typedesc[torch]; self: var Tensor): bool = dynamicCCall("at::is_sparse", self).to(bool)
template kthvalue*(self: Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("kthvalue", k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template kthvalue*(ty: TensorType; self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("kthvalue", self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template kthvalue*(_: typedesc[torch]; self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::kthvalue", self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template kthvalue_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("kthvalue_out", values, indices, self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template kthvalue_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, k: int64, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::kthvalue_out", values, indices, self, k, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template layer_norm*(ty: TensorType; input: var Tensor, normalized_shape: IntList, weight: var Tensor, bias: var Tensor, eps: float64, cudnn_enable: bool = true): Tensor = ty.dynamicCppCall("layer_norm", input, normalized_shape, weight, bias, eps, cudnn_enable).to(Tensor)
template layer_norm*(_: typedesc[torch]; input: var Tensor, normalized_shape: IntList, weight: var Tensor, bias: var Tensor, eps: float64, cudnn_enable: bool = true): Tensor = dynamicCCall("at::layer_norm", input, normalized_shape, weight, bias, eps, cudnn_enable).to(Tensor)
template linspace*(ty: TensorType; start: float, aend: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("linspace", start, aend, options).to(Tensor)
template linspace*(_: typedesc[torch]; start: float, aend: float, options: var ATensorOptions): Tensor = dynamicCCall("at::linspace", start, aend, options).to(Tensor)
template linspace*(ty: TensorType; start: float, aend: float, steps: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("linspace", start, aend, steps, options).to(Tensor)
template linspace*(_: typedesc[torch]; start: float, aend: float, steps: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::linspace", start, aend, steps, options).to(Tensor)
template linspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float): Tensor = ty.dynamicCppCall("linspace_out", aresult, start, aend).to(Tensor)
template linspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float): Tensor = dynamicCCall("at::linspace_out", aresult, start, aend).to(Tensor)
template linspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, steps: int64): Tensor = ty.dynamicCppCall("linspace_out", aresult, start, aend, steps).to(Tensor)
template linspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, steps: int64): Tensor = dynamicCCall("at::linspace_out", aresult, start, aend, steps).to(Tensor)
template linspace*(ty: TensorType; dtype: var TensorType, start: float, aend: float, steps: int64 = 100): Tensor {.deprecated.} = ty.dynamicCppCall("linspace", dtype, start, aend, steps).to(Tensor)
template linspace*(_: typedesc[torch]; dtype: var TensorType, start: float, aend: float, steps: int64 = 100): Tensor {.deprecated.} = dynamicCCall("at::linspace", dtype, start, aend, steps).to(Tensor)
template log*(self: Tensor): Tensor = self.dynamicCppCall("log").to(Tensor)
template log*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log", self).to(Tensor)
template log*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log", self).to(Tensor)
template log_u*(self: Tensor): Tensor = self.dynamicCppCall("log_").to(Tensor)
template log_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log_", self).to(Tensor)
template log_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log_", self).to(Tensor)
template log_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("log_out", aresult, self).to(Tensor)
template log_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::log_out", aresult, self).to(Tensor)
template log10*(self: Tensor): Tensor = self.dynamicCppCall("log10").to(Tensor)
template log10*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log10", self).to(Tensor)
template log10*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log10", self).to(Tensor)
template log10_u*(self: Tensor): Tensor = self.dynamicCppCall("log10_").to(Tensor)
template log10_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log10_", self).to(Tensor)
template log10_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log10_", self).to(Tensor)
template log10_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("log10_out", aresult, self).to(Tensor)
template log10_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::log10_out", aresult, self).to(Tensor)
template log1p*(self: Tensor): Tensor = self.dynamicCppCall("log1p").to(Tensor)
template log1p*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log1p", self).to(Tensor)
template log1p*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log1p", self).to(Tensor)
template log1p_u*(self: Tensor): Tensor = self.dynamicCppCall("log1p_").to(Tensor)
template log1p_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log1p_", self).to(Tensor)
template log1p_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log1p_", self).to(Tensor)
template log1p_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("log1p_out", aresult, self).to(Tensor)
template log1p_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::log1p_out", aresult, self).to(Tensor)
template log2*(self: Tensor): Tensor = self.dynamicCppCall("log2").to(Tensor)
template log2*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log2", self).to(Tensor)
template log2*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log2", self).to(Tensor)
template log2_u*(self: Tensor): Tensor = self.dynamicCppCall("log2_").to(Tensor)
template log2_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("log2_", self).to(Tensor)
template log2_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::log2_", self).to(Tensor)
template log2_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("log2_out", aresult, self).to(Tensor)
template log2_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::log2_out", aresult, self).to(Tensor)
template logdet*(self: Tensor): Tensor = self.dynamicCppCall("logdet").to(Tensor)
template logdet*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("logdet", self).to(Tensor)
template logdet*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::logdet", self).to(Tensor)
template logspace*(ty: TensorType; start: float, aend: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("logspace", start, aend, options).to(Tensor)
template logspace*(_: typedesc[torch]; start: float, aend: float, options: var ATensorOptions): Tensor = dynamicCCall("at::logspace", start, aend, options).to(Tensor)
template logspace*(ty: TensorType; start: float, aend: float, steps: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("logspace", start, aend, steps, options).to(Tensor)
template logspace*(_: typedesc[torch]; start: float, aend: float, steps: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::logspace", start, aend, steps, options).to(Tensor)
template logspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float): Tensor = ty.dynamicCppCall("logspace_out", aresult, start, aend).to(Tensor)
template logspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float): Tensor = dynamicCCall("at::logspace_out", aresult, start, aend).to(Tensor)
template logspace_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, steps: int64): Tensor = ty.dynamicCppCall("logspace_out", aresult, start, aend, steps).to(Tensor)
template logspace_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, steps: int64): Tensor = dynamicCCall("at::logspace_out", aresult, start, aend, steps).to(Tensor)
template logspace*(ty: TensorType; dtype: var TensorType, start: float, aend: float, steps: int64 = 100): Tensor {.deprecated.} = ty.dynamicCppCall("logspace", dtype, start, aend, steps).to(Tensor)
template logspace*(_: typedesc[torch]; dtype: var TensorType, start: float, aend: float, steps: int64 = 100): Tensor {.deprecated.} = dynamicCCall("at::logspace", dtype, start, aend, steps).to(Tensor)
template log_softmax*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("log_softmax", dim).to(Tensor)
template log_softmax*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("log_softmax", self, dim).to(Tensor)
template log_softmax*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::log_softmax", self, dim).to(Tensor)
template log_softmax_backward_data*(self: Tensor, grad_output: var Tensor, output: var Tensor, dim: int64): Tensor = self.dynamicCppCall("log_softmax_backward_data", grad_output, output, dim).to(Tensor)
template log_softmax_backward_data*(ty: TensorType; grad_output: var Tensor, output: var Tensor, dim: int64, self: var Tensor): Tensor = ty.dynamicCppCall("log_softmax_backward_data", grad_output, output, dim, self).to(Tensor)
template log_softmax_backward_data*(_: typedesc[torch]; grad_output: var Tensor, output: var Tensor, dim: int64, self: var Tensor): Tensor = dynamicCCall("at::log_softmax_backward_data", grad_output, output, dim, self).to(Tensor)
template logsumexp*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("logsumexp", dim, keepdim).to(Tensor)
template logsumexp*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("logsumexp", self, dim, keepdim).to(Tensor)
template logsumexp*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::logsumexp", self, dim, keepdim).to(Tensor)
template logsumexp_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("logsumexp_out", aresult, self, dim, keepdim).to(Tensor)
template logsumexp_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::logsumexp_out", aresult, self, dim, keepdim).to(Tensor)
template margin_ranking_loss*(ty: TensorType; input1: var Tensor, input2: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = ty.dynamicCppCall("margin_ranking_loss", input1, input2, target, margin, reduction).to(Tensor)
template margin_ranking_loss*(_: typedesc[torch]; input1: var Tensor, input2: var Tensor, target: var Tensor, margin: float64, reduction: int64): Tensor = dynamicCCall("at::margin_ranking_loss", input1, input2, target, margin, reduction).to(Tensor)
template matmul*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("matmul", other).to(Tensor)
template matmul*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("matmul", self, other).to(Tensor)
template matmul*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::matmul", self, other).to(Tensor)
template matmul_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("matmul_out", aresult, self, other).to(Tensor)
template matmul_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::matmul_out", aresult, self, other).to(Tensor)
template max*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("max", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::max", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_out*(ty: TensorType; max: var Tensor, max_values: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_out", max, max_values, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_out*(_: typedesc[torch]; max: var Tensor, max_values: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_out", max, max_values, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_values*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("max_values", dim, keepdim).to(Tensor)
template max_values*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("max_values", self, dim, keepdim).to(Tensor)
template max_values*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::max_values", self, dim, keepdim).to(Tensor)
template max_pool1d_with_indices*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("max_pool1d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool1d_with_indices*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): (Tensor, Tensor) = dynamicCCall("at::max_pool1d_with_indices", self, kernel_size, stride, padding, dilation, ceil_mode).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template max_pool1d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = ty.dynamicCppCall("max_pool1d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template max_pool1d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = dynamicCCall("at::max_pool1d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template max_pool2d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = ty.dynamicCppCall("max_pool2d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template max_pool2d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = dynamicCCall("at::max_pool2d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template max_pool3d*(ty: TensorType; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = ty.dynamicCppCall("max_pool3d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template max_pool3d*(_: typedesc[torch]; self: var Tensor, kernel_size: IntList, stride: IntList, padding: IntList = @[0], dilation: IntList = @[1], ceil_mode: bool = false): Tensor = dynamicCCall("at::max_pool3d", self, kernel_size, stride, padding, dilation, ceil_mode).to(Tensor)
template mean*(self: Tensor, dtype: AScalarType): Tensor = self.dynamicCppCall("mean", dtype).to(Tensor)
template mean*(ty: TensorType; self: var Tensor, dtype: AScalarType): Tensor = ty.dynamicCppCall("mean", self, dtype).to(Tensor)
template mean*(_: typedesc[torch]; self: var Tensor, dtype: AScalarType): Tensor = dynamicCCall("at::mean", self, dtype).to(Tensor)
template mean*(self: Tensor): Tensor = self.dynamicCppCall("mean").to(Tensor)
template mean*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("mean", self).to(Tensor)
template mean*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::mean", self).to(Tensor)
template mean*(self: Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = self.dynamicCppCall("mean", dim, keepdim, dtype).to(Tensor)
template mean*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("mean", self, dim, keepdim, dtype).to(Tensor)
template mean*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::mean", self, dim, keepdim, dtype).to(Tensor)
template mean*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("mean", dim, keepdim).to(Tensor)
template mean*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("mean", self, dim, keepdim).to(Tensor)
template mean*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::mean", self, dim, keepdim).to(Tensor)
template mean*(self: Tensor, dim: int64, dtype: AScalarType): Tensor = self.dynamicCppCall("mean", dim, dtype).to(Tensor)
template mean*(ty: TensorType; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("mean", self, dim, dtype).to(Tensor)
template mean*(_: typedesc[torch]; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::mean", self, dim, dtype).to(Tensor)
template mean_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("mean_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template mean_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::mean_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template mean_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("mean_out", aresult, self, dim, keepdim).to(Tensor)
template mean_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::mean_out", aresult, self, dim, keepdim).to(Tensor)
template mean_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("mean_out", aresult, self, dim, dtype).to(Tensor)
template mean_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::mean_out", aresult, self, dim, dtype).to(Tensor)
template median*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("median", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template median*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("median", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template median*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::median", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template median_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("median_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template median_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::median_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min*(self: Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("min", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("min", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::min", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min_out*(ty: TensorType; min: var Tensor, min_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("min_out", min, min_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min_out*(_: typedesc[torch]; min: var Tensor, min_indices: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::min_out", min, min_indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template min_values*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("min_values", dim, keepdim).to(Tensor)
template min_values*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("min_values", self, dim, keepdim).to(Tensor)
template min_values*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::min_values", self, dim, keepdim).to(Tensor)
template mkldnn_convolution*(ty: TensorType; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64): Tensor = ty.dynamicCppCall("mkldnn_convolution", self, weight, bias, padding, stride, dilation, groups).to(Tensor)
template mkldnn_convolution*(_: typedesc[torch]; self: var Tensor, weight: var Tensor, bias: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64): Tensor = dynamicCCall("at::mkldnn_convolution", self, weight, bias, padding, stride, dilation, groups).to(Tensor)
template mkldnn_convolution_backward_input*(ty: TensorType; self_size: IntList, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, bias_defined: bool): Tensor = ty.dynamicCppCall("mkldnn_convolution_backward_input", self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined).to(Tensor)
template mkldnn_convolution_backward_input*(_: typedesc[torch]; self_size: IntList, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, bias_defined: bool): Tensor = dynamicCCall("at::mkldnn_convolution_backward_input", self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined).to(Tensor)
template mkldnn_convolution_backward_weights*(ty: TensorType; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, bias_defined: bool): (Tensor, Tensor) = ty.dynamicCppCall("mkldnn_convolution_backward_weights", weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mkldnn_convolution_backward_weights*(_: typedesc[torch]; weight_size: IntList, grad_output: var Tensor, self: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, bias_defined: bool): (Tensor, Tensor) = dynamicCCall("at::mkldnn_convolution_backward_weights", weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mkldnn_convolution_backward*(ty: TensorType; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = ty.dynamicCppCall("mkldnn_convolution_backward", self, grad_output, weight, padding, stride, dilation, groups, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template mkldnn_convolution_backward*(_: typedesc[torch]; self: var Tensor, grad_output: var Tensor, weight: var Tensor, padding: IntList, stride: IntList, dilation: IntList, groups: int64, output_mask: StdArray[bool, 3]): (Tensor, Tensor, Tensor) = dynamicCCall("at::mkldnn_convolution_backward", self, grad_output, weight, padding, stride, dilation, groups, output_mask).to(StdTuple3[Tensor, Tensor, Tensor]).toNimTuple()
template mm*(self: Tensor, mat2: var Tensor): Tensor = self.dynamicCppCall("mm", mat2).to(Tensor)
template mm*(ty: TensorType; self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("mm", self, mat2).to(Tensor)
template mm*(_: typedesc[torch]; self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::mm", self, mat2).to(Tensor)
template mm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("mm_out", aresult, self, mat2).to(Tensor)
template mm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::mm_out", aresult, self, mat2).to(Tensor)
template mode*(self: Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = self.dynamicCppCall("mode", dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mode*(ty: TensorType; self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("mode", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mode*(_: typedesc[torch]; self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::mode", self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mode_out*(ty: TensorType; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("mode_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mode_out*(_: typedesc[torch]; values: var Tensor, indices: var Tensor, self: var Tensor, dim: int64 = -1, keepdim: bool = false): (Tensor, Tensor) = dynamicCCall("at::mode_out", values, indices, self, dim, keepdim).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template mul*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("mul", other).to(Tensor)
template mul*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("mul", self, other).to(Tensor)
template mul*(_: typedesc[torch]; self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::mul", self, other).to(Tensor)
template mul_u*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("mul_", other).to(Tensor)
template mul_u*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("mul_", self, other).to(Tensor)
template mul_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("mul_out", aresult, self, other).to(Tensor)
template mul_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::mul_out", aresult, self, other).to(Tensor)
template mul*(self: Tensor, other: float): Tensor = self.dynamicCppCall("mul", other).to(Tensor)
template mul*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("mul", self, other).to(Tensor)
template mul*(_: typedesc[torch]; self: var Tensor, other: float): Tensor = dynamicCCall("at::mul", self, other).to(Tensor)
template mul_u*(self: Tensor, other: float): Tensor = self.dynamicCppCall("mul_", other).to(Tensor)
template mul_u*(ty: TensorType; self: var Tensor, other: float): Tensor = ty.dynamicCppCall("mul_", self, other).to(Tensor)
template mv*(self: Tensor, vec: var Tensor): Tensor = self.dynamicCppCall("mv", vec).to(Tensor)
template mv*(ty: TensorType; self: var Tensor, vec: var Tensor): Tensor = ty.dynamicCppCall("mv", self, vec).to(Tensor)
template mv*(_: typedesc[torch]; self: var Tensor, vec: var Tensor): Tensor = dynamicCCall("at::mv", self, vec).to(Tensor)
template mv_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, vec: var Tensor): Tensor = ty.dynamicCppCall("mv_out", aresult, self, vec).to(Tensor)
template mv_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, vec: var Tensor): Tensor = dynamicCCall("at::mv_out", aresult, self, vec).to(Tensor)
template mvlgamma*(self: Tensor, p: int64): Tensor = self.dynamicCppCall("mvlgamma", p).to(Tensor)
template mvlgamma*(ty: TensorType; self: var Tensor, p: int64): Tensor = ty.dynamicCppCall("mvlgamma", self, p).to(Tensor)
template mvlgamma*(_: typedesc[torch]; self: var Tensor, p: int64): Tensor = dynamicCCall("at::mvlgamma", self, p).to(Tensor)
template mvlgamma_u*(self: Tensor, p: int64): Tensor = self.dynamicCppCall("mvlgamma_", p).to(Tensor)
template mvlgamma_u*(ty: TensorType; self: var Tensor, p: int64): Tensor = ty.dynamicCppCall("mvlgamma_", self, p).to(Tensor)
template narrow*(self: Tensor, dim: int64, start: int64, length: int64): Tensor = self.dynamicCppCall("narrow", dim, start, length).to(Tensor)
template narrow*(ty: TensorType; self: var Tensor, dim: int64, start: int64, length: int64): Tensor = ty.dynamicCppCall("narrow", self, dim, start, length).to(Tensor)
template narrow*(_: typedesc[torch]; self: var Tensor, dim: int64, start: int64, length: int64): Tensor = dynamicCCall("at::narrow", self, dim, start, length).to(Tensor)
template ones*(ty: TensorType; size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("ones", size, options).to(Tensor)
template ones*(_: typedesc[torch]; size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::ones", size, options).to(Tensor)
template ones_out*(ty: TensorType; aresult: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("ones_out", aresult, size).to(Tensor)
template ones_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList): Tensor = dynamicCCall("at::ones_out", aresult, size).to(Tensor)
template ones_like*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("ones_like", self).to(Tensor)
template ones_like*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::ones_like", self).to(Tensor)
template ones_like*(ty: TensorType; self: var Tensor, options: var ATensorOptions): Tensor = ty.dynamicCppCall("ones_like", self, options).to(Tensor)
template ones_like*(_: typedesc[torch]; self: var Tensor, options: var ATensorOptions): Tensor = dynamicCCall("at::ones_like", self, options).to(Tensor)
template ones*(ty: TensorType; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = ty.dynamicCppCall("ones", dtype, size).to(Tensor)
template ones*(_: typedesc[torch]; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = dynamicCCall("at::ones", dtype, size).to(Tensor)
template pairwise_distance*(ty: TensorType; x1: var Tensor, x2: var Tensor, p: float64 = 2, eps: float64, keepdim: bool = false): Tensor = ty.dynamicCppCall("pairwise_distance", x1, x2, p, eps, keepdim).to(Tensor)
template pairwise_distance*(_: typedesc[torch]; x1: var Tensor, x2: var Tensor, p: float64 = 2, eps: float64, keepdim: bool = false): Tensor = dynamicCCall("at::pairwise_distance", x1, x2, p, eps, keepdim).to(Tensor)
template permute*(self: Tensor, dims: IntList): Tensor = self.dynamicCppCall("permute", dims).to(Tensor)
template permute*(ty: TensorType; self: var Tensor, dims: IntList): Tensor = ty.dynamicCppCall("permute", self, dims).to(Tensor)
template pin_memory*(self: Tensor): Tensor = self.dynamicCppCall("pin_memory").to(Tensor)
template pin_memory*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("pin_memory", self).to(Tensor)
template pin_memory*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::pin_memory", self).to(Tensor)
template pinverse*(self: Tensor, rcond: float64): Tensor = self.dynamicCppCall("pinverse", rcond).to(Tensor)
template pinverse*(ty: TensorType; self: var Tensor, rcond: float64): Tensor = ty.dynamicCppCall("pinverse", self, rcond).to(Tensor)
template pinverse*(_: typedesc[torch]; self: var Tensor, rcond: float64): Tensor = dynamicCCall("at::pinverse", self, rcond).to(Tensor)
template rand*(ty: TensorType; size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("rand", size, options).to(Tensor)
template rand*(_: typedesc[torch]; size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::rand", size, options).to(Tensor)
template rand*(ty: TensorType; size: IntList, generator: pointer, options: var ATensorOptions): Tensor = ty.dynamicCppCall("rand", size, generator, options).to(Tensor)
template rand*(_: typedesc[torch]; size: IntList, generator: pointer, options: var ATensorOptions): Tensor = dynamicCCall("at::rand", size, generator, options).to(Tensor)
template rand_out*(ty: TensorType; aresult: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("rand_out", aresult, size).to(Tensor)
template rand_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList): Tensor = dynamicCCall("at::rand_out", aresult, size).to(Tensor)
template rand_out*(ty: TensorType; aresult: var Tensor, size: IntList, generator: pointer): Tensor = ty.dynamicCppCall("rand_out", aresult, size, generator).to(Tensor)
template rand_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList, generator: pointer): Tensor = dynamicCCall("at::rand_out", aresult, size, generator).to(Tensor)
template rand_like*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("rand_like", self).to(Tensor)
template rand_like*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::rand_like", self).to(Tensor)
template rand_like*(ty: TensorType; self: var Tensor, options: var ATensorOptions): Tensor = ty.dynamicCppCall("rand_like", self, options).to(Tensor)
template rand_like*(_: typedesc[torch]; self: var Tensor, options: var ATensorOptions): Tensor = dynamicCCall("at::rand_like", self, options).to(Tensor)
template rand*(ty: TensorType; dtype: var TensorType, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = ty.dynamicCppCall("rand", dtype, size, generator).to(Tensor)
template rand*(_: typedesc[torch]; dtype: var TensorType, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = dynamicCCall("at::rand", dtype, size, generator).to(Tensor)
template randint*(ty: TensorType; high: int64, size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint", high, size, options).to(Tensor)
template randint*(_: typedesc[torch]; high: int64, size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::randint", high, size, options).to(Tensor)
template randint*(ty: TensorType; high: int64, size: IntList, generator: pointer, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint", high, size, generator, options).to(Tensor)
template randint*(_: typedesc[torch]; high: int64, size: IntList, generator: pointer, options: var ATensorOptions): Tensor = dynamicCCall("at::randint", high, size, generator, options).to(Tensor)
template randint*(ty: TensorType; low: int64, high: int64, size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint", low, high, size, options).to(Tensor)
template randint*(_: typedesc[torch]; low: int64, high: int64, size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::randint", low, high, size, options).to(Tensor)
template randint*(ty: TensorType; low: int64, high: int64, size: IntList, generator: pointer, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint", low, high, size, generator, options).to(Tensor)
template randint*(_: typedesc[torch]; low: int64, high: int64, size: IntList, generator: pointer, options: var ATensorOptions): Tensor = dynamicCCall("at::randint", low, high, size, generator, options).to(Tensor)
template randint*(ty: TensorType; dtype: var TensorType, high: int64, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = ty.dynamicCppCall("randint", dtype, high, size, generator).to(Tensor)
template randint*(_: typedesc[torch]; dtype: var TensorType, high: int64, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = dynamicCCall("at::randint", dtype, high, size, generator).to(Tensor)
template randint*(ty: TensorType; dtype: var TensorType, low: int64, high: int64, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = ty.dynamicCppCall("randint", dtype, low, high, size, generator).to(Tensor)
template randint*(_: typedesc[torch]; dtype: var TensorType, low: int64, high: int64, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = dynamicCCall("at::randint", dtype, low, high, size, generator).to(Tensor)
template randint_out*(ty: TensorType; aresult: var Tensor, high: int64, size: IntList): Tensor = ty.dynamicCppCall("randint_out", aresult, high, size).to(Tensor)
template randint_out*(_: typedesc[torch]; aresult: var Tensor, high: int64, size: IntList): Tensor = dynamicCCall("at::randint_out", aresult, high, size).to(Tensor)
template randint_out*(ty: TensorType; aresult: var Tensor, high: int64, size: IntList, generator: pointer): Tensor = ty.dynamicCppCall("randint_out", aresult, high, size, generator).to(Tensor)
template randint_out*(_: typedesc[torch]; aresult: var Tensor, high: int64, size: IntList, generator: pointer): Tensor = dynamicCCall("at::randint_out", aresult, high, size, generator).to(Tensor)
template randint_out*(ty: TensorType; aresult: var Tensor, low: int64, high: int64, size: IntList): Tensor = ty.dynamicCppCall("randint_out", aresult, low, high, size).to(Tensor)
template randint_out*(_: typedesc[torch]; aresult: var Tensor, low: int64, high: int64, size: IntList): Tensor = dynamicCCall("at::randint_out", aresult, low, high, size).to(Tensor)
template randint_out*(ty: TensorType; aresult: var Tensor, low: int64, high: int64, size: IntList, generator: pointer): Tensor = ty.dynamicCppCall("randint_out", aresult, low, high, size, generator).to(Tensor)
template randint_out*(_: typedesc[torch]; aresult: var Tensor, low: int64, high: int64, size: IntList, generator: pointer): Tensor = dynamicCCall("at::randint_out", aresult, low, high, size, generator).to(Tensor)
template randint_like*(ty: TensorType; self: var Tensor, high: int64): Tensor = ty.dynamicCppCall("randint_like", self, high).to(Tensor)
template randint_like*(_: typedesc[torch]; self: var Tensor, high: int64): Tensor = dynamicCCall("at::randint_like", self, high).to(Tensor)
template randint_like*(ty: TensorType; self: var Tensor, low: int64, high: int64): Tensor = ty.dynamicCppCall("randint_like", self, low, high).to(Tensor)
template randint_like*(_: typedesc[torch]; self: var Tensor, low: int64, high: int64): Tensor = dynamicCCall("at::randint_like", self, low, high).to(Tensor)
template randint_like*(ty: TensorType; self: var Tensor, high: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint_like", self, high, options).to(Tensor)
template randint_like*(_: typedesc[torch]; self: var Tensor, high: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::randint_like", self, high, options).to(Tensor)
template randint_like*(ty: TensorType; self: var Tensor, low: int64, high: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randint_like", self, low, high, options).to(Tensor)
template randint_like*(_: typedesc[torch]; self: var Tensor, low: int64, high: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::randint_like", self, low, high, options).to(Tensor)
template randn*(ty: TensorType; size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randn", size, options).to(Tensor)
template randn*(_: typedesc[torch]; size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::randn", size, options).to(Tensor)
template randn*(ty: TensorType; size: IntList, generator: pointer, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randn", size, generator, options).to(Tensor)
template randn*(_: typedesc[torch]; size: IntList, generator: pointer, options: var ATensorOptions): Tensor = dynamicCCall("at::randn", size, generator, options).to(Tensor)
template randn_out*(ty: TensorType; aresult: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("randn_out", aresult, size).to(Tensor)
template randn_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList): Tensor = dynamicCCall("at::randn_out", aresult, size).to(Tensor)
template randn_out*(ty: TensorType; aresult: var Tensor, size: IntList, generator: pointer): Tensor = ty.dynamicCppCall("randn_out", aresult, size, generator).to(Tensor)
template randn_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList, generator: pointer): Tensor = dynamicCCall("at::randn_out", aresult, size, generator).to(Tensor)
template randn_like*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("randn_like", self).to(Tensor)
template randn_like*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::randn_like", self).to(Tensor)
template randn_like*(ty: TensorType; self: var Tensor, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randn_like", self, options).to(Tensor)
template randn_like*(_: typedesc[torch]; self: var Tensor, options: var ATensorOptions): Tensor = dynamicCCall("at::randn_like", self, options).to(Tensor)
template randn*(ty: TensorType; dtype: var TensorType, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = ty.dynamicCppCall("randn", dtype, size, generator).to(Tensor)
template randn*(_: typedesc[torch]; dtype: var TensorType, size: IntList, generator: pointer = nil): Tensor {.deprecated.} = dynamicCCall("at::randn", dtype, size, generator).to(Tensor)
template randperm*(ty: TensorType; n: int64, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randperm", n, options).to(Tensor)
template randperm*(_: typedesc[torch]; n: int64, options: var ATensorOptions): Tensor = dynamicCCall("at::randperm", n, options).to(Tensor)
template randperm*(ty: TensorType; n: int64, generator: pointer, options: var ATensorOptions): Tensor = ty.dynamicCppCall("randperm", n, generator, options).to(Tensor)
template randperm*(_: typedesc[torch]; n: int64, generator: pointer, options: var ATensorOptions): Tensor = dynamicCCall("at::randperm", n, generator, options).to(Tensor)
template randperm_out*(ty: TensorType; aresult: var Tensor, n: int64): Tensor = ty.dynamicCppCall("randperm_out", aresult, n).to(Tensor)
template randperm_out*(_: typedesc[torch]; aresult: var Tensor, n: int64): Tensor = dynamicCCall("at::randperm_out", aresult, n).to(Tensor)
template randperm_out*(ty: TensorType; aresult: var Tensor, n: int64, generator: pointer): Tensor = ty.dynamicCppCall("randperm_out", aresult, n, generator).to(Tensor)
template randperm_out*(_: typedesc[torch]; aresult: var Tensor, n: int64, generator: pointer): Tensor = dynamicCCall("at::randperm_out", aresult, n, generator).to(Tensor)
template randperm*(ty: TensorType; dtype: var TensorType, n: int64, generator: pointer = nil): Tensor {.deprecated.} = ty.dynamicCppCall("randperm", dtype, n, generator).to(Tensor)
template randperm*(_: typedesc[torch]; dtype: var TensorType, n: int64, generator: pointer = nil): Tensor {.deprecated.} = dynamicCCall("at::randperm", dtype, n, generator).to(Tensor)
template range*(ty: TensorType; start: float, aend: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("range", start, aend, options).to(Tensor)
template range*(_: typedesc[torch]; start: float, aend: float, options: var ATensorOptions): Tensor = dynamicCCall("at::range", start, aend, options).to(Tensor)
template range*(ty: TensorType; start: float, aend: float, step: float, options: var ATensorOptions): Tensor = ty.dynamicCppCall("range", start, aend, step, options).to(Tensor)
template range*(_: typedesc[torch]; start: float, aend: float, step: float, options: var ATensorOptions): Tensor = dynamicCCall("at::range", start, aend, step, options).to(Tensor)
template range_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float): Tensor = ty.dynamicCppCall("range_out", aresult, start, aend).to(Tensor)
template range_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float): Tensor = dynamicCCall("at::range_out", aresult, start, aend).to(Tensor)
template range_out*(ty: TensorType; aresult: var Tensor, start: float, aend: float, step: float): Tensor = ty.dynamicCppCall("range_out", aresult, start, aend, step).to(Tensor)
template range_out*(_: typedesc[torch]; aresult: var Tensor, start: float, aend: float, step: float): Tensor = dynamicCCall("at::range_out", aresult, start, aend, step).to(Tensor)
template range*(ty: TensorType; dtype: var TensorType, start: float, aend: float, step: float = 1): Tensor {.deprecated.} = ty.dynamicCppCall("range", dtype, start, aend, step).to(Tensor)
template range*(_: typedesc[torch]; dtype: var TensorType, start: float, aend: float, step: float = 1): Tensor {.deprecated.} = dynamicCCall("at::range", dtype, start, aend, step).to(Tensor)
template repeat*(self: Tensor, repeats: IntList): Tensor = self.dynamicCppCall("repeat", repeats).to(Tensor)
template repeat*(ty: TensorType; self: var Tensor, repeats: IntList): Tensor = ty.dynamicCppCall("repeat", self, repeats).to(Tensor)
template reshape*(self: Tensor, shape: IntList): Tensor = self.dynamicCppCall("reshape", shape).to(Tensor)
template reshape*(ty: TensorType; self: var Tensor, shape: IntList): Tensor = ty.dynamicCppCall("reshape", self, shape).to(Tensor)
template reshape*(_: typedesc[torch]; self: var Tensor, shape: IntList): Tensor = dynamicCCall("at::reshape", self, shape).to(Tensor)
template reshape_as*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("reshape_as", other).to(Tensor)
template reshape_as*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("reshape_as", self, other).to(Tensor)
template RoiPooling2d_forward*(ty: TensorType; input: var Tensor, rois: var Tensor, pooledHeight: int64, pooledWidth: int64, spatialScale: float64): (Tensor, Tensor) = ty.dynamicCppCall("RoiPooling2d_forward", input, rois, pooledHeight, pooledWidth, spatialScale).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template RoiPooling2d_forward*(_: typedesc[torch]; input: var Tensor, rois: var Tensor, pooledHeight: int64, pooledWidth: int64, spatialScale: float64): (Tensor, Tensor) = dynamicCCall("at::RoiPooling2d_forward", input, rois, pooledHeight, pooledWidth, spatialScale).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template RoiPooling2d_backward*(ty: TensorType; input: var Tensor, rois: var Tensor, pooledHeight: int64, pooledWidth: int64, spatialScale: float64, gradOutput: var Tensor, argmaxes: var Tensor): Tensor = ty.dynamicCppCall("RoiPooling2d_backward", input, rois, pooledHeight, pooledWidth, spatialScale, gradOutput, argmaxes).to(Tensor)
template RoiPooling2d_backward*(_: typedesc[torch]; input: var Tensor, rois: var Tensor, pooledHeight: int64, pooledWidth: int64, spatialScale: float64, gradOutput: var Tensor, argmaxes: var Tensor): Tensor = dynamicCCall("at::RoiPooling2d_backward", input, rois, pooledHeight, pooledWidth, spatialScale, gradOutput, argmaxes).to(Tensor)
template round*(self: Tensor): Tensor = self.dynamicCppCall("round").to(Tensor)
template round*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("round", self).to(Tensor)
template round*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::round", self).to(Tensor)
template round_u*(self: Tensor): Tensor = self.dynamicCppCall("round_").to(Tensor)
template round_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("round_", self).to(Tensor)
template round_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::round_", self).to(Tensor)
template round_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("round_out", aresult, self).to(Tensor)
template round_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::round_out", aresult, self).to(Tensor)
template rrelu*(ty: TensorType; self: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("rrelu", self, lower, upper, training, generator).to(Tensor)
template rrelu*(_: typedesc[torch]; self: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::rrelu", self, lower, upper, training, generator).to(Tensor)
template rrelu_u*(ty: TensorType; self: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = ty.dynamicCppCall("rrelu_", self, lower, upper, training, generator).to(Tensor)
template rrelu_u*(_: typedesc[torch]; self: var Tensor, lower: float, upper: float, training: bool = false, generator: pointer = nil): Tensor = dynamicCCall("at::rrelu_", self, lower, upper, training, generator).to(Tensor)
template relu*(self: Tensor): Tensor = self.dynamicCppCall("relu").to(Tensor)
template relu*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("relu", self).to(Tensor)
template relu*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::relu", self).to(Tensor)
template relu_u*(self: Tensor): Tensor = self.dynamicCppCall("relu_").to(Tensor)
template relu_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("relu_", self).to(Tensor)
template relu_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::relu_", self).to(Tensor)
template hardshrink*(self: Tensor, lambd: float): Tensor = self.dynamicCppCall("hardshrink", lambd).to(Tensor)
template hardshrink*(ty: TensorType; self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("hardshrink", self, lambd).to(Tensor)
template hardshrink*(_: typedesc[torch]; self: var Tensor, lambd: float): Tensor = dynamicCCall("at::hardshrink", self, lambd).to(Tensor)
template hardshrink_backward*(self: Tensor, grad_out: var Tensor, lambd: float): Tensor = self.dynamicCppCall("hardshrink_backward", grad_out, lambd).to(Tensor)
template hardshrink_backward*(ty: TensorType; grad_out: var Tensor, self: var Tensor, lambd: float): Tensor = ty.dynamicCppCall("hardshrink_backward", grad_out, self, lambd).to(Tensor)
template hardshrink_backward*(_: typedesc[torch]; grad_out: var Tensor, self: var Tensor, lambd: float): Tensor = dynamicCCall("at::hardshrink_backward", grad_out, self, lambd).to(Tensor)
template rsqrt*(self: Tensor): Tensor = self.dynamicCppCall("rsqrt").to(Tensor)
template rsqrt*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("rsqrt", self).to(Tensor)
template rsqrt*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::rsqrt", self).to(Tensor)
template rsqrt_u*(self: Tensor): Tensor = self.dynamicCppCall("rsqrt_").to(Tensor)
template rsqrt_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("rsqrt_", self).to(Tensor)
template rsqrt_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::rsqrt_", self).to(Tensor)
template rsqrt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("rsqrt_out", aresult, self).to(Tensor)
template rsqrt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::rsqrt_out", aresult, self).to(Tensor)
template select*(self: Tensor, dim: int64, index: int64): Tensor = self.dynamicCppCall("select", dim, index).to(Tensor)
template select*(ty: TensorType; self: var Tensor, dim: int64, index: int64): Tensor = ty.dynamicCppCall("select", self, dim, index).to(Tensor)
template select*(_: typedesc[torch]; self: var Tensor, dim: int64, index: int64): Tensor = dynamicCCall("at::select", self, dim, index).to(Tensor)
template selu*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("selu", self).to(Tensor)
template selu*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::selu", self).to(Tensor)
template selu_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("selu_", self).to(Tensor)
template selu_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::selu_", self).to(Tensor)
template celu*(ty: TensorType; self: var Tensor, alpha: float): Tensor = ty.dynamicCppCall("celu", self, alpha).to(Tensor)
template celu*(_: typedesc[torch]; self: var Tensor, alpha: float): Tensor = dynamicCCall("at::celu", self, alpha).to(Tensor)
template celu_u*(ty: TensorType; self: var Tensor, alpha: float): Tensor = ty.dynamicCppCall("celu_", self, alpha).to(Tensor)
template celu_u*(_: typedesc[torch]; self: var Tensor, alpha: float): Tensor = dynamicCCall("at::celu_", self, alpha).to(Tensor)
template sigmoid*(self: Tensor): Tensor = self.dynamicCppCall("sigmoid").to(Tensor)
template sigmoid*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sigmoid", self).to(Tensor)
template sigmoid*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sigmoid", self).to(Tensor)
template sigmoid_u*(self: Tensor): Tensor = self.dynamicCppCall("sigmoid_").to(Tensor)
template sigmoid_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sigmoid_", self).to(Tensor)
template sigmoid_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sigmoid_", self).to(Tensor)
template sigmoid_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("sigmoid_out", aresult, self).to(Tensor)
template sigmoid_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::sigmoid_out", aresult, self).to(Tensor)
template sin*(self: Tensor): Tensor = self.dynamicCppCall("sin").to(Tensor)
template sin*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sin", self).to(Tensor)
template sin*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sin", self).to(Tensor)
template sin_u*(self: Tensor): Tensor = self.dynamicCppCall("sin_").to(Tensor)
template sin_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sin_", self).to(Tensor)
template sin_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sin_", self).to(Tensor)
template sin_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("sin_out", aresult, self).to(Tensor)
template sin_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::sin_out", aresult, self).to(Tensor)
template sinh*(self: Tensor): Tensor = self.dynamicCppCall("sinh").to(Tensor)
template sinh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sinh", self).to(Tensor)
template sinh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sinh", self).to(Tensor)
template sinh_u*(self: Tensor): Tensor = self.dynamicCppCall("sinh_").to(Tensor)
template sinh_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sinh_", self).to(Tensor)
template sinh_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sinh_", self).to(Tensor)
template sinh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("sinh_out", aresult, self).to(Tensor)
template sinh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::sinh_out", aresult, self).to(Tensor)
template size*(self: Tensor, dim: int64): int64 = self.dynamicCppCall("size", dim).to(int64)
template size*(ty: TensorType; self: var Tensor, dim: int64): int64 = ty.dynamicCppCall("size", self, dim).to(int64)
template size*(_: typedesc[torch]; self: var Tensor, dim: int64): int64 = dynamicCCall("at::size", self, dim).to(int64)
template slice*(self: Tensor, dim: int64 = 0, start: int64 = 0, aend: int64 = 9223372036854775807, step: int64 = 1): Tensor = self.dynamicCppCall("slice", dim, start, aend, step).to(Tensor)
template slice*(ty: TensorType; self: var Tensor, dim: int64 = 0, start: int64 = 0, aend: int64 = 9223372036854775807, step: int64 = 1): Tensor = ty.dynamicCppCall("slice", self, dim, start, aend, step).to(Tensor)
template slice*(_: typedesc[torch]; self: var Tensor, dim: int64 = 0, start: int64 = 0, aend: int64 = 9223372036854775807, step: int64 = 1): Tensor = dynamicCCall("at::slice", self, dim, start, aend, step).to(Tensor)
template slogdet*(self: Tensor): (Tensor, Tensor) = self.dynamicCppCall("slogdet").to(StdTuple2[Tensor, Tensor]).toNimTuple()
template slogdet*(ty: TensorType; self: var Tensor): (Tensor, Tensor) = ty.dynamicCppCall("slogdet", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template slogdet*(_: typedesc[torch]; self: var Tensor): (Tensor, Tensor) = dynamicCCall("at::slogdet", self).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template smm*(self: Tensor, mat2: var Tensor): Tensor = self.dynamicCppCall("smm", mat2).to(Tensor)
template smm*(ty: TensorType; self: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("smm", self, mat2).to(Tensor)
template smm*(_: typedesc[torch]; self: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::smm", self, mat2).to(Tensor)
template softmax*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("softmax", dim).to(Tensor)
template softmax*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("softmax", self, dim).to(Tensor)
template softmax*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::softmax", self, dim).to(Tensor)
template softmax_backward_data*(self: Tensor, grad_output: var Tensor, output: var Tensor, dim: int64): Tensor = self.dynamicCppCall("softmax_backward_data", grad_output, output, dim).to(Tensor)
template softmax_backward_data*(ty: TensorType; grad_output: var Tensor, output: var Tensor, dim: int64, self: var Tensor): Tensor = ty.dynamicCppCall("softmax_backward_data", grad_output, output, dim, self).to(Tensor)
template softmax_backward_data*(_: typedesc[torch]; grad_output: var Tensor, output: var Tensor, dim: int64, self: var Tensor): Tensor = dynamicCCall("at::softmax_backward_data", grad_output, output, dim, self).to(Tensor)
template u_sparse_add_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("_sparse_add_out", aresult, self, other, alpha).to(Tensor)
template u_sparse_add_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = dynamicCCall("at::_sparse_add_out", aresult, self, other, alpha).to(Tensor)
template u_sparse_dense_add_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: ASparseTensorRef, alpha: float = 1): Tensor = ty.dynamicCppCall("_sparse_dense_add_out", aresult, self, other, alpha).to(Tensor)
template u_sparse_dense_add_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: ASparseTensorRef, alpha: float = 1): Tensor = dynamicCCall("at::_sparse_dense_add_out", aresult, self, other, alpha).to(Tensor)
template u_sparse_div_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("_sparse_div_out", aresult, self, other).to(Tensor)
template u_sparse_div_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::_sparse_div_out", aresult, self, other).to(Tensor)
template u_sparse_mul_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("_sparse_mul_out", aresult, self, other).to(Tensor)
template u_sparse_mul_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::_sparse_mul_out", aresult, self, other).to(Tensor)
template u_sparse_mul_scalar_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: float): Tensor = ty.dynamicCppCall("_sparse_mul_scalar_out", aresult, self, other).to(Tensor)
template u_sparse_mul_scalar_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: float): Tensor = dynamicCCall("at::_sparse_mul_scalar_out", aresult, self, other).to(Tensor)
template split*(self: Tensor, split_size: int64, dim: int64 = 0): TensorList = self.dynamicCppCall("split", split_size, dim).to(TensorList)
template split*(ty: TensorType; self: var Tensor, split_size: int64, dim: int64 = 0): TensorList = ty.dynamicCppCall("split", self, split_size, dim).to(TensorList)
template split*(_: typedesc[torch]; self: var Tensor, split_size: int64, dim: int64 = 0): TensorList = dynamicCCall("at::split", self, split_size, dim).to(TensorList)
template split_with_sizes*(self: Tensor, split_sizes: IntList, dim: int64 = 0): TensorList = self.dynamicCppCall("split_with_sizes", split_sizes, dim).to(TensorList)
template split_with_sizes*(ty: TensorType; self: var Tensor, split_sizes: IntList, dim: int64 = 0): TensorList = ty.dynamicCppCall("split_with_sizes", self, split_sizes, dim).to(TensorList)
template split_with_sizes*(_: typedesc[torch]; self: var Tensor, split_sizes: IntList, dim: int64 = 0): TensorList = dynamicCCall("at::split_with_sizes", self, split_sizes, dim).to(TensorList)
template squeeze*(self: Tensor): Tensor = self.dynamicCppCall("squeeze").to(Tensor)
template squeeze*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("squeeze", self).to(Tensor)
template squeeze*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::squeeze", self).to(Tensor)
template squeeze*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("squeeze", dim).to(Tensor)
template squeeze*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("squeeze", self, dim).to(Tensor)
template squeeze*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::squeeze", self, dim).to(Tensor)
template squeeze_u*(self: Tensor): Tensor = self.dynamicCppCall("squeeze_").to(Tensor)
template squeeze_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("squeeze_", self).to(Tensor)
template squeeze_u*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("squeeze_", dim).to(Tensor)
template squeeze_u*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("squeeze_", self, dim).to(Tensor)
template sspaddmm*(self: Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("sspaddmm", mat1, mat2, beta, alpha).to(Tensor)
template sspaddmm*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("sspaddmm", self, mat1, mat2, beta, alpha).to(Tensor)
template sspaddmm*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::sspaddmm", self, mat1, mat2, beta, alpha).to(Tensor)
template sspaddmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("sspaddmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template sspaddmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::sspaddmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template stack*(ty: TensorType; tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("stack", tensors, dim).to(Tensor)
template stack*(_: typedesc[torch]; tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::stack", tensors, dim).to(Tensor)
template stack_out*(ty: TensorType; aresult: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = ty.dynamicCppCall("stack_out", aresult, tensors, dim).to(Tensor)
template stack_out*(_: typedesc[torch]; aresult: var Tensor, tensors: TensorList, dim: int64 = 0): Tensor = dynamicCCall("at::stack_out", aresult, tensors, dim).to(Tensor)
template stft*(self: Tensor, n_fft: int64, hop_length: int64, win_length: int64, window: var Tensor, normalized: bool = false, onesided: bool = true): Tensor = self.dynamicCppCall("stft", n_fft, hop_length, win_length, window, normalized, onesided).to(Tensor)
template stft*(ty: TensorType; self: var Tensor, n_fft: int64, hop_length: int64, win_length: int64, window: var Tensor, normalized: bool = false, onesided: bool = true): Tensor = ty.dynamicCppCall("stft", self, n_fft, hop_length, win_length, window, normalized, onesided).to(Tensor)
template stft*(_: typedesc[torch]; self: var Tensor, n_fft: int64, hop_length: int64, win_length: int64, window: var Tensor, normalized: bool = false, onesided: bool = true): Tensor = dynamicCCall("at::stft", self, n_fft, hop_length, win_length, window, normalized, onesided).to(Tensor)
template stride*(self: Tensor, dim: int64): int64 = self.dynamicCppCall("stride", dim).to(int64)
template stride*(ty: TensorType; self: var Tensor, dim: int64): int64 = ty.dynamicCppCall("stride", self, dim).to(int64)
template stride*(_: typedesc[torch]; self: var Tensor, dim: int64): int64 = dynamicCCall("at::stride", self, dim).to(int64)
template sum*(self: Tensor, dtype: AScalarType): Tensor = self.dynamicCppCall("sum", dtype).to(Tensor)
template sum*(ty: TensorType; self: var Tensor, dtype: AScalarType): Tensor = ty.dynamicCppCall("sum", self, dtype).to(Tensor)
template sum*(_: typedesc[torch]; self: var Tensor, dtype: AScalarType): Tensor = dynamicCCall("at::sum", self, dtype).to(Tensor)
template sum*(self: Tensor): Tensor = self.dynamicCppCall("sum").to(Tensor)
template sum*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sum", self).to(Tensor)
template sum*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sum", self).to(Tensor)
template u_sum*(self: Tensor): Tensor = self.dynamicCppCall("_sum").to(Tensor)
template u_sum*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_sum", self).to(Tensor)
template u_sum*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_sum", self).to(Tensor)
template sum*(self: Tensor, dim: IntList, keepdim: bool, dtype: AScalarType): Tensor = self.dynamicCppCall("sum", dim, keepdim, dtype).to(Tensor)
template sum*(ty: TensorType; self: var Tensor, dim: IntList, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("sum", self, dim, keepdim, dtype).to(Tensor)
template sum*(_: typedesc[torch]; self: var Tensor, dim: IntList, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::sum", self, dim, keepdim, dtype).to(Tensor)
template sum*(self: Tensor, dim: IntList, keepdim: bool = false): Tensor = self.dynamicCppCall("sum", dim, keepdim).to(Tensor)
template sum*(ty: TensorType; self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = ty.dynamicCppCall("sum", self, dim, keepdim).to(Tensor)
template sum*(_: typedesc[torch]; self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = dynamicCCall("at::sum", self, dim, keepdim).to(Tensor)
template sum*(self: Tensor, dim: IntList, dtype: AScalarType): Tensor = self.dynamicCppCall("sum", dim, dtype).to(Tensor)
template sum*(ty: TensorType; self: var Tensor, dim: IntList, dtype: AScalarType): Tensor = ty.dynamicCppCall("sum", self, dim, dtype).to(Tensor)
template sum*(_: typedesc[torch]; self: var Tensor, dim: IntList, dtype: AScalarType): Tensor = dynamicCCall("at::sum", self, dim, dtype).to(Tensor)
template u_sum*(self: Tensor, dim: IntList, keepdim: bool = false): Tensor = self.dynamicCppCall("_sum", dim, keepdim).to(Tensor)
template u_sum*(ty: TensorType; self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = ty.dynamicCppCall("_sum", self, dim, keepdim).to(Tensor)
template u_sum*(_: typedesc[torch]; self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = dynamicCCall("at::_sum", self, dim, keepdim).to(Tensor)
template sum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("sum_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template sum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::sum_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template sum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = ty.dynamicCppCall("sum_out", aresult, self, dim, keepdim).to(Tensor)
template sum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = dynamicCCall("at::sum_out", aresult, self, dim, keepdim).to(Tensor)
template sum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: IntList, dtype: AScalarType): Tensor = ty.dynamicCppCall("sum_out", aresult, self, dim, dtype).to(Tensor)
template sum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: IntList, dtype: AScalarType): Tensor = dynamicCCall("at::sum_out", aresult, self, dim, dtype).to(Tensor)
template u_sum_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = ty.dynamicCppCall("_sum_out", aresult, self, dim, keepdim).to(Tensor)
template u_sum_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: IntList, keepdim: bool = false): Tensor = dynamicCCall("at::_sum_out", aresult, self, dim, keepdim).to(Tensor)
template u_sum_cuda_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_sum_cuda_out", aresult, self, dim, keepdim).to(Tensor)
template u_sum_cuda_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_sum_cuda_out", aresult, self, dim, keepdim).to(Tensor)
template sqrt*(self: Tensor): Tensor = self.dynamicCppCall("sqrt").to(Tensor)
template sqrt*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sqrt", self).to(Tensor)
template sqrt*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sqrt", self).to(Tensor)
template sqrt_u*(self: Tensor): Tensor = self.dynamicCppCall("sqrt_").to(Tensor)
template sqrt_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("sqrt_", self).to(Tensor)
template sqrt_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::sqrt_", self).to(Tensor)
template sqrt_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("sqrt_out", aresult, self).to(Tensor)
template sqrt_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::sqrt_out", aresult, self).to(Tensor)
template std*(self: Tensor, unbiased: bool = true): Tensor = self.dynamicCppCall("std", unbiased).to(Tensor)
template std*(ty: TensorType; self: var Tensor, unbiased: bool = true): Tensor = ty.dynamicCppCall("std", self, unbiased).to(Tensor)
template std*(_: typedesc[torch]; self: var Tensor, unbiased: bool = true): Tensor = dynamicCCall("at::std", self, unbiased).to(Tensor)
template std*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = self.dynamicCppCall("std", dim, unbiased, keepdim).to(Tensor)
template std*(ty: TensorType; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("std", self, dim, unbiased, keepdim).to(Tensor)
template std*(_: typedesc[torch]; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::std", self, dim, unbiased, keepdim).to(Tensor)
template std_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template std_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template prod*(self: Tensor, dtype: AScalarType): Tensor = self.dynamicCppCall("prod", dtype).to(Tensor)
template prod*(ty: TensorType; self: var Tensor, dtype: AScalarType): Tensor = ty.dynamicCppCall("prod", self, dtype).to(Tensor)
template prod*(_: typedesc[torch]; self: var Tensor, dtype: AScalarType): Tensor = dynamicCCall("at::prod", self, dtype).to(Tensor)
template prod*(self: Tensor): Tensor = self.dynamicCppCall("prod").to(Tensor)
template prod*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("prod", self).to(Tensor)
template prod*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::prod", self).to(Tensor)
template u_prod*(self: Tensor): Tensor = self.dynamicCppCall("_prod").to(Tensor)
template u_prod*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_prod", self).to(Tensor)
template u_prod*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::_prod", self).to(Tensor)
template prod*(self: Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = self.dynamicCppCall("prod", dim, keepdim, dtype).to(Tensor)
template prod*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("prod", self, dim, keepdim, dtype).to(Tensor)
template prod*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::prod", self, dim, keepdim, dtype).to(Tensor)
template prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("prod", dim, keepdim).to(Tensor)
template prod*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("prod", self, dim, keepdim).to(Tensor)
template prod*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::prod", self, dim, keepdim).to(Tensor)
template prod*(self: Tensor, dim: int64, dtype: AScalarType): Tensor = self.dynamicCppCall("prod", dim, dtype).to(Tensor)
template prod*(ty: TensorType; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("prod", self, dim, dtype).to(Tensor)
template prod*(_: typedesc[torch]; self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::prod", self, dim, dtype).to(Tensor)
template u_prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("_prod", dim, keepdim).to(Tensor)
template u_prod*(ty: TensorType; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_prod", self, dim, keepdim).to(Tensor)
template u_prod*(_: typedesc[torch]; self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_prod", self, dim, keepdim).to(Tensor)
template prod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = ty.dynamicCppCall("prod_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template prod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool, dtype: AScalarType): Tensor = dynamicCCall("at::prod_out", aresult, self, dim, keepdim, dtype).to(Tensor)
template prod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("prod_out", aresult, self, dim, keepdim).to(Tensor)
template prod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::prod_out", aresult, self, dim, keepdim).to(Tensor)
template prod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = ty.dynamicCppCall("prod_out", aresult, self, dim, dtype).to(Tensor)
template prod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, dtype: AScalarType): Tensor = dynamicCCall("at::prod_out", aresult, self, dim, dtype).to(Tensor)
template u_prod_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("_prod_out", aresult, self, dim, keepdim).to(Tensor)
template u_prod_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::_prod_out", aresult, self, dim, keepdim).to(Tensor)
template t*(self: Tensor): Tensor = self.dynamicCppCall("t").to(Tensor)
template t*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("t", self).to(Tensor)
template t*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::t", self).to(Tensor)
template t_u*(self: Tensor): Tensor = self.dynamicCppCall("t_").to(Tensor)
template t_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("t_", self).to(Tensor)
template tan*(self: Tensor): Tensor = self.dynamicCppCall("tan").to(Tensor)
template tan*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("tan", self).to(Tensor)
template tan*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::tan", self).to(Tensor)
template tan_u*(self: Tensor): Tensor = self.dynamicCppCall("tan_").to(Tensor)
template tan_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("tan_", self).to(Tensor)
template tan_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::tan_", self).to(Tensor)
template tan_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("tan_out", aresult, self).to(Tensor)
template tan_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::tan_out", aresult, self).to(Tensor)
template tanh*(self: Tensor): Tensor = self.dynamicCppCall("tanh").to(Tensor)
template tanh*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("tanh", self).to(Tensor)
template tanh*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::tanh", self).to(Tensor)
template tanh_u*(self: Tensor): Tensor = self.dynamicCppCall("tanh_").to(Tensor)
template tanh_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("tanh_", self).to(Tensor)
template tanh_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::tanh_", self).to(Tensor)
template tanh_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("tanh_out", aresult, self).to(Tensor)
template tanh_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::tanh_out", aresult, self).to(Tensor)
template transpose*(self: Tensor, dim0: int64, dim1: int64): Tensor = self.dynamicCppCall("transpose", dim0, dim1).to(Tensor)
template transpose*(ty: TensorType; self: var Tensor, dim0: int64, dim1: int64): Tensor = ty.dynamicCppCall("transpose", self, dim0, dim1).to(Tensor)
template transpose*(_: typedesc[torch]; self: var Tensor, dim0: int64, dim1: int64): Tensor = dynamicCCall("at::transpose", self, dim0, dim1).to(Tensor)
template transpose_u*(self: Tensor, dim0: int64, dim1: int64): Tensor = self.dynamicCppCall("transpose_", dim0, dim1).to(Tensor)
template transpose_u*(ty: TensorType; self: var Tensor, dim0: int64, dim1: int64): Tensor = ty.dynamicCppCall("transpose_", self, dim0, dim1).to(Tensor)
template flip*(self: Tensor, dims: IntList): Tensor = self.dynamicCppCall("flip", dims).to(Tensor)
template flip*(ty: TensorType; self: var Tensor, dims: IntList): Tensor = ty.dynamicCppCall("flip", self, dims).to(Tensor)
template flip*(_: typedesc[torch]; self: var Tensor, dims: IntList): Tensor = dynamicCCall("at::flip", self, dims).to(Tensor)
template rot90*(self: Tensor, k: int64 = 1, dims: IntList): Tensor = self.dynamicCppCall("rot90", k, dims).to(Tensor)
template rot90*(ty: TensorType; self: var Tensor, k: int64 = 1, dims: IntList): Tensor = ty.dynamicCppCall("rot90", self, k, dims).to(Tensor)
template rot90*(_: typedesc[torch]; self: var Tensor, k: int64 = 1, dims: IntList): Tensor = dynamicCCall("at::rot90", self, k, dims).to(Tensor)
template u_trilinear*(ty: TensorType; i1: var Tensor, i2: var Tensor, i3: var Tensor, expand1: IntList, expand2: IntList, expand3: IntList, sumdim: IntList, unroll_dim: int64 = 1): Tensor = ty.dynamicCppCall("_trilinear", i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim).to(Tensor)
template u_trilinear*(_: typedesc[torch]; i1: var Tensor, i2: var Tensor, i3: var Tensor, expand1: IntList, expand2: IntList, expand3: IntList, sumdim: IntList, unroll_dim: int64 = 1): Tensor = dynamicCCall("at::_trilinear", i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim).to(Tensor)
template triplet_margin_loss*(ty: TensorType; anchor: var Tensor, positive: var Tensor, negative: var Tensor, margin: float64, p: float64 = 2, eps: float64, swap: bool = false, reduction: int64): Tensor = ty.dynamicCppCall("triplet_margin_loss", anchor, positive, negative, margin, p, eps, swap, reduction).to(Tensor)
template triplet_margin_loss*(_: typedesc[torch]; anchor: var Tensor, positive: var Tensor, negative: var Tensor, margin: float64, p: float64 = 2, eps: float64, swap: bool = false, reduction: int64): Tensor = dynamicCCall("at::triplet_margin_loss", anchor, positive, negative, margin, p, eps, swap, reduction).to(Tensor)
template trunc*(self: Tensor): Tensor = self.dynamicCppCall("trunc").to(Tensor)
template trunc*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("trunc", self).to(Tensor)
template trunc*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::trunc", self).to(Tensor)
template trunc_u*(self: Tensor): Tensor = self.dynamicCppCall("trunc_").to(Tensor)
template trunc_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("trunc_", self).to(Tensor)
template trunc_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::trunc_", self).to(Tensor)
template trunc_out*(ty: TensorType; aresult: var Tensor, self: var Tensor): Tensor = ty.dynamicCppCall("trunc_out", aresult, self).to(Tensor)
template trunc_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor): Tensor = dynamicCCall("at::trunc_out", aresult, self).to(Tensor)
template type_as*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("type_as", other).to(Tensor)
template type_as*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("type_as", self, other).to(Tensor)
template u_unique*(self: Tensor, sorted: bool = false, return_inverse: bool = false): (Tensor, Tensor) = self.dynamicCppCall("_unique", sorted, return_inverse).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_unique*(ty: TensorType; self: var Tensor, sorted: bool = false, return_inverse: bool = false): (Tensor, Tensor) = ty.dynamicCppCall("_unique", self, sorted, return_inverse).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_unique*(_: typedesc[torch]; self: var Tensor, sorted: bool = false, return_inverse: bool = false): (Tensor, Tensor) = dynamicCCall("at::_unique", self, sorted, return_inverse).to(StdTuple2[Tensor, Tensor]).toNimTuple()
template u_unsafe_view*(ty: TensorType; self: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("_unsafe_view", self, size).to(Tensor)
template u_unsafe_view*(_: typedesc[torch]; self: var Tensor, size: IntList): Tensor = dynamicCCall("at::_unsafe_view", self, size).to(Tensor)
template unsqueeze*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("unsqueeze", dim).to(Tensor)
template unsqueeze*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("unsqueeze", self, dim).to(Tensor)
template unsqueeze*(_: typedesc[torch]; self: var Tensor, dim: int64): Tensor = dynamicCCall("at::unsqueeze", self, dim).to(Tensor)
template unsqueeze_u*(self: Tensor, dim: int64): Tensor = self.dynamicCppCall("unsqueeze_", dim).to(Tensor)
template unsqueeze_u*(ty: TensorType; self: var Tensor, dim: int64): Tensor = ty.dynamicCppCall("unsqueeze_", self, dim).to(Tensor)
template avar*(self: Tensor, unbiased: bool = true): Tensor = self.dynamicCppCall("var", unbiased).to(Tensor)
template avar*(ty: TensorType; self: var Tensor, unbiased: bool = true): Tensor = ty.dynamicCppCall("var", self, unbiased).to(Tensor)
template avar*(_: typedesc[torch]; self: var Tensor, unbiased: bool = true): Tensor = dynamicCCall("at::var", self, unbiased).to(Tensor)
template avar*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = self.dynamicCppCall("var", dim, unbiased, keepdim).to(Tensor)
template avar*(ty: TensorType; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("var", self, dim, unbiased, keepdim).to(Tensor)
template avar*(_: typedesc[torch]; self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::var", self, dim, unbiased, keepdim).to(Tensor)
template var_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = ty.dynamicCppCall("var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template var_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor = dynamicCCall("at::var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
template view_as*(self: Tensor, other: var Tensor): Tensor = self.dynamicCppCall("view_as", other).to(Tensor)
template view_as*(ty: TensorType; self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("view_as", self, other).to(Tensor)
template where*(self: Tensor, condition: var Tensor, other: var Tensor): Tensor = self.dynamicCppCall("where", condition, other).to(Tensor)
template where*(ty: TensorType; condition: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("where", condition, self, other).to(Tensor)
template where*(_: typedesc[torch]; condition: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::where", condition, self, other).to(Tensor)
template u_s_where*(self: Tensor, condition: var Tensor, other: var Tensor): Tensor = self.dynamicCppCall("_s_where", condition, other).to(Tensor)
template u_s_where*(ty: TensorType; condition: var Tensor, self: var Tensor, other: var Tensor): Tensor = ty.dynamicCppCall("_s_where", condition, self, other).to(Tensor)
template u_s_where*(_: typedesc[torch]; condition: var Tensor, self: var Tensor, other: var Tensor): Tensor = dynamicCCall("at::_s_where", condition, self, other).to(Tensor)
template zeros*(ty: TensorType; size: IntList, options: var ATensorOptions): Tensor = ty.dynamicCppCall("zeros", size, options).to(Tensor)
template zeros*(_: typedesc[torch]; size: IntList, options: var ATensorOptions): Tensor = dynamicCCall("at::zeros", size, options).to(Tensor)
template zeros_out*(ty: TensorType; aresult: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("zeros_out", aresult, size).to(Tensor)
template zeros_out*(_: typedesc[torch]; aresult: var Tensor, size: IntList): Tensor = dynamicCCall("at::zeros_out", aresult, size).to(Tensor)
template zeros_like*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("zeros_like", self).to(Tensor)
template zeros_like*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::zeros_like", self).to(Tensor)
template zeros_like*(ty: TensorType; self: var Tensor, options: var ATensorOptions): Tensor = ty.dynamicCppCall("zeros_like", self, options).to(Tensor)
template zeros_like*(_: typedesc[torch]; self: var Tensor, options: var ATensorOptions): Tensor = dynamicCCall("at::zeros_like", self, options).to(Tensor)
template zeros*(ty: TensorType; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = ty.dynamicCppCall("zeros", dtype, size).to(Tensor)
template zeros*(_: typedesc[torch]; dtype: var TensorType, size: IntList): Tensor {.deprecated.} = dynamicCCall("at::zeros", dtype, size).to(Tensor)
template u_standard_gamma_grad*(self: Tensor, output: var Tensor): Tensor = self.dynamicCppCall("_standard_gamma_grad", output).to(Tensor)
template u_standard_gamma_grad*(ty: TensorType; self: var Tensor, output: var Tensor): Tensor = ty.dynamicCppCall("_standard_gamma_grad", self, output).to(Tensor)
template u_standard_gamma_grad*(_: typedesc[torch]; self: var Tensor, output: var Tensor): Tensor = dynamicCCall("at::_standard_gamma_grad", self, output).to(Tensor)
template u_standard_gamma*(self: Tensor, generator: pointer = nil): Tensor = self.dynamicCppCall("_standard_gamma", generator).to(Tensor)
template u_standard_gamma*(ty: TensorType; self: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("_standard_gamma", self, generator).to(Tensor)
template u_standard_gamma*(_: typedesc[torch]; self: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::_standard_gamma", self, generator).to(Tensor)
template poisson*(ty: TensorType; self: var Tensor, generator: pointer = nil): Tensor = ty.dynamicCppCall("poisson", self, generator).to(Tensor)
template poisson*(_: typedesc[torch]; self: var Tensor, generator: pointer = nil): Tensor = dynamicCCall("at::poisson", self, generator).to(Tensor)
template native_norm*(ty: TensorType; self: var Tensor, p: float = 2): Tensor = ty.dynamicCppCall("native_norm", self, p).to(Tensor)
template native_norm*(_: typedesc[torch]; self: var Tensor, p: float = 2): Tensor = dynamicCCall("at::native_norm", self, p).to(Tensor)
template norm*(self: Tensor, p: float = 2): Tensor = self.dynamicCppCall("norm", p).to(Tensor)
template norm*(ty: TensorType; self: var Tensor, p: float = 2): Tensor = ty.dynamicCppCall("norm", self, p).to(Tensor)
template norm*(_: typedesc[torch]; self: var Tensor, p: float = 2): Tensor = dynamicCCall("at::norm", self, p).to(Tensor)
template norm*(self: Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = self.dynamicCppCall("norm", p, dim, keepdim).to(Tensor)
template norm*(ty: TensorType; self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("norm", self, p, dim, keepdim).to(Tensor)
template norm*(_: typedesc[torch]; self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::norm", self, p, dim, keepdim).to(Tensor)
template norm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = ty.dynamicCppCall("norm_out", aresult, self, p, dim, keepdim).to(Tensor)
template norm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, p: float, dim: int64, keepdim: bool = false): Tensor = dynamicCCall("at::norm_out", aresult, self, p, dim, keepdim).to(Tensor)
template native_clone*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("native_clone", self).to(Tensor)
template native_clone*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::native_clone", self).to(Tensor)
template clone*(self: Tensor): Tensor = self.dynamicCppCall("clone").to(Tensor)
template clone*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("clone", self).to(Tensor)
template clone*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::clone", self).to(Tensor)
template native_resize_as_u*(ty: TensorType; self: var Tensor, the_template: var Tensor): Tensor = ty.dynamicCppCall("native_resize_as_", self, the_template).to(Tensor)
template native_resize_as_u*(_: typedesc[torch]; self: var Tensor, the_template: var Tensor): Tensor = dynamicCCall("at::native_resize_as_", self, the_template).to(Tensor)
template resize_as_u*(self: Tensor, the_template: var Tensor): Tensor = self.dynamicCppCall("resize_as_", the_template).to(Tensor)
template resize_as_u*(ty: TensorType; self: var Tensor, the_template: var Tensor): Tensor = ty.dynamicCppCall("resize_as_", self, the_template).to(Tensor)
template resize_as_u*(_: typedesc[torch]; self: var Tensor, the_template: var Tensor): Tensor = dynamicCCall("at::resize_as_", self, the_template).to(Tensor)
template native_pow_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("native_pow_out", aresult, self, exponent).to(Tensor)
template native_pow_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = dynamicCCall("at::native_pow_out", aresult, self, exponent).to(Tensor)
template native_pow*(ty: TensorType; self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("native_pow", self, exponent).to(Tensor)
template native_pow*(_: typedesc[torch]; self: var Tensor, exponent: float): Tensor = dynamicCCall("at::native_pow", self, exponent).to(Tensor)
template pow_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("pow_out", aresult, self, exponent).to(Tensor)
template pow_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, exponent: float): Tensor = dynamicCCall("at::pow_out", aresult, self, exponent).to(Tensor)
template pow*(self: Tensor, exponent: float): Tensor = self.dynamicCppCall("pow", exponent).to(Tensor)
template pow*(ty: TensorType; self: var Tensor, exponent: float): Tensor = ty.dynamicCppCall("pow", self, exponent).to(Tensor)
template pow*(_: typedesc[torch]; self: var Tensor, exponent: float): Tensor = dynamicCCall("at::pow", self, exponent).to(Tensor)
template native_zero_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("native_zero_", self).to(Tensor)
template native_zero_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::native_zero_", self).to(Tensor)
template zero_u*(self: Tensor): Tensor = self.dynamicCppCall("zero_").to(Tensor)
template zero_u*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("zero_", self).to(Tensor)
template zero_u*(_: typedesc[torch]; self: var Tensor): Tensor = dynamicCCall("at::zero_", self).to(Tensor)
template sub_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("sub_out", aresult, self, other, alpha).to(Tensor)
template sub_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = dynamicCCall("at::sub_out", aresult, self, other, alpha).to(Tensor)
template sub*(self: Tensor, other: var Tensor, alpha: float = 1): Tensor = self.dynamicCppCall("sub", other, alpha).to(Tensor)
template sub*(ty: TensorType; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("sub", self, other, alpha).to(Tensor)
template sub*(_: typedesc[torch]; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = dynamicCCall("at::sub", self, other, alpha).to(Tensor)
template sub_u*(self: Tensor, other: var Tensor, alpha: float = 1): Tensor = self.dynamicCppCall("sub_", other, alpha).to(Tensor)
template sub_u*(ty: TensorType; self: var Tensor, other: var Tensor, alpha: float = 1): Tensor = ty.dynamicCppCall("sub_", self, other, alpha).to(Tensor)
template sub*(self: Tensor, other: float, alpha: float = 1): Tensor = self.dynamicCppCall("sub", other, alpha).to(Tensor)
template sub*(ty: TensorType; self: var Tensor, other: float, alpha: float = 1): Tensor = ty.dynamicCppCall("sub", self, other, alpha).to(Tensor)
template sub*(_: typedesc[torch]; self: var Tensor, other: float, alpha: float = 1): Tensor = dynamicCCall("at::sub", self, other, alpha).to(Tensor)
template sub_u*(self: Tensor, other: float, alpha: float = 1): Tensor = self.dynamicCppCall("sub_", other, alpha).to(Tensor)
template sub_u*(ty: TensorType; self: var Tensor, other: float, alpha: float = 1): Tensor = ty.dynamicCppCall("sub_", self, other, alpha).to(Tensor)
template s_native_addmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("s_native_addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template s_native_addmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::s_native_addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template s_native_addmm*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("s_native_addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template s_native_addmm*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::s_native_addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template s_native_addmm_u*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("s_native_addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
template s_native_addmm_u*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::s_native_addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
template addmm_out*(ty: TensorType; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template addmm_out*(_: typedesc[torch]; aresult: var Tensor, self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
template addmm*(self: Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addmm", mat1, mat2, beta, alpha).to(Tensor)
template addmm*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template addmm*(_: typedesc[torch]; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = dynamicCCall("at::addmm", self, mat1, mat2, beta, alpha).to(Tensor)
template addmm_u*(self: Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = self.dynamicCppCall("addmm_", mat1, mat2, beta, alpha).to(Tensor)
template addmm_u*(ty: TensorType; self: var Tensor, mat1: var Tensor, mat2: var Tensor, beta: float = 1, alpha: float = 1): Tensor = ty.dynamicCppCall("addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
template native_tensor*(ty: TensorType; self_ty: var TensorType): Tensor = ty.dynamicCppCall("native_tensor", self_ty).to(Tensor)
template native_tensor*(_: typedesc[torch]; self_ty: var TensorType): Tensor = dynamicCCall("at::native_tensor", self_ty).to(Tensor)
template native_tensor*(ty: TensorType; self_ty: var TensorType, size: IntList): Tensor = ty.dynamicCppCall("native_tensor", self_ty, size).to(Tensor)
template native_tensor*(_: typedesc[torch]; self_ty: var TensorType, size: IntList): Tensor = dynamicCCall("at::native_tensor", self_ty, size).to(Tensor)
template tensor*(ty: TensorType; dtype: var TensorType): Tensor = ty.dynamicCppCall("tensor", dtype).to(Tensor)
template tensor*(ty: TensorType; dtype: var TensorType, size: IntList): Tensor = ty.dynamicCppCall("tensor", dtype, size).to(Tensor)
template native_sparse_coo_tensor*(ty: TensorType; indices: var Tensor, values: var Tensor): Tensor = ty.dynamicCppCall("native_sparse_coo_tensor", indices, values).to(Tensor)
template native_sparse_coo_tensor*(ty: TensorType; indices: var Tensor, values: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("native_sparse_coo_tensor", indices, values, size).to(Tensor)
template sparse_coo_tensor*(ty: TensorType; indices: var Tensor, values: var Tensor): Tensor = ty.dynamicCppCall("sparse_coo_tensor", indices, values).to(Tensor)
template sparse_coo_tensor*(ty: TensorType; indices: var Tensor, values: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("sparse_coo_tensor", indices, values, size).to(Tensor)
template u_native_sparse_coo_tensor_unsafe*(ty: TensorType; indices: var Tensor, values: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("_native_sparse_coo_tensor_unsafe", indices, values, size).to(Tensor)
template u_sparse_coo_tensor_unsafe*(ty: TensorType; indices: var Tensor, values: var Tensor, size: IntList): Tensor = ty.dynamicCppCall("_sparse_coo_tensor_unsafe", indices, values, size).to(Tensor)
template u_sparse_coo_tensor_unsafe*(_: typedesc[torch]; indices: var Tensor, values: var Tensor, size: IntList): Tensor = dynamicCCall("at::_sparse_coo_tensor_unsafe", indices, values, size).to(Tensor)
template sparse_raw_resize_u*(self: Tensor, size: IntList, sparseDims: int64, denseDims: int64): Tensor = self.dynamicCppCall("sparse_raw_resize_", size, sparseDims, denseDims).to(Tensor)
template sparse_raw_resize_u*(ty: TensorType; self: var Tensor, size: IntList, sparseDims: int64, denseDims: int64): Tensor = ty.dynamicCppCall("sparse_raw_resize_", self, size, sparseDims, denseDims).to(Tensor)
template u_sparse_mask*(self: Tensor, mask: ASparseTensorRef): Tensor = self.dynamicCppCall("_sparse_mask", mask).to(Tensor)
template u_sparse_mask*(ty: TensorType; self: var Tensor, mask: ASparseTensorRef): Tensor = ty.dynamicCppCall("_sparse_mask", self, mask).to(Tensor)
template to_dense*(self: Tensor): Tensor = self.dynamicCppCall("to_dense").to(Tensor)
template to_dense*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("to_dense", self).to(Tensor)
template u_sparseDims*(self: Tensor): int64 = self.dynamicCppCall("_sparseDims").to(int64)
template u_sparseDims*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_sparseDims", self).to(int64)
template u_dimI*(self: Tensor): int64 = self.dynamicCppCall("_dimI").to(int64)
template u_dimI*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_dimI", self).to(int64)
template u_denseDims*(self: Tensor): int64 = self.dynamicCppCall("_denseDims").to(int64)
template u_denseDims*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_denseDims", self).to(int64)
template u_dimV*(self: Tensor): int64 = self.dynamicCppCall("_dimV").to(int64)
template u_dimV*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_dimV", self).to(int64)
template u_nnz*(self: Tensor): int64 = self.dynamicCppCall("_nnz").to(int64)
template u_nnz*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("_nnz", self).to(int64)
template coalesce*(self: Tensor): Tensor = self.dynamicCppCall("coalesce").to(Tensor)
template coalesce*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("coalesce", self).to(Tensor)
template is_coalesced*(self: Tensor): bool = self.dynamicCppCall("is_coalesced").to(bool)
template is_coalesced*(ty: TensorType; self: var Tensor): bool = ty.dynamicCppCall("is_coalesced", self).to(bool)
template u_indices*(self: Tensor): Tensor = self.dynamicCppCall("_indices").to(Tensor)
template u_indices*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_indices", self).to(Tensor)
template u_values*(self: Tensor): Tensor = self.dynamicCppCall("_values").to(Tensor)
template u_values*(ty: TensorType; self: var Tensor): Tensor = ty.dynamicCppCall("_values", self).to(Tensor)
template hspmm_out*(ty: TensorType; aresult: var Tensor, mat1: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("hspmm_out", aresult, mat1, mat2).to(Tensor)
template hspmm_out*(_: typedesc[torch]; aresult: var Tensor, mat1: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::hspmm_out", aresult, mat1, mat2).to(Tensor)
template hspmm*(ty: TensorType; mat1: var Tensor, mat2: var Tensor): Tensor = ty.dynamicCppCall("hspmm", mat1, mat2).to(Tensor)
template hspmm*(_: typedesc[torch]; mat1: var Tensor, mat2: var Tensor): Tensor = dynamicCCall("at::hspmm", mat1, mat2).to(Tensor)
template raw_copy_sparse_u*(ty: TensorType; self: var Tensor, src: var Tensor): Tensor = ty.dynamicCppCall("raw_copy_sparse_", self, src).to(Tensor)
template raw_copy_sparse_u*(_: typedesc[torch]; self: var Tensor, src: var Tensor): Tensor = dynamicCCall("at::raw_copy_sparse_", self, src).to(Tensor)
template numel*(self: Tensor): int64 = self.dynamicCppCall("numel").to(int64)
template numel*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("numel", self).to(int64)
template numel*(_: typedesc[torch]; self: var Tensor): int64 = dynamicCCall("at::numel", self).to(int64)
template unbind*(self: Tensor, dim: int64 = 0): TensorList = self.dynamicCppCall("unbind", dim).to(TensorList)
template unbind*(ty: TensorType; self: var Tensor, dim: int64 = 0): TensorList = ty.dynamicCppCall("unbind", self, dim).to(TensorList)
template unbind*(_: typedesc[torch]; self: var Tensor, dim: int64 = 0): TensorList = dynamicCCall("at::unbind", self, dim).to(TensorList)
template native_get_device*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("native_get_device", self).to(int64)
template native_get_device*(_: typedesc[torch]; self: var Tensor): int64 = dynamicCCall("at::native_get_device", self).to(int64)
template get_device*(self: Tensor): int64 = self.dynamicCppCall("get_device").to(int64)
template get_device*(ty: TensorType; self: var Tensor): int64 = ty.dynamicCppCall("get_device", self).to(int64)
template get_device*(_: typedesc[torch]; self: var Tensor): int64 = dynamicCCall("at::get_device", self).to(int64)
template meshgrid*(ty: TensorType; tensors: TensorList): TensorList = ty.dynamicCppCall("meshgrid", tensors).to(TensorList)
template meshgrid*(_: typedesc[torch]; tensors: TensorList): TensorList = dynamicCCall("at::meshgrid", tensors).to(TensorList)
template u_local_scalar*(self: Tensor): float = self.dynamicCppCall("_local_scalar").to(float)
template u_local_scalar*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("_local_scalar", self).to(float)
template u_local_scalar*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::_local_scalar", self).to(float)
template u_local_scalar_dense*(ty: TensorType; self: var Tensor): float = ty.dynamicCppCall("_local_scalar_dense", self).to(float)
template u_local_scalar_dense*(_: typedesc[torch]; self: var Tensor): float = dynamicCCall("at::_local_scalar_dense", self).to(float)
