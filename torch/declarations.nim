# Automatically generated, to update run again the generator from the torch root path
# nim c -r torch/generator.nim
proc storage_offset*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("storage_offset").to(int64)
proc contiguous*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("contiguous").to(Tensor)
proc u_u_and_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__and__", arg1).to(Tensor)
proc u_u_or_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__or__", arg1).to(Tensor)
proc u_u_xor_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__xor__", arg1).to(Tensor)
proc u_u_lshift_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__lshift__", arg1).to(Tensor)
proc u_u_rshift_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__rshift__", arg1).to(Tensor)
proc lt*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("lt", arg1).to(Tensor)
proc gt*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("gt", arg1).to(Tensor)
proc le*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("le", arg1).to(Tensor)
proc ge*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ge", arg1).to(Tensor)
proc eq*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("eq", arg1).to(Tensor)
proc ne*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ne", arg1).to(Tensor)
proc min*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("min", arg1).to(Tensor)
proc max*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("max", arg1).to(Tensor)
proc u_abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_abs").to(Tensor)
proc u_th_sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_sigmoid").to(Tensor)
proc u_log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log").to(Tensor)
proc u_log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log10").to(Tensor)
proc u_log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log1p").to(Tensor)
proc u_log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log2").to(Tensor)
proc lgamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("lgamma").to(Tensor)
proc digamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("digamma").to(Tensor)
proc u_exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_exp").to(Tensor)
proc u_expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_expm1").to(Tensor)
proc u_cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cos").to(Tensor)
proc u_acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_acos").to(Tensor)
proc u_cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cosh").to(Tensor)
proc u_sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sin").to(Tensor)
proc u_asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_asin").to(Tensor)
proc u_sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sinh").to(Tensor)
proc u_tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_tan").to(Tensor)
proc u_atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_atan").to(Tensor)
proc u_th_tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_tanh").to(Tensor)
proc u_erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erf").to(Tensor)
proc u_erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erfc").to(Tensor)
proc erfinv*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfinv").to(Tensor)
proc u_sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sqrt").to(Tensor)
proc u_rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_rsqrt").to(Tensor)
proc u_ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ceil").to(Tensor)
proc u_floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_floor").to(Tensor)
proc u_round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_round").to(Tensor)
proc u_trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_trunc").to(Tensor)
proc frac*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("frac").to(Tensor)
proc reciprocal*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("reciprocal").to(Tensor)
proc neg*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("neg").to(Tensor)
proc atan2*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan2", arg1).to(Tensor)
proc pow*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("pow", arg1).to(Tensor)
proc sign*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sign").to(Tensor)
proc fmod*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("fmod", arg1).to(Tensor)
proc remainder*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("remainder", arg1).to(Tensor)
proc u_ger*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ger", arg1).to(Tensor)
proc u_mv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mv", arg1).to(Tensor)
proc u_mm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mm", arg1).to(Tensor)
proc bmm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("bmm", arg1).to(Tensor)
proc orgqr*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("orgqr", arg1).to(Tensor)
proc abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("abs").to(Tensor)
proc acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("acos").to(Tensor)
proc argmax*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmax").to(Tensor)
proc argmin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmin").to(Tensor)
proc asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("asin").to(Tensor)
proc atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan").to(Tensor)
proc bernoulli*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("bernoulli").to(Tensor)
proc ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("ceil").to(Tensor)
proc cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cos").to(Tensor)
proc cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cosh").to(Tensor)
proc det*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("det").to(Tensor)
proc adiv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("div", arg1).to(Tensor)
proc dot*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("dot", arg1).to(Tensor)
proc erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erf").to(Tensor)
proc erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfc").to(Tensor)
proc exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("exp").to(Tensor)
proc expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("expm1").to(Tensor)
proc expand_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("expand_as", arg1).to(Tensor)
proc floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("floor").to(Tensor)
proc ger*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ger", arg1).to(Tensor)
proc inverse*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("inverse").to(Tensor)
proc log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log").to(Tensor)
proc log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log10").to(Tensor)
proc log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log1p").to(Tensor)
proc log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log2").to(Tensor)
proc logdet*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("logdet").to(Tensor)
proc matmul*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("matmul", arg1).to(Tensor)
proc mean*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("mean").to(Tensor)
proc mm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mm", arg1).to(Tensor)
proc mul*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mul", arg1).to(Tensor)
proc mv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mv", arg1).to(Tensor)
proc pin_memory*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("pin_memory").to(Tensor)
proc reshape_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("reshape_as", arg1).to(Tensor)
proc round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("round").to(Tensor)
proc relu*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("relu").to(Tensor)
proc rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("rsqrt").to(Tensor)
proc sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sigmoid").to(Tensor)
proc sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sin").to(Tensor)
proc sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sinh").to(Tensor)
proc smm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("smm", arg1).to(Tensor)
proc squeeze*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("squeeze").to(Tensor)
proc sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sum").to(Tensor)
proc u_sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sum").to(Tensor)
proc sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sqrt").to(Tensor)
proc prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("prod").to(Tensor)
proc u_prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_prod").to(Tensor)
proc t*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("t").to(Tensor)
proc tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tan").to(Tensor)
proc tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tanh").to(Tensor)
proc trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("trunc").to(Tensor)
proc type_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("type_as", arg1).to(Tensor)
proc view_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("view_as", arg1).to(Tensor)
proc u_standard_gamma_grad*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_standard_gamma_grad", arg1).to(Tensor)
proc clone*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("clone").to(Tensor)
proc to_dense*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("to_dense").to(Tensor)
proc u_sparseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_sparseDims").to(int64)
proc u_dimI*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimI").to(int64)
proc u_denseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_denseDims").to(int64)
proc u_dimV*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimV").to(int64)
proc u_nnz*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_nnz").to(int64)
proc coalesce*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("coalesce").to(Tensor)
proc u_indices*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_indices").to(Tensor)
proc u_values*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_values").to(Tensor)
proc numel*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("numel").to(int64)
proc get_device*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("get_device").to(int64)
