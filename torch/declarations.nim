# Automatically generated, to update run again the generator from the torch root path
# nim c -r torch/generator.nim
proc storage_offset*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("storage_offset").to(int64)
proc is_contiguous*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_contiguous").to(bool)
proc is_set_to*(self: Tensor, arg1: Tensor): bool {.inline.} = self.dynamicCppCall("is_set_to", arg1).to(bool)
proc masked_select*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("masked_select", arg1).to(Tensor)
proc contiguous*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("contiguous").to(Tensor)
proc unfold*(self: Tensor, arg1: int64, arg2: int64, arg3: int64): Tensor {.inline.} = self.dynamicCppCall("unfold", arg1, arg2, arg3).to(Tensor)
proc equal*(self: Tensor, arg1: Tensor): bool {.inline.} = self.dynamicCppCall("equal", arg1).to(bool)
proc u_u_and_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__and__", arg1).to(Tensor)
proc u_u_or_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__or__", arg1).to(Tensor)
proc u_u_xor_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__xor__", arg1).to(Tensor)
proc u_u_lshift_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__lshift__", arg1).to(Tensor)
proc u_u_rshift_u_u*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("__rshift__", arg1).to(Tensor)
proc lt*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("lt", arg1).to(Tensor)
proc gt*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("gt", arg1).to(Tensor)
proc le*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("le", arg1).to(Tensor)
proc ge*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ge", arg1).to(Tensor)
proc eq*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("eq", arg1).to(Tensor)
proc ne*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ne", arg1).to(Tensor)
proc min*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("min", arg1).to(Tensor)
proc max*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("max", arg1).to(Tensor)
proc u_th_all*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_all", arg1, arg2).to(Tensor)
proc u_th_any*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_any", arg1, arg2).to(Tensor)
proc u_abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_abs").to(Tensor)
proc u_th_sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_sigmoid").to(Tensor)
proc u_log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log").to(Tensor)
proc u_log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log10").to(Tensor)
proc u_log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log1p").to(Tensor)
proc u_log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log2").to(Tensor)
proc lgamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("lgamma").to(Tensor)
proc digamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("digamma").to(Tensor)
proc polygamma*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("polygamma", arg1).to(Tensor)
proc u_exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_exp").to(Tensor)
proc u_expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_expm1").to(Tensor)
proc u_cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cos").to(Tensor)
proc u_acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_acos").to(Tensor)
proc u_cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cosh").to(Tensor)
proc u_sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sin").to(Tensor)
proc u_asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_asin").to(Tensor)
proc u_sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sinh").to(Tensor)
proc u_tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_tan").to(Tensor)
proc u_atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_atan").to(Tensor)
proc u_th_tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_tanh").to(Tensor)
proc u_erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erf").to(Tensor)
proc u_erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erfc").to(Tensor)
proc erfinv*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfinv").to(Tensor)
proc u_sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sqrt").to(Tensor)
proc u_rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_rsqrt").to(Tensor)
proc u_ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ceil").to(Tensor)
proc u_floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_floor").to(Tensor)
proc u_round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_round").to(Tensor)
proc u_trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_trunc").to(Tensor)
proc frac*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("frac").to(Tensor)
proc u_th_var*(self: Tensor, arg1: int64, arg2: bool = true, arg3: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_var", arg1, arg2, arg3).to(Tensor)
proc u_th_std*(self: Tensor, arg1: int64, arg2: bool = true, arg3: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_std", arg1, arg2, arg3).to(Tensor)
proc reciprocal*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("reciprocal").to(Tensor)
proc neg*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("neg").to(Tensor)
proc atan2*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan2", arg1).to(Tensor)
proc pow*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("pow", arg1).to(Tensor)
proc u_th_sum*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_sum", arg1, arg2).to(Tensor)
proc u_th_prod*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_prod", arg1, arg2).to(Tensor)
proc u_cumsum*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("_cumsum", arg1).to(Tensor)
proc u_cumprod*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("_cumprod", arg1).to(Tensor)
proc sign*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sign").to(Tensor)
proc fmod*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("fmod", arg1).to(Tensor)
proc remainder*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("remainder", arg1).to(Tensor)
proc tril*(self: Tensor, arg1: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("tril", arg1).to(Tensor)
proc triu*(self: Tensor, arg1: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("triu", arg1).to(Tensor)
proc cross*(self: Tensor, arg1: Tensor, arg2: int64 = -1): Tensor {.inline.} = self.dynamicCppCall("cross", arg1, arg2).to(Tensor)
proc diag*(self: Tensor, arg1: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("diag", arg1).to(Tensor)
proc u_ger*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ger", arg1).to(Tensor)
proc u_mv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mv", arg1).to(Tensor)
proc u_mm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mm", arg1).to(Tensor)
proc bmm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("bmm", arg1).to(Tensor)
proc potrs*(self: Tensor, arg1: Tensor, arg2: bool = true): Tensor {.inline.} = self.dynamicCppCall("potrs", arg1, arg2).to(Tensor)
proc orgqr*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("orgqr", arg1).to(Tensor)
proc ormqr*(self: Tensor, arg1: Tensor, arg2: Tensor, arg3: bool = true, arg4: bool = false): Tensor {.inline.} = self.dynamicCppCall("ormqr", arg1, arg2, arg3, arg4).to(Tensor)
proc u_cast_Byte*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Byte", arg1).to(Tensor)
proc u_cast_Char*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Char", arg1).to(Tensor)
proc u_cast_Double*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Double", arg1).to(Tensor)
proc u_cast_Float*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Float", arg1).to(Tensor)
proc u_cast_Int*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Int", arg1).to(Tensor)
proc u_cast_Long*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Long", arg1).to(Tensor)
proc u_cast_Short*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Short", arg1).to(Tensor)
proc u_cast_Half*(self: Tensor, arg1: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Half", arg1).to(Tensor)
proc abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("abs").to(Tensor)
proc acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("acos").to(Tensor)
proc all*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("all", arg1, arg2).to(Tensor)
proc any*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("any", arg1, arg2).to(Tensor)
proc argmax*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("argmax", arg1, arg2).to(Tensor)
proc argmax*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmax").to(Tensor)
proc u_argmax*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_argmax", arg1, arg2).to(Tensor)
proc argmin*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("argmin", arg1, arg2).to(Tensor)
proc argmin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmin").to(Tensor)
proc u_argmin*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_argmin", arg1, arg2).to(Tensor)
proc asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("asin").to(Tensor)
proc atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan").to(Tensor)
proc bernoulli*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("bernoulli").to(Tensor)
proc bincount*(self: Tensor, arg1: Tensor, arg2: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("bincount", arg1, arg2).to(Tensor)
proc ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("ceil").to(Tensor)
proc conv_tbc*(self: Tensor, arg1: Tensor, arg2: Tensor, arg3: int64): Tensor {.inline.} = self.dynamicCppCall("conv_tbc", arg1, arg2, arg3).to(Tensor)
proc cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cos").to(Tensor)
proc cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cosh").to(Tensor)
proc cumsum*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("cumsum", arg1).to(Tensor)
proc cumprod*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("cumprod", arg1).to(Tensor)
proc det*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("det").to(Tensor)
proc diagonal*(self: Tensor, arg1: int64 = 0, arg2: int64 = 0, arg3: int64 = 1): Tensor {.inline.} = self.dynamicCppCall("diagonal", arg1, arg2, arg3).to(Tensor)
proc adiv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("div", arg1).to(Tensor)
proc dot*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("dot", arg1).to(Tensor)
proc erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erf").to(Tensor)
proc erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfc").to(Tensor)
proc exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("exp").to(Tensor)
proc expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("expm1").to(Tensor)
proc expand_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("expand_as", arg1).to(Tensor)
proc flatten*(self: Tensor, arg1: int64 = 0, arg2: int64 = -1): Tensor {.inline.} = self.dynamicCppCall("flatten", arg1, arg2).to(Tensor)
proc floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("floor").to(Tensor)
proc ger*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("ger", arg1).to(Tensor)
proc fft*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("fft", arg1, arg2).to(Tensor)
proc ifft*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("ifft", arg1, arg2).to(Tensor)
proc rfft*(self: Tensor, arg1: int64, arg2: bool = false, arg3: bool = true): Tensor {.inline.} = self.dynamicCppCall("rfft", arg1, arg2, arg3).to(Tensor)
proc inverse*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("inverse").to(Tensor)
proc is_cuda*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_cuda").to(bool)
proc is_distributed*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_distributed").to(bool)
proc is_floating_point*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_floating_point").to(bool)
proc is_nonzero*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_nonzero").to(bool)
proc is_same_size*(self: Tensor, arg1: Tensor): bool {.inline.} = self.dynamicCppCall("is_same_size", arg1).to(bool)
proc is_signed*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_signed").to(bool)
proc is_sparse*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_sparse").to(bool)
proc log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log").to(Tensor)
proc log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log10").to(Tensor)
proc log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log1p").to(Tensor)
proc log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log2").to(Tensor)
proc logdet*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("logdet").to(Tensor)
proc log_softmax*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("log_softmax", arg1).to(Tensor)
proc log_softmax_backward_data*(self: Tensor, arg1: Tensor, arg2: int64, arg3: Tensor): Tensor {.inline.} = self.dynamicCppCall("log_softmax_backward_data", arg1, arg2, arg3).to(Tensor)
proc logsumexp*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("logsumexp", arg1, arg2).to(Tensor)
proc matmul*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("matmul", arg1).to(Tensor)
proc max_values*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("max_values", arg1, arg2).to(Tensor)
proc mean*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("mean").to(Tensor)
proc mean*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("mean", arg1, arg2).to(Tensor)
proc min_values*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("min_values", arg1, arg2).to(Tensor)
proc mm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mm", arg1).to(Tensor)
proc mul*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mul", arg1).to(Tensor)
proc mv*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("mv", arg1).to(Tensor)
proc mvlgamma*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("mvlgamma", arg1).to(Tensor)
proc narrow*(self: Tensor, arg1: int64, arg2: int64, arg3: int64): Tensor {.inline.} = self.dynamicCppCall("narrow", arg1, arg2, arg3).to(Tensor)
proc pin_memory*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("pin_memory").to(Tensor)
proc reshape_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("reshape_as", arg1).to(Tensor)
proc round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("round").to(Tensor)
proc relu*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("relu").to(Tensor)
proc rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("rsqrt").to(Tensor)
proc select*(self: Tensor, arg1: int64, arg2: int64): Tensor {.inline.} = self.dynamicCppCall("select", arg1, arg2).to(Tensor)
proc sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sigmoid").to(Tensor)
proc sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sin").to(Tensor)
proc sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sinh").to(Tensor)
proc size*(self: Tensor, arg1: int64): int64 {.inline.} = self.dynamicCppCall("size", arg1).to(int64)
proc slice*(self: Tensor, arg1: int64 = 0, arg2: int64 = 0, arg3: int64 = 9223372036854775807, arg4: int64 = 1): Tensor {.inline.} = self.dynamicCppCall("slice", arg1, arg2, arg3, arg4).to(Tensor)
proc smm*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("smm", arg1).to(Tensor)
proc softmax*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("softmax", arg1).to(Tensor)
proc softmax_backward_data*(self: Tensor, arg1: Tensor, arg2: int64, arg3: Tensor): Tensor {.inline.} = self.dynamicCppCall("softmax_backward_data", arg1, arg2, arg3).to(Tensor)
proc squeeze*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("squeeze").to(Tensor)
proc squeeze*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("squeeze", arg1).to(Tensor)
proc stft*(self: Tensor, arg1: int64, arg2: int64, arg3: int64, arg4: Tensor, arg5: bool = false, arg6: bool = true): Tensor {.inline.} = self.dynamicCppCall("stft", arg1, arg2, arg3, arg4, arg5, arg6).to(Tensor)
proc stride*(self: Tensor, arg1: int64): int64 {.inline.} = self.dynamicCppCall("stride", arg1).to(int64)
proc sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sum").to(Tensor)
proc u_sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sum").to(Tensor)
proc sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sqrt").to(Tensor)
proc std*(self: Tensor, arg1: bool = true): Tensor {.inline.} = self.dynamicCppCall("std", arg1).to(Tensor)
proc std*(self: Tensor, arg1: int64, arg2: bool = true, arg3: bool = false): Tensor {.inline.} = self.dynamicCppCall("std", arg1, arg2, arg3).to(Tensor)
proc prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("prod").to(Tensor)
proc u_prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_prod").to(Tensor)
proc prod*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("prod", arg1, arg2).to(Tensor)
proc u_prod*(self: Tensor, arg1: int64, arg2: bool = false): Tensor {.inline.} = self.dynamicCppCall("_prod", arg1, arg2).to(Tensor)
proc t*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("t").to(Tensor)
proc tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tan").to(Tensor)
proc tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tanh").to(Tensor)
proc transpose*(self: Tensor, arg1: int64, arg2: int64): Tensor {.inline.} = self.dynamicCppCall("transpose", arg1, arg2).to(Tensor)
proc trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("trunc").to(Tensor)
proc type_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("type_as", arg1).to(Tensor)
proc unsqueeze*(self: Tensor, arg1: int64): Tensor {.inline.} = self.dynamicCppCall("unsqueeze", arg1).to(Tensor)
proc avar*(self: Tensor, arg1: bool = true): Tensor {.inline.} = self.dynamicCppCall("var", arg1).to(Tensor)
proc avar*(self: Tensor, arg1: int64, arg2: bool = true, arg3: bool = false): Tensor {.inline.} = self.dynamicCppCall("var", arg1, arg2, arg3).to(Tensor)
proc view_as*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("view_as", arg1).to(Tensor)
proc where*(self: Tensor, arg1: Tensor, arg2: Tensor): Tensor {.inline.} = self.dynamicCppCall("where", arg1, arg2).to(Tensor)
proc u_s_where*(self: Tensor, arg1: Tensor, arg2: Tensor): Tensor {.inline.} = self.dynamicCppCall("_s_where", arg1, arg2).to(Tensor)
proc u_standard_gamma_grad*(self: Tensor, arg1: Tensor): Tensor {.inline.} = self.dynamicCppCall("_standard_gamma_grad", arg1).to(Tensor)
proc clone*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("clone").to(Tensor)
proc to_dense*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("to_dense").to(Tensor)
proc u_sparseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_sparseDims").to(int64)
proc u_dimI*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimI").to(int64)
proc u_denseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_denseDims").to(int64)
proc u_dimV*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimV").to(int64)
proc u_nnz*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_nnz").to(int64)
proc coalesce*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("coalesce").to(Tensor)
proc is_coalesced*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_coalesced").to(bool)
proc u_indices*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_indices").to(Tensor)
proc u_values*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_values").to(Tensor)
proc numel*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("numel").to(int64)
proc get_device*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("get_device").to(int64)
