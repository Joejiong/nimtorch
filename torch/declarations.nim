# Automatically generated, to update run again the generator from the torch root path
# nim c -r torch/generator.nim
proc storage_offset*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("storage_offset").to(int64)
proc set_u*(self: Tensor, source: Tensor): Tensor {.inline.} = self.dynamicCppCall("set_", source).to(Tensor)
proc set_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("set_").to(Tensor)
proc u_fill_u*(self: Tensor, value: float): Tensor {.inline.} = self.dynamicCppCall("_fill_", value).to(Tensor)
proc u_fill_u*(self: Tensor, value: Tensor): Tensor {.inline.} = self.dynamicCppCall("_fill_", value).to(Tensor)
proc is_contiguous*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_contiguous").to(bool)
proc is_set_to*(self: Tensor, tensor: Tensor): bool {.inline.} = self.dynamicCppCall("is_set_to", tensor).to(bool)
proc masked_fill_u*(self: Tensor, mask: Tensor, value: float): Tensor {.inline.} = self.dynamicCppCall("masked_fill_", mask, value).to(Tensor)
proc masked_fill_u*(self: Tensor, mask: Tensor, value: Tensor): Tensor {.inline.} = self.dynamicCppCall("masked_fill_", mask, value).to(Tensor)
proc masked_scatter_u*(self: Tensor, mask: Tensor, source: Tensor): Tensor {.inline.} = self.dynamicCppCall("masked_scatter_", mask, source).to(Tensor)
proc masked_select_out*(aresult: Tensor, self: Tensor, mask: Tensor): Tensor {.inline.} = dynamicCCall("at::masked_select_out", aresult, self, mask).to(Tensor)
proc masked_select*(self: Tensor, mask: Tensor): Tensor {.inline.} = self.dynamicCppCall("masked_select", mask).to(Tensor)
proc nonzero_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::nonzero_out", aresult, self).to(Tensor)
proc nonzero*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("nonzero").to(Tensor)
proc contiguous*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("contiguous").to(Tensor)
proc th_clone*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::th_clone", self).to(Tensor)
proc th_resize_as_u*(self: Tensor, the_template: Tensor): Tensor {.inline.} = dynamicCCall("at::th_resize_as_", self, the_template).to(Tensor)
proc index_select_out*(aresult: Tensor, self: Tensor, dim: int64, index: Tensor): Tensor {.inline.} = dynamicCCall("at::index_select_out", aresult, self, dim, index).to(Tensor)
proc index_select*(self: Tensor, dim: int64, index: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_select", dim, index).to(Tensor)
proc u_indexCopy_u*(self: Tensor, dim: int64, index: Tensor, source: Tensor): Tensor {.inline.} = self.dynamicCppCall("_indexCopy_", dim, index, source).to(Tensor)
proc take_out*(aresult: Tensor, self: Tensor, index: Tensor): Tensor {.inline.} = dynamicCCall("at::take_out", aresult, self, index).to(Tensor)
proc take*(self: Tensor, index: Tensor): Tensor {.inline.} = self.dynamicCppCall("take", index).to(Tensor)
proc put_u*(self: Tensor, index: Tensor, source: Tensor, accumulate: bool = false): Tensor {.inline.} = self.dynamicCppCall("put_", index, source, accumulate).to(Tensor)
proc index_add_u*(self: Tensor, dim: int64, index: Tensor, source: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_add_", dim, index, source).to(Tensor)
proc index_fill_u*(self: Tensor, dim: int64, index: Tensor, value: float): Tensor {.inline.} = self.dynamicCppCall("index_fill_", dim, index, value).to(Tensor)
proc index_fill_u*(self: Tensor, dim: int64, index: Tensor, value: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_fill_", dim, index, value).to(Tensor)
proc unfold*(self: Tensor, dimension: int64, size: int64, step: int64): Tensor {.inline.} = self.dynamicCppCall("unfold", dimension, size, step).to(Tensor)
proc scatter_u*(self: Tensor, dim: int64, index: Tensor, src: Tensor): Tensor {.inline.} = self.dynamicCppCall("scatter_", dim, index, src).to(Tensor)
proc scatter_u*(self: Tensor, dim: int64, index: Tensor, value: float): Tensor {.inline.} = self.dynamicCppCall("scatter_", dim, index, value).to(Tensor)
proc scatter_add_u*(self: Tensor, dim: int64, index: Tensor, src: Tensor): Tensor {.inline.} = self.dynamicCppCall("scatter_add_", dim, index, src).to(Tensor)
proc gather_out*(aresult: Tensor, self: Tensor, dim: int64, index: Tensor): Tensor {.inline.} = dynamicCCall("at::gather_out", aresult, self, dim, index).to(Tensor)
proc gather*(self: Tensor, dim: int64, index: Tensor): Tensor {.inline.} = self.dynamicCppCall("gather", dim, index).to(Tensor)
proc equal*(self: Tensor, other: Tensor): bool {.inline.} = self.dynamicCppCall("equal", other).to(bool)
proc u_u_uand_u_u_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::__and___out", aresult, self, other).to(Tensor)
proc u_u_uand_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__and__", other).to(Tensor)
proc u_u_uand_u_u_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::__and___out", aresult, self, other).to(Tensor)
proc u_u_uand_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__and__", other).to(Tensor)
proc u_u_uiand_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__iand__", other).to(Tensor)
proc u_u_uiand_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__iand__", other).to(Tensor)
proc u_u_uor_u_u_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::__or___out", aresult, self, other).to(Tensor)
proc u_u_uor_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__or__", other).to(Tensor)
proc u_u_uor_u_u_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::__or___out", aresult, self, other).to(Tensor)
proc u_u_uor_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__or__", other).to(Tensor)
proc u_u_uior_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__ior__", other).to(Tensor)
proc u_u_uior_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__ior__", other).to(Tensor)
proc u_u_uxor_u_u_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::__xor___out", aresult, self, other).to(Tensor)
proc u_u_uxor_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__xor__", other).to(Tensor)
proc u_u_uxor_u_u_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::__xor___out", aresult, self, other).to(Tensor)
proc u_u_uxor_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__xor__", other).to(Tensor)
proc u_u_uixor_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__ixor__", other).to(Tensor)
proc u_u_uixor_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__ixor__", other).to(Tensor)
proc u_u_ulshift_u_u_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::__lshift___out", aresult, self, other).to(Tensor)
proc u_u_ulshift_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__lshift__", other).to(Tensor)
proc u_u_ulshift_u_u_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::__lshift___out", aresult, self, other).to(Tensor)
proc u_u_ulshift_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__lshift__", other).to(Tensor)
proc u_u_uilshift_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__ilshift__", other).to(Tensor)
proc u_u_uilshift_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__ilshift__", other).to(Tensor)
proc u_u_urshift_u_u_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::__rshift___out", aresult, self, other).to(Tensor)
proc u_u_urshift_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__rshift__", other).to(Tensor)
proc u_u_urshift_u_u_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::__rshift___out", aresult, self, other).to(Tensor)
proc u_u_urshift_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__rshift__", other).to(Tensor)
proc u_u_uirshift_u_uu*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("__irshift__", other).to(Tensor)
proc u_u_uirshift_u_uu*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("__irshift__", other).to(Tensor)
proc lt_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::lt_out", aresult, self, other).to(Tensor)
proc lt*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("lt", other).to(Tensor)
proc lt_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::lt_out", aresult, self, other).to(Tensor)
proc lt*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("lt", other).to(Tensor)
proc lt_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("lt_", other).to(Tensor)
proc lt_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("lt_", other).to(Tensor)
proc gt_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::gt_out", aresult, self, other).to(Tensor)
proc gt*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("gt", other).to(Tensor)
proc gt_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::gt_out", aresult, self, other).to(Tensor)
proc gt*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("gt", other).to(Tensor)
proc gt_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("gt_", other).to(Tensor)
proc gt_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("gt_", other).to(Tensor)
proc le_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::le_out", aresult, self, other).to(Tensor)
proc le*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("le", other).to(Tensor)
proc le_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::le_out", aresult, self, other).to(Tensor)
proc le*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("le", other).to(Tensor)
proc le_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("le_", other).to(Tensor)
proc le_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("le_", other).to(Tensor)
proc ge_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::ge_out", aresult, self, other).to(Tensor)
proc ge*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("ge", other).to(Tensor)
proc ge_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::ge_out", aresult, self, other).to(Tensor)
proc ge*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("ge", other).to(Tensor)
proc ge_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("ge_", other).to(Tensor)
proc ge_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("ge_", other).to(Tensor)
proc eq_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::eq_out", aresult, self, other).to(Tensor)
proc eq*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("eq", other).to(Tensor)
proc eq_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::eq_out", aresult, self, other).to(Tensor)
proc eq*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("eq", other).to(Tensor)
proc eq_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("eq_", other).to(Tensor)
proc eq_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("eq_", other).to(Tensor)
proc ne_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::ne_out", aresult, self, other).to(Tensor)
proc ne*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("ne", other).to(Tensor)
proc ne_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::ne_out", aresult, self, other).to(Tensor)
proc ne*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("ne", other).to(Tensor)
proc ne_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("ne_", other).to(Tensor)
proc ne_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("ne_", other).to(Tensor)
proc min_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::min_out", aresult, self, other).to(Tensor)
proc min*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("min", other).to(Tensor)
proc min*(self: Tensor): float {.inline.} = self.dynamicCppCall("min").to(float)
proc max_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::max_out", aresult, self, other).to(Tensor)
proc max*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("max", other).to(Tensor)
proc max*(self: Tensor): float {.inline.} = self.dynamicCppCall("max").to(float)
proc median*(self: Tensor): float {.inline.} = self.dynamicCppCall("median").to(float)
proc all*(self: Tensor): float {.inline.} = self.dynamicCppCall("all").to(float)
proc u_th_all_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_all_out", aresult, self, dim, keepdim).to(Tensor)
proc u_th_all*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_all", dim, keepdim).to(Tensor)
proc any*(self: Tensor): float {.inline.} = self.dynamicCppCall("any").to(float)
proc u_th_any_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_any_out", aresult, self, dim, keepdim).to(Tensor)
proc u_th_any*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_any", dim, keepdim).to(Tensor)
proc u_th_get_device*(self: Tensor): int64 {.inline.} = dynamicCCall("at::_th_get_device", self).to(int64)
proc u_abs_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_abs_out", aresult, self).to(Tensor)
proc u_abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_abs").to(Tensor)
proc u_th_sigmoid_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_th_sigmoid_out", aresult, self).to(Tensor)
proc u_th_sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_sigmoid").to(Tensor)
proc u_log_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_log_out", aresult, self).to(Tensor)
proc u_log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log").to(Tensor)
proc u_log10_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_log10_out", aresult, self).to(Tensor)
proc u_log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log10").to(Tensor)
proc u_log1p_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_log1p_out", aresult, self).to(Tensor)
proc u_log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log1p").to(Tensor)
proc u_log2_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_log2_out", aresult, self).to(Tensor)
proc u_log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_log2").to(Tensor)
proc lgamma_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::lgamma_out", aresult, self).to(Tensor)
proc lgamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("lgamma").to(Tensor)
proc lgamma_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("lgamma_").to(Tensor)
proc digamma_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::digamma_out", aresult, self).to(Tensor)
proc digamma*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("digamma").to(Tensor)
proc digamma_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("digamma_").to(Tensor)
proc polygamma_out*(aresult: Tensor, n: int64, self: Tensor): Tensor {.inline.} = dynamicCCall("at::polygamma_out", aresult, n, self).to(Tensor)
proc polygamma*(self: Tensor, n: int64): Tensor {.inline.} = self.dynamicCppCall("polygamma", n).to(Tensor)
proc polygamma_u*(self: Tensor, n: int64): Tensor {.inline.} = self.dynamicCppCall("polygamma_", n).to(Tensor)
proc u_exp_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_exp_out", aresult, self).to(Tensor)
proc u_exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_exp").to(Tensor)
proc u_expm1_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_expm1_out", aresult, self).to(Tensor)
proc u_expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_expm1").to(Tensor)
proc u_cos_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_cos_out", aresult, self).to(Tensor)
proc u_cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cos").to(Tensor)
proc u_acos_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_acos_out", aresult, self).to(Tensor)
proc u_acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_acos").to(Tensor)
proc u_cosh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_cosh_out", aresult, self).to(Tensor)
proc u_cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_cosh").to(Tensor)
proc u_sin_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_sin_out", aresult, self).to(Tensor)
proc u_sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sin").to(Tensor)
proc u_asin_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_asin_out", aresult, self).to(Tensor)
proc u_asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_asin").to(Tensor)
proc u_sinh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_sinh_out", aresult, self).to(Tensor)
proc u_sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sinh").to(Tensor)
proc u_tan_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_tan_out", aresult, self).to(Tensor)
proc u_tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_tan").to(Tensor)
proc u_atan_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_atan_out", aresult, self).to(Tensor)
proc u_atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_atan").to(Tensor)
proc u_th_tanh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_th_tanh_out", aresult, self).to(Tensor)
proc u_th_tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_th_tanh").to(Tensor)
proc u_erf_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_erf_out", aresult, self).to(Tensor)
proc u_erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erf").to(Tensor)
proc u_erfc_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_erfc_out", aresult, self).to(Tensor)
proc u_erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_erfc").to(Tensor)
proc erfinv_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfinv_").to(Tensor)
proc erfinv_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::erfinv_out", aresult, self).to(Tensor)
proc erfinv*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfinv").to(Tensor)
proc u_sqrt_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_sqrt_out", aresult, self).to(Tensor)
proc u_sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sqrt").to(Tensor)
proc u_rsqrt_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_rsqrt_out", aresult, self).to(Tensor)
proc u_rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_rsqrt").to(Tensor)
proc u_ceil_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_ceil_out", aresult, self).to(Tensor)
proc u_ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ceil").to(Tensor)
proc u_floor_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_floor_out", aresult, self).to(Tensor)
proc u_floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_floor").to(Tensor)
proc u_round_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_round_out", aresult, self).to(Tensor)
proc u_round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_round").to(Tensor)
proc u_trunc_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::_trunc_out", aresult, self).to(Tensor)
proc u_trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_trunc").to(Tensor)
proc frac_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("frac_").to(Tensor)
proc frac_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::frac_out", aresult, self).to(Tensor)
proc frac*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("frac").to(Tensor)
proc u_th_var_out*(aresult: Tensor, self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
proc u_th_var*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_var", dim, unbiased, keepdim).to(Tensor)
proc u_th_std_out*(aresult: Tensor, self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
proc u_th_std*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_std", dim, unbiased, keepdim).to(Tensor)
proc u_th_norm_out*(aresult: Tensor, self: Tensor, p: float, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_norm_out", aresult, self, p, dim, keepdim).to(Tensor)
proc u_th_norm*(self: Tensor, p: float, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_norm", p, dim, keepdim).to(Tensor)
proc renorm_out*(aresult: Tensor, self: Tensor, p: float, dim: int64, maxnorm: float): Tensor {.inline.} = dynamicCCall("at::renorm_out", aresult, self, p, dim, maxnorm).to(Tensor)
proc renorm*(self: Tensor, p: float, dim: int64, maxnorm: float): Tensor {.inline.} = self.dynamicCppCall("renorm", p, dim, maxnorm).to(Tensor)
proc renorm_u*(self: Tensor, p: float, dim: int64, maxnorm: float): Tensor {.inline.} = self.dynamicCppCall("renorm_", p, dim, maxnorm).to(Tensor)
proc reciprocal_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::reciprocal_out", aresult, self).to(Tensor)
proc reciprocal*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("reciprocal").to(Tensor)
proc reciprocal_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("reciprocal_").to(Tensor)
proc neg_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::neg_out", aresult, self).to(Tensor)
proc neg*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("neg").to(Tensor)
proc neg_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("neg_").to(Tensor)
proc atan2_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::atan2_out", aresult, self, other).to(Tensor)
proc atan2*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan2", other).to(Tensor)
proc atan2_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan2_", other).to(Tensor)
proc th_pow_out*(aresult: Tensor, self: Tensor, exponent: float): Tensor {.inline.} = dynamicCCall("at::th_pow_out", aresult, self, exponent).to(Tensor)
proc th_pow*(self: Tensor, exponent: float): Tensor {.inline.} = dynamicCCall("at::th_pow", self, exponent).to(Tensor)
proc pow_out*(aresult: Tensor, self: Tensor, exponent: Tensor): Tensor {.inline.} = dynamicCCall("at::pow_out", aresult, self, exponent).to(Tensor)
proc pow*(self: Tensor, exponent: Tensor): Tensor {.inline.} = self.dynamicCppCall("pow", exponent).to(Tensor)
proc pow_out*(aresult: Tensor, base: float, self: Tensor): Tensor {.inline.} = dynamicCCall("at::pow_out", aresult, base, self).to(Tensor)
proc pow*(base: float, self: Tensor): Tensor {.inline.} = dynamicCCall("at::pow", base, self).to(Tensor)
proc pow_u*(self: Tensor, exponent: float): Tensor {.inline.} = self.dynamicCppCall("pow_", exponent).to(Tensor)
proc pow_u*(self: Tensor, exponent: Tensor): Tensor {.inline.} = self.dynamicCppCall("pow_", exponent).to(Tensor)
proc lerp_out*(aresult: Tensor, self: Tensor, aend: Tensor, weight: float): Tensor {.inline.} = dynamicCCall("at::lerp_out", aresult, self, aend, weight).to(Tensor)
proc lerp*(self: Tensor, aend: Tensor, weight: float): Tensor {.inline.} = self.dynamicCppCall("lerp", aend, weight).to(Tensor)
proc lerp_u*(self: Tensor, aend: Tensor, weight: float): Tensor {.inline.} = self.dynamicCppCall("lerp_", aend, weight).to(Tensor)
proc u_linspace_out*(aresult: Tensor, start: float, aend: float, steps: int64 = 100): Tensor {.inline.} = dynamicCCall("at::_linspace_out", aresult, start, aend, steps).to(Tensor)
proc u_logspace_out*(aresult: Tensor, start: float, aend: float, steps: int64 = 100): Tensor {.inline.} = dynamicCCall("at::_logspace_out", aresult, start, aend, steps).to(Tensor)
proc histc_out*(aresult: Tensor, self: Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor {.inline.} = dynamicCCall("at::histc_out", aresult, self, bins, min, max).to(Tensor)
proc histc*(self: Tensor, bins: int64 = 100, min: float = 0, max: float = 0): Tensor {.inline.} = self.dynamicCppCall("histc", bins, min, max).to(Tensor)
proc th_zero_u*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::th_zero_", self).to(Tensor)
proc u_th_sum_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_sum_out", aresult, self, dim, keepdim).to(Tensor)
proc u_th_sum*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_sum", dim, keepdim).to(Tensor)
proc u_th_prod_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_th_prod_out", aresult, self, dim, keepdim).to(Tensor)
proc u_th_prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_th_prod", dim, keepdim).to(Tensor)
proc u_cumsum_out*(aresult: Tensor, self: Tensor, dim: int64): Tensor {.inline.} = dynamicCCall("at::_cumsum_out", aresult, self, dim).to(Tensor)
proc u_cumsum*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("_cumsum", dim).to(Tensor)
proc u_cumprod_out*(aresult: Tensor, self: Tensor, dim: int64): Tensor {.inline.} = dynamicCCall("at::_cumprod_out", aresult, self, dim).to(Tensor)
proc u_cumprod*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("_cumprod", dim).to(Tensor)
proc sign_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::sign_out", aresult, self).to(Tensor)
proc sign*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sign").to(Tensor)
proc sign_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sign_").to(Tensor)
proc fmod_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::fmod_out", aresult, self, other).to(Tensor)
proc fmod*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("fmod", other).to(Tensor)
proc fmod_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::fmod_out", aresult, self, other).to(Tensor)
proc fmod*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("fmod", other).to(Tensor)
proc fmod_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("fmod_", other).to(Tensor)
proc fmod_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("fmod_", other).to(Tensor)
proc remainder_out*(aresult: Tensor, self: Tensor, other: float): Tensor {.inline.} = dynamicCCall("at::remainder_out", aresult, self, other).to(Tensor)
proc remainder*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("remainder", other).to(Tensor)
proc remainder_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::remainder_out", aresult, self, other).to(Tensor)
proc remainder*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("remainder", other).to(Tensor)
proc remainder_u*(self: Tensor, other: float): Tensor {.inline.} = self.dynamicCppCall("remainder_", other).to(Tensor)
proc remainder_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("remainder_", other).to(Tensor)
proc u_th_clamp_u*(self: Tensor, min: float, max: float): Tensor {.inline.} = self.dynamicCppCall("_th_clamp_", min, max).to(Tensor)
proc u_th_clamp_min_u*(self: Tensor, min: float): Tensor {.inline.} = self.dynamicCppCall("_th_clamp_min_", min).to(Tensor)
proc u_th_clamp_max_u*(self: Tensor, max: float): Tensor {.inline.} = self.dynamicCppCall("_th_clamp_max_", max).to(Tensor)
proc tril_out*(aresult: Tensor, self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = dynamicCCall("at::tril_out", aresult, self, diagonal).to(Tensor)
proc tril*(self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("tril", diagonal).to(Tensor)
proc tril_u*(self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("tril_", diagonal).to(Tensor)
proc triu_out*(aresult: Tensor, self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = dynamicCCall("at::triu_out", aresult, self, diagonal).to(Tensor)
proc triu*(self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("triu", diagonal).to(Tensor)
proc triu_u*(self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("triu_", diagonal).to(Tensor)
proc cross_out*(aresult: Tensor, self: Tensor, other: Tensor, dim: int64 = -1): Tensor {.inline.} = dynamicCCall("at::cross_out", aresult, self, other, dim).to(Tensor)
proc cross*(self: Tensor, other: Tensor, dim: int64 = -1): Tensor {.inline.} = self.dynamicCppCall("cross", other, dim).to(Tensor)
proc diag_out*(aresult: Tensor, self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = dynamicCCall("at::diag_out", aresult, self, diagonal).to(Tensor)
proc diag*(self: Tensor, diagonal: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("diag", diagonal).to(Tensor)
proc th_addmm_out*(aresult: Tensor, self: Tensor, mat1: Tensor, mat2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::th_addmm_out", aresult, self, mat1, mat2, beta, alpha).to(Tensor)
proc th_addmm*(self: Tensor, mat1: Tensor, mat2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::th_addmm", self, mat1, mat2, beta, alpha).to(Tensor)
proc th_addmm_u*(self: Tensor, mat1: Tensor, mat2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::th_addmm_", self, mat1, mat2, beta, alpha).to(Tensor)
proc u_addmv_out*(aresult: Tensor, self: Tensor, mat: Tensor, vec: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::_addmv_out", aresult, self, mat, vec, beta, alpha).to(Tensor)
proc u_addmv*(self: Tensor, mat: Tensor, vec: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("_addmv", mat, vec, beta, alpha).to(Tensor)
proc u_addmv_u*(self: Tensor, mat: Tensor, vec: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("_addmv_", mat, vec, beta, alpha).to(Tensor)
proc u_addr_out*(aresult: Tensor, self: Tensor, vec1: Tensor, vec2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::_addr_out", aresult, self, vec1, vec2, beta, alpha).to(Tensor)
proc u_addr*(self: Tensor, vec1: Tensor, vec2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("_addr", vec1, vec2, beta, alpha).to(Tensor)
proc u_addr_u*(self: Tensor, vec1: Tensor, vec2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("_addr_", vec1, vec2, beta, alpha).to(Tensor)
proc u_ger_out*(aresult: Tensor, self: Tensor, vec2: Tensor): Tensor {.inline.} = dynamicCCall("at::_ger_out", aresult, self, vec2).to(Tensor)
proc u_ger*(self: Tensor, vec2: Tensor): Tensor {.inline.} = self.dynamicCppCall("_ger", vec2).to(Tensor)
proc u_mv_out*(aresult: Tensor, self: Tensor, vec: Tensor): Tensor {.inline.} = dynamicCCall("at::_mv_out", aresult, self, vec).to(Tensor)
proc u_mv*(self: Tensor, vec: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mv", vec).to(Tensor)
proc u_mm_out*(aresult: Tensor, self: Tensor, mat2: Tensor): Tensor {.inline.} = dynamicCCall("at::_mm_out", aresult, self, mat2).to(Tensor)
proc u_mm*(self: Tensor, mat2: Tensor): Tensor {.inline.} = self.dynamicCppCall("_mm", mat2).to(Tensor)
proc bmm_out*(aresult: Tensor, self: Tensor, mat2: Tensor): Tensor {.inline.} = dynamicCCall("at::bmm_out", aresult, self, mat2).to(Tensor)
proc bmm*(self: Tensor, mat2: Tensor): Tensor {.inline.} = self.dynamicCppCall("bmm", mat2).to(Tensor)
proc addbmm_out*(aresult: Tensor, self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::addbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
proc addbmm*(self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("addbmm", batch1, batch2, beta, alpha).to(Tensor)
proc addbmm_u*(self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("addbmm_", batch1, batch2, beta, alpha).to(Tensor)
proc baddbmm_out*(aresult: Tensor, self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = dynamicCCall("at::baddbmm_out", aresult, self, batch1, batch2, beta, alpha).to(Tensor)
proc baddbmm*(self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("baddbmm", batch1, batch2, beta, alpha).to(Tensor)
proc baddbmm_u*(self: Tensor, batch1: Tensor, batch2: Tensor, beta: float = 1, alpha: float = 1): Tensor {.inline.} = self.dynamicCppCall("baddbmm_", batch1, batch2, beta, alpha).to(Tensor)
proc addcmul_out*(aresult: Tensor, self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = dynamicCCall("at::addcmul_out", aresult, self, tensor1, tensor2, value).to(Tensor)
proc addcmul*(self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = self.dynamicCppCall("addcmul", tensor1, tensor2, value).to(Tensor)
proc addcmul_u*(self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = self.dynamicCppCall("addcmul_", tensor1, tensor2, value).to(Tensor)
proc addcdiv_out*(aresult: Tensor, self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = dynamicCCall("at::addcdiv_out", aresult, self, tensor1, tensor2, value).to(Tensor)
proc addcdiv*(self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = self.dynamicCppCall("addcdiv", tensor1, tensor2, value).to(Tensor)
proc addcdiv_u*(self: Tensor, tensor1: Tensor, tensor2: Tensor, value: float = 1): Tensor {.inline.} = self.dynamicCppCall("addcdiv_", tensor1, tensor2, value).to(Tensor)
proc potrs_out*(aresult: Tensor, self: Tensor, input2: Tensor, upper: bool = true): Tensor {.inline.} = dynamicCCall("at::potrs_out", aresult, self, input2, upper).to(Tensor)
proc potrs*(self: Tensor, input2: Tensor, upper: bool = true): Tensor {.inline.} = self.dynamicCppCall("potrs", input2, upper).to(Tensor)
proc orgqr_out*(aresult: Tensor, self: Tensor, input2: Tensor): Tensor {.inline.} = dynamicCCall("at::orgqr_out", aresult, self, input2).to(Tensor)
proc orgqr*(self: Tensor, input2: Tensor): Tensor {.inline.} = self.dynamicCppCall("orgqr", input2).to(Tensor)
proc ormqr_out*(aresult: Tensor, self: Tensor, input2: Tensor, input3: Tensor, left: bool = true, transpose: bool = false): Tensor {.inline.} = dynamicCCall("at::ormqr_out", aresult, self, input2, input3, left, transpose).to(Tensor)
proc ormqr*(self: Tensor, input2: Tensor, input3: Tensor, left: bool = true, transpose: bool = false): Tensor {.inline.} = self.dynamicCppCall("ormqr", input2, input3, left, transpose).to(Tensor)
proc alias*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::alias", self).to(Tensor)
proc u_copy_ignoring_overlaps_u*(self: Tensor, src: Tensor): Tensor {.inline.} = self.dynamicCppCall("_copy_ignoring_overlaps_", src).to(Tensor)
proc u_cat_out*(self: Tensor, tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::_cat_out", self, tensors, dim).to(Tensor)
proc u_cat*(tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::_cat", tensors, dim).to(Tensor)
proc u_cast_Byte*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Byte", non_blocking).to(Tensor)
proc u_cast_Char*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Char", non_blocking).to(Tensor)
proc u_cast_Double*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Double", non_blocking).to(Tensor)
proc u_cast_Float*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Float", non_blocking).to(Tensor)
proc u_cast_Int*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Int", non_blocking).to(Tensor)
proc u_cast_Long*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Long", non_blocking).to(Tensor)
proc u_cast_Short*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Short", non_blocking).to(Tensor)
proc u_cast_Half*(self: Tensor, non_blocking: bool = false): Tensor {.inline.} = self.dynamicCppCall("_cast_Half", non_blocking).to(Tensor)
proc u_cudnn_rnn_flatten_weight*(weight_arr: TensorList, weight_stride0: int64, input_size: int64, mode: int64, hidden_size: int64, num_layers: int64, batch_first: bool, bidirectional: bool): Tensor {.inline.} = dynamicCCall("at::_cudnn_rnn_flatten_weight", weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional).to(Tensor)
proc abs*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("abs").to(Tensor)
proc abs_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("abs_").to(Tensor)
proc abs_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::abs_out", aresult, self).to(Tensor)
proc acos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("acos").to(Tensor)
proc acos_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("acos_").to(Tensor)
proc acos_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::acos_out", aresult, self).to(Tensor)
proc all*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("all", dim, keepdim).to(Tensor)
proc all_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::all_out", aresult, self, dim, keepdim).to(Tensor)
proc any*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("any", dim, keepdim).to(Tensor)
proc any_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::any_out", aresult, self, dim, keepdim).to(Tensor)
proc u_dim_arange*(like: Tensor, dim: int64): Tensor {.inline.} = dynamicCCall("at::_dim_arange", like, dim).to(Tensor)
proc argmax*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("argmax", dim, keepdim).to(Tensor)
proc argmax*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmax").to(Tensor)
proc u_argmax*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_argmax", dim, keepdim).to(Tensor)
proc argmin*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("argmin", dim, keepdim).to(Tensor)
proc argmin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("argmin").to(Tensor)
proc u_argmin*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_argmin", dim, keepdim).to(Tensor)
proc asin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("asin").to(Tensor)
proc asin_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("asin_").to(Tensor)
proc asin_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::asin_out", aresult, self).to(Tensor)
proc atan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan").to(Tensor)
proc atan_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("atan_").to(Tensor)
proc atan_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::atan_out", aresult, self).to(Tensor)
proc bernoulli*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("bernoulli").to(Tensor)
proc bernoulli_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("bernoulli_").to(Tensor)
proc bilinear*(input1: Tensor, input2: Tensor, weight: Tensor, bias: Tensor): Tensor {.inline.} = dynamicCCall("at::bilinear", input1, input2, weight, bias).to(Tensor)
proc bincount*(self: Tensor, weights: Tensor, minlength: int64 = 0): Tensor {.inline.} = self.dynamicCppCall("bincount", weights, minlength).to(Tensor)
proc broadcast_tensors*(tensors: TensorList): TensorList {.inline.} = dynamicCCall("at::broadcast_tensors", tensors).to(TensorList)
proc cat*(tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::cat", tensors, dim).to(Tensor)
proc cat_out*(aresult: Tensor, tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::cat_out", aresult, tensors, dim).to(Tensor)
proc ceil*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("ceil").to(Tensor)
proc ceil_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("ceil_").to(Tensor)
proc ceil_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::ceil_out", aresult, self).to(Tensor)
proc chunk*(self: Tensor, chunks: int64, dim: int64 = 0): TensorList {.inline.} = self.dynamicCppCall("chunk", chunks, dim).to(TensorList)
proc cudnn_is_acceptable*(self: Tensor): bool {.inline.} = dynamicCCall("at::cudnn_is_acceptable", self).to(bool)
proc conv_tbc*(self: Tensor, weight: Tensor, bias: Tensor, pad: int64): Tensor {.inline.} = self.dynamicCppCall("conv_tbc", weight, bias, pad).to(Tensor)
proc cos*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cos").to(Tensor)
proc cos_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cos_").to(Tensor)
proc cos_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::cos_out", aresult, self).to(Tensor)
proc cosh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cosh").to(Tensor)
proc cosh_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("cosh_").to(Tensor)
proc cosh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::cosh_out", aresult, self).to(Tensor)
proc cudnn_convolution_backward_bias*(grad_output: Tensor): Tensor {.inline.} = dynamicCCall("at::cudnn_convolution_backward_bias", grad_output).to(Tensor)
proc cudnn_convolution_transpose_backward_bias*(grad_output: Tensor): Tensor {.inline.} = dynamicCCall("at::cudnn_convolution_transpose_backward_bias", grad_output).to(Tensor)
proc cumsum*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("cumsum", dim).to(Tensor)
proc cumsum_out*(aresult: Tensor, self: Tensor, dim: int64): Tensor {.inline.} = dynamicCCall("at::cumsum_out", aresult, self, dim).to(Tensor)
proc cumprod*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("cumprod", dim).to(Tensor)
proc cumprod_out*(aresult: Tensor, self: Tensor, dim: int64): Tensor {.inline.} = dynamicCCall("at::cumprod_out", aresult, self, dim).to(Tensor)
proc ctc_loss*(log_probs: Tensor, targets: Tensor, input_lengths: Tensor, target_lengths: Tensor, blank: int64 = 0, reduction: int64): Tensor {.inline.} = dynamicCCall("at::ctc_loss", log_probs, targets, input_lengths, target_lengths, blank, reduction).to(Tensor)
proc det*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("det").to(Tensor)
proc diagflat*(self: Tensor, offset: int64 = 0): Tensor {.inline.} = dynamicCCall("at::diagflat", self, offset).to(Tensor)
proc diagonal*(self: Tensor, offset: int64 = 0, dim1: int64 = 0, dim2: int64 = 1): Tensor {.inline.} = self.dynamicCppCall("diagonal", offset, dim1, dim2).to(Tensor)
proc adiv*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("div", other).to(Tensor)
proc div_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("div_", other).to(Tensor)
proc div_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::div_out", aresult, self, other).to(Tensor)
proc dot*(self: Tensor, tensor: Tensor): Tensor {.inline.} = self.dynamicCppCall("dot", tensor).to(Tensor)
proc dot_out*(aresult: Tensor, self: Tensor, tensor: Tensor): Tensor {.inline.} = dynamicCCall("at::dot_out", aresult, self, tensor).to(Tensor)
proc embedding*(weight: Tensor, indices: Tensor, padding_idx: int64 = -1, scale_grad_by_freq: bool = false, sparse: bool = false): Tensor {.inline.} = dynamicCCall("at::embedding", weight, indices, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
proc embedding_backward*(grad: Tensor, indices: Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool, sparse: bool): Tensor {.inline.} = dynamicCCall("at::embedding_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse).to(Tensor)
proc embedding_dense_backward*(grad: Tensor, indices: Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor {.inline.} = dynamicCCall("at::embedding_dense_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
proc embedding_sparse_backward*(grad: Tensor, indices: Tensor, num_weights: int64, padding_idx: int64, scale_grad_by_freq: bool): Tensor {.inline.} = dynamicCCall("at::embedding_sparse_backward", grad, indices, num_weights, padding_idx, scale_grad_by_freq).to(Tensor)
proc u_embedding_bag_backward*(grad: Tensor, indices: Tensor, offsets: Tensor, offset2bag: Tensor, bag_size: Tensor, maximum_indices: Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64, sparse: bool): Tensor {.inline.} = dynamicCCall("at::_embedding_bag_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse).to(Tensor)
proc u_embedding_bag_sparse_backward*(grad: Tensor, indices: Tensor, offsets: Tensor, offset2bag: Tensor, bag_size: Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor {.inline.} = dynamicCCall("at::_embedding_bag_sparse_backward", grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode).to(Tensor)
proc u_embedding_bag_dense_backward*(grad: Tensor, indices: Tensor, offsets: Tensor, offset2bag: Tensor, bag_size: Tensor, maximum_indices: Tensor, num_weights: int64, scale_grad_by_freq: bool, mode: int64): Tensor {.inline.} = dynamicCCall("at::_embedding_bag_dense_backward", grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode).to(Tensor)
proc empty_like*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::empty_like", self).to(Tensor)
proc erf*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erf").to(Tensor)
proc erf_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erf_").to(Tensor)
proc erf_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::erf_out", aresult, self).to(Tensor)
proc erfc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfc").to(Tensor)
proc erfc_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("erfc_").to(Tensor)
proc erfc_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::erfc_out", aresult, self).to(Tensor)
proc exp*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("exp").to(Tensor)
proc exp_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("exp_").to(Tensor)
proc exp_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::exp_out", aresult, self).to(Tensor)
proc expm1*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("expm1").to(Tensor)
proc expm1_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("expm1_").to(Tensor)
proc expm1_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::expm1_out", aresult, self).to(Tensor)
proc expand_as*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("expand_as", other).to(Tensor)
proc eye_out*(aresult: Tensor, n: int64): Tensor {.inline.} = dynamicCCall("at::eye_out", aresult, n).to(Tensor)
proc eye_out*(aresult: Tensor, n: int64, m: int64): Tensor {.inline.} = dynamicCCall("at::eye_out", aresult, n, m).to(Tensor)
proc flatten*(self: Tensor, start_dim: int64 = 0, end_dim: int64 = -1): Tensor {.inline.} = self.dynamicCppCall("flatten", start_dim, end_dim).to(Tensor)
proc fill_u*(self: Tensor, value: Tensor): Tensor {.inline.} = self.dynamicCppCall("fill_", value).to(Tensor)
proc floor*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("floor").to(Tensor)
proc floor_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("floor_").to(Tensor)
proc floor_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::floor_out", aresult, self).to(Tensor)
proc grid_sampler*(input: Tensor, grid: Tensor, padding_mode: int64): Tensor {.inline.} = dynamicCCall("at::grid_sampler", input, grid, padding_mode).to(Tensor)
proc grid_sampler_2d*(input: Tensor, grid: Tensor, interpolation_mode: int64, padding_mode: int64): Tensor {.inline.} = dynamicCCall("at::grid_sampler_2d", input, grid, interpolation_mode, padding_mode).to(Tensor)
proc grid_sampler_3d*(input: Tensor, grid: Tensor, interpolation_mode: int64, padding_mode: int64): Tensor {.inline.} = dynamicCCall("at::grid_sampler_3d", input, grid, interpolation_mode, padding_mode).to(Tensor)
proc ger*(self: Tensor, vec2: Tensor): Tensor {.inline.} = self.dynamicCppCall("ger", vec2).to(Tensor)
proc ger_out*(aresult: Tensor, self: Tensor, vec2: Tensor): Tensor {.inline.} = dynamicCCall("at::ger_out", aresult, self, vec2).to(Tensor)
proc fft*(self: Tensor, signal_ndim: int64, normalized: bool = false): Tensor {.inline.} = self.dynamicCppCall("fft", signal_ndim, normalized).to(Tensor)
proc ifft*(self: Tensor, signal_ndim: int64, normalized: bool = false): Tensor {.inline.} = self.dynamicCppCall("ifft", signal_ndim, normalized).to(Tensor)
proc rfft*(self: Tensor, signal_ndim: int64, normalized: bool = false, onesided: bool = true): Tensor {.inline.} = self.dynamicCppCall("rfft", signal_ndim, normalized, onesided).to(Tensor)
proc u_cufft_get_plan_cache_size*(): int64 {.inline.} = dynamicCCall("at::_cufft_get_plan_cache_size").to(int64)
proc u_cufft_get_plan_cache_max_size*(): int64 {.inline.} = dynamicCCall("at::_cufft_get_plan_cache_max_size").to(int64)
proc index*(self: Tensor, indices: TensorList): Tensor {.inline.} = self.dynamicCppCall("index", indices).to(Tensor)
proc index_copy_u*(self: Tensor, dim: int64, index: Tensor, source: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_copy_", dim, index, source).to(Tensor)
proc index_put*(self: Tensor, indices: TensorList, values: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_put", indices, values).to(Tensor)
proc index_put_u*(self: Tensor, indices: TensorList, values: Tensor): Tensor {.inline.} = self.dynamicCppCall("index_put_", indices, values).to(Tensor)
proc inverse*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("inverse").to(Tensor)
proc inverse_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::inverse_out", aresult, self).to(Tensor)
proc is_cuda*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_cuda").to(bool)
proc is_distributed*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_distributed").to(bool)
proc is_floating_point*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_floating_point").to(bool)
proc is_nonzero*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_nonzero").to(bool)
proc is_same_size*(self: Tensor, other: Tensor): bool {.inline.} = self.dynamicCppCall("is_same_size", other).to(bool)
proc is_signed*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_signed").to(bool)
proc is_sparse*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_sparse").to(bool)
proc log*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log").to(Tensor)
proc log_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log_").to(Tensor)
proc log_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::log_out", aresult, self).to(Tensor)
proc log10*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log10").to(Tensor)
proc log10_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log10_").to(Tensor)
proc log10_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::log10_out", aresult, self).to(Tensor)
proc log1p*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log1p").to(Tensor)
proc log1p_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log1p_").to(Tensor)
proc log1p_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::log1p_out", aresult, self).to(Tensor)
proc log2*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log2").to(Tensor)
proc log2_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("log2_").to(Tensor)
proc log2_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::log2_out", aresult, self).to(Tensor)
proc logdet*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("logdet").to(Tensor)
proc log_softmax*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("log_softmax", dim).to(Tensor)
proc log_softmax_backward_data*(self: Tensor, grad_output: Tensor, output: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("log_softmax_backward_data", grad_output, output, dim).to(Tensor)
proc logsumexp*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("logsumexp", dim, keepdim).to(Tensor)
proc logsumexp_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::logsumexp_out", aresult, self, dim, keepdim).to(Tensor)
proc matmul*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("matmul", other).to(Tensor)
proc matmul_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::matmul_out", aresult, self, other).to(Tensor)
proc max_values*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("max_values", dim, keepdim).to(Tensor)
proc mean*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("mean").to(Tensor)
proc mean*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("mean", dim, keepdim).to(Tensor)
proc mean_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::mean_out", aresult, self, dim, keepdim).to(Tensor)
proc min_values*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("min_values", dim, keepdim).to(Tensor)
proc mm*(self: Tensor, mat2: Tensor): Tensor {.inline.} = self.dynamicCppCall("mm", mat2).to(Tensor)
proc mm_out*(aresult: Tensor, self: Tensor, mat2: Tensor): Tensor {.inline.} = dynamicCCall("at::mm_out", aresult, self, mat2).to(Tensor)
proc mul*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("mul", other).to(Tensor)
proc mul_u*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("mul_", other).to(Tensor)
proc mul_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::mul_out", aresult, self, other).to(Tensor)
proc mv*(self: Tensor, vec: Tensor): Tensor {.inline.} = self.dynamicCppCall("mv", vec).to(Tensor)
proc mv_out*(aresult: Tensor, self: Tensor, vec: Tensor): Tensor {.inline.} = dynamicCCall("at::mv_out", aresult, self, vec).to(Tensor)
proc mvlgamma*(self: Tensor, p: int64): Tensor {.inline.} = self.dynamicCppCall("mvlgamma", p).to(Tensor)
proc mvlgamma_u*(self: Tensor, p: int64): Tensor {.inline.} = self.dynamicCppCall("mvlgamma_", p).to(Tensor)
proc narrow*(self: Tensor, dim: int64, start: int64, length: int64): Tensor {.inline.} = self.dynamicCppCall("narrow", dim, start, length).to(Tensor)
proc ones_like*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::ones_like", self).to(Tensor)
proc pin_memory*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("pin_memory").to(Tensor)
proc rand_like*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::rand_like", self).to(Tensor)
proc randint_like*(self: Tensor, high: int64): Tensor {.inline.} = dynamicCCall("at::randint_like", self, high).to(Tensor)
proc randint_like*(self: Tensor, low: int64, high: int64): Tensor {.inline.} = dynamicCCall("at::randint_like", self, low, high).to(Tensor)
proc randn_like*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::randn_like", self).to(Tensor)
proc randperm_out*(aresult: Tensor, n: int64): Tensor {.inline.} = dynamicCCall("at::randperm_out", aresult, n).to(Tensor)
proc reshape_as*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("reshape_as", other).to(Tensor)
proc round*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("round").to(Tensor)
proc round_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("round_").to(Tensor)
proc round_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::round_out", aresult, self).to(Tensor)
proc relu*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("relu").to(Tensor)
proc relu_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("relu_").to(Tensor)
proc rsqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("rsqrt").to(Tensor)
proc rsqrt_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("rsqrt_").to(Tensor)
proc rsqrt_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::rsqrt_out", aresult, self).to(Tensor)
proc select*(self: Tensor, dim: int64, index: int64): Tensor {.inline.} = self.dynamicCppCall("select", dim, index).to(Tensor)
proc selu*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::selu", self).to(Tensor)
proc selu_u*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::selu_", self).to(Tensor)
proc sigmoid*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sigmoid").to(Tensor)
proc sigmoid_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sigmoid_").to(Tensor)
proc sigmoid_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::sigmoid_out", aresult, self).to(Tensor)
proc sin*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sin").to(Tensor)
proc sin_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sin_").to(Tensor)
proc sin_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::sin_out", aresult, self).to(Tensor)
proc sinh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sinh").to(Tensor)
proc sinh_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sinh_").to(Tensor)
proc sinh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::sinh_out", aresult, self).to(Tensor)
proc size*(self: Tensor, dim: int64): int64 {.inline.} = self.dynamicCppCall("size", dim).to(int64)
proc slice*(self: Tensor, dim: int64 = 0, start: int64 = 0, aend: int64 = 9223372036854775807, step: int64 = 1): Tensor {.inline.} = self.dynamicCppCall("slice", dim, start, aend, step).to(Tensor)
proc smm*(self: Tensor, mat2: Tensor): Tensor {.inline.} = self.dynamicCppCall("smm", mat2).to(Tensor)
proc softmax*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("softmax", dim).to(Tensor)
proc softmax_backward_data*(self: Tensor, grad_output: Tensor, output: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("softmax_backward_data", grad_output, output, dim).to(Tensor)
proc u_sparse_mul_out*(aresult: Tensor, self: Tensor, other: Tensor): Tensor {.inline.} = dynamicCCall("at::_sparse_mul_out", aresult, self, other).to(Tensor)
proc split*(self: Tensor, split_size: int64, dim: int64 = 0): TensorList {.inline.} = self.dynamicCppCall("split", split_size, dim).to(TensorList)
proc squeeze*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("squeeze").to(Tensor)
proc squeeze*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("squeeze", dim).to(Tensor)
proc squeeze_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("squeeze_").to(Tensor)
proc squeeze_u*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("squeeze_", dim).to(Tensor)
proc stack*(tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::stack", tensors, dim).to(Tensor)
proc stack_out*(aresult: Tensor, tensors: TensorList, dim: int64 = 0): Tensor {.inline.} = dynamicCCall("at::stack_out", aresult, tensors, dim).to(Tensor)
proc stft*(self: Tensor, n_fft: int64, hop_length: int64, win_length: int64, window: Tensor, normalized: bool = false, onesided: bool = true): Tensor {.inline.} = self.dynamicCppCall("stft", n_fft, hop_length, win_length, window, normalized, onesided).to(Tensor)
proc stride*(self: Tensor, dim: int64): int64 {.inline.} = self.dynamicCppCall("stride", dim).to(int64)
proc sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sum").to(Tensor)
proc u_sum*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_sum").to(Tensor)
proc u_sum_cuda_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_sum_cuda_out", aresult, self, dim, keepdim).to(Tensor)
proc sqrt*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sqrt").to(Tensor)
proc sqrt_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("sqrt_").to(Tensor)
proc sqrt_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::sqrt_out", aresult, self).to(Tensor)
proc std*(self: Tensor, unbiased: bool = true): Tensor {.inline.} = self.dynamicCppCall("std", unbiased).to(Tensor)
proc std*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("std", dim, unbiased, keepdim).to(Tensor)
proc std_out*(aresult: Tensor, self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::std_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
proc prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("prod").to(Tensor)
proc u_prod*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_prod").to(Tensor)
proc prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("prod", dim, keepdim).to(Tensor)
proc u_prod*(self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("_prod", dim, keepdim).to(Tensor)
proc prod_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::prod_out", aresult, self, dim, keepdim).to(Tensor)
proc u_prod_out*(aresult: Tensor, self: Tensor, dim: int64, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::_prod_out", aresult, self, dim, keepdim).to(Tensor)
proc t*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("t").to(Tensor)
proc t_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("t_").to(Tensor)
proc tan*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tan").to(Tensor)
proc tan_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tan_").to(Tensor)
proc tan_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::tan_out", aresult, self).to(Tensor)
proc tanh*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tanh").to(Tensor)
proc tanh_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("tanh_").to(Tensor)
proc tanh_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::tanh_out", aresult, self).to(Tensor)
proc transpose*(self: Tensor, dim0: int64, dim1: int64): Tensor {.inline.} = self.dynamicCppCall("transpose", dim0, dim1).to(Tensor)
proc transpose_u*(self: Tensor, dim0: int64, dim1: int64): Tensor {.inline.} = self.dynamicCppCall("transpose_", dim0, dim1).to(Tensor)
proc trunc*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("trunc").to(Tensor)
proc trunc_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("trunc_").to(Tensor)
proc trunc_out*(aresult: Tensor, self: Tensor): Tensor {.inline.} = dynamicCCall("at::trunc_out", aresult, self).to(Tensor)
proc type_as*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("type_as", other).to(Tensor)
proc unsqueeze*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("unsqueeze", dim).to(Tensor)
proc unsqueeze_u*(self: Tensor, dim: int64): Tensor {.inline.} = self.dynamicCppCall("unsqueeze_", dim).to(Tensor)
proc avar*(self: Tensor, unbiased: bool = true): Tensor {.inline.} = self.dynamicCppCall("var", unbiased).to(Tensor)
proc avar*(self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = self.dynamicCppCall("var", dim, unbiased, keepdim).to(Tensor)
proc var_out*(aresult: Tensor, self: Tensor, dim: int64, unbiased: bool = true, keepdim: bool = false): Tensor {.inline.} = dynamicCCall("at::var_out", aresult, self, dim, unbiased, keepdim).to(Tensor)
proc view_as*(self: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("view_as", other).to(Tensor)
proc where*(self: Tensor, condition: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("where", condition, other).to(Tensor)
proc u_s_where*(self: Tensor, condition: Tensor, other: Tensor): Tensor {.inline.} = self.dynamicCppCall("_s_where", condition, other).to(Tensor)
proc zeros_like*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::zeros_like", self).to(Tensor)
proc u_standard_gamma_grad*(self: Tensor, output: Tensor): Tensor {.inline.} = self.dynamicCppCall("_standard_gamma_grad", output).to(Tensor)
proc native_clone*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::native_clone", self).to(Tensor)
proc clone*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("clone").to(Tensor)
proc native_resize_as_u*(self: Tensor, the_template: Tensor): Tensor {.inline.} = dynamicCCall("at::native_resize_as_", self, the_template).to(Tensor)
proc resize_as_u*(self: Tensor, the_template: Tensor): Tensor {.inline.} = self.dynamicCppCall("resize_as_", the_template).to(Tensor)
proc native_zero_u*(self: Tensor): Tensor {.inline.} = dynamicCCall("at::native_zero_", self).to(Tensor)
proc zero_u*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("zero_").to(Tensor)
proc to_dense*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("to_dense").to(Tensor)
proc u_sparseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_sparseDims").to(int64)
proc u_dimI*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimI").to(int64)
proc u_denseDims*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_denseDims").to(int64)
proc u_dimV*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_dimV").to(int64)
proc u_nnz*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("_nnz").to(int64)
proc coalesce*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("coalesce").to(Tensor)
proc is_coalesced*(self: Tensor): bool {.inline.} = self.dynamicCppCall("is_coalesced").to(bool)
proc u_indices*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_indices").to(Tensor)
proc u_values*(self: Tensor): Tensor {.inline.} = self.dynamicCppCall("_values").to(Tensor)
proc hspmm_out*(aresult: Tensor, mat1: Tensor, mat2: Tensor): Tensor {.inline.} = dynamicCCall("at::hspmm_out", aresult, mat1, mat2).to(Tensor)
proc hspmm*(mat1: Tensor, mat2: Tensor): Tensor {.inline.} = dynamicCCall("at::hspmm", mat1, mat2).to(Tensor)
proc raw_copy_sparse_u*(self: Tensor, src: Tensor): Tensor {.inline.} = dynamicCCall("at::raw_copy_sparse_", self, src).to(Tensor)
proc numel*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("numel").to(int64)
proc unbind*(self: Tensor, dim: int64 = 0): TensorList {.inline.} = self.dynamicCppCall("unbind", dim).to(TensorList)
proc native_get_device*(self: Tensor): int64 {.inline.} = dynamicCCall("at::native_get_device", self).to(int64)
proc get_device*(self: Tensor): int64 {.inline.} = self.dynamicCppCall("get_device").to(int64)
proc meshgrid*(tensors: TensorList): TensorList {.inline.} = dynamicCCall("at::meshgrid", tensors).to(TensorList)
